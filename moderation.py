import re
import logging
import asyncio
from typing import Tuple, List, Dict
from datetime import datetime, timedelta
from collections import defaultdict
import json
from config import Config

logger = logging.getLogger(__name__)

class AdvancedSpamDetector:
    def __init__(self, db):
        self.db = db
        self.user_behavior = defaultdict(lambda: {
            'message_count': 0,
            'spam_count': 0,
            'last_activity': None,
            'trust_score': 50,  # 0-100, –≥–¥–µ 100 - –ø–æ–ª–Ω–æ—Å—Ç—å—é –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã–π
            'warning_count': 0
        })
        self._load_spam_patterns()
        self._load_whitelist()
    
    def _load_spam_patterns(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤ —Å–ø–∞–º–∞ —Å –≤–µ—Å–∞–º–∏"""
        self.spam_patterns = [
            # –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
            (r'(–∫—É–ø–∏—Ç—å|–ø—Ä–æ–¥–∞–º|–ø—Ä–æ–¥–∞–∂–∞|–ø–æ–∫—É–ø–∫–∞|–∑–∞–∫–∞–∑|—Ü–µ–Ω–∞|—Å—Ç–æ–∏–º–æ—Å—Ç—å|–æ–ø–ª–∞—Ç–∞|–¥–æ—Å—Ç–∞–≤–∫–∞)', 2),
            (r'(—Ä—É–±–ª|‚ÇΩ|—Ä\.|—Ä—É–±|—Ü–µ–Ω–∞|—Å—Ç–æ–∏–º|—Ü–µ–Ω–∞)', 1.5),
            
            # –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Å—Ö–µ–º—ã
            (r'(–∫–∞–∑–∏–Ω|—Å—Ç–∞–≤–∫|–ø–æ–∫–µ—Ä|—Ä—É–ª–µ—Ç–∫|–±—É–∫–º–µ–∫–µ—Ä|—Ç–æ—Ç–∞–ª–∏–∑–∞—Ç–æ—Ä)', 3),
            (r'(–∫—Ä–µ–¥–∏—Ç|–∑–∞—ë–º|–¥–µ–Ω—å–≥–∏ –≤ –¥–æ–ª–≥|–º–∏–∫—Ä–æ–∑–∞–π–º|–∏–ø–æ—Ç–µ–∫)', 2.5),
            (r'(–∏–Ω–≤–µ—Å—Ç|–∞–∫—Ü–∏|–∞–∫—Ü–∏—è|–¥–∏–≤–∏–¥–µ–Ω–¥|—Ç—Ä–µ–π–¥)', 2),
            # –í _load_spam_patterns –¥–æ–±–∞–≤–∏—Ç—å:
(r'(—Ñ–æ—Ä–µ–∫—Å|forex|—Ç—Ä–µ–π–¥–∏–Ω–≥|—Ç—Ä–µ–π–¥–µ—Ä|–±–∏—Ä–∂–∞|–∞–∫—Ç–∏–≤|–∏–Ω–≤–µ—Å—Ç)', 2.0),
(r'(–±–µ—Å–ø–ª–∞—Ç–Ω|–¥–µ–Ω—å–≥|–¥–µ–Ω–µ–≥|–∑–∞—Ä–∞–±–æ—Ç–æ–∫|–ø—Ä–∏–±—ã–ª—å|–¥–æ—Ö–æ–¥)', 1.5),
            
            # –†–µ–∫–ª–∞–º–∞ –∏ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ
            (r'(–ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è|–ø–æ–¥–ø–∏—à–∏—Å—å|–∫–∞–Ω–∞–ª|–≥—Ä—É–ø–ø–∞|–ø–∞–±–ª–∏–∫|telegram)', 2),
            (r'(–±–µ—Å–ø–ª–∞—Ç–Ω–æ|–¥–∞—Ä–æ–º|–∞–∫—Ü–∏—è|—Å–∫–∏–¥–∫–∞|—Ä–∞—Å–ø—Ä–æ–¥–∞–∂|–ø—Ä–æ–º–æ–∫–æ–¥)', 1.5),
            (r'(—Ä–µ–∫–ª–∞–º|–ø—Ä–æ–¥–≤–∏–∂–µ–Ω|—Ä–∞—Å–∫—Ä—É—Ç–∫)', 2),
            
            # –ú–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ
            (r'(–≤—ã–∏–≥—Ä|–ø—Ä–∏–∑|—Ä–æ–∑—ã–≥—Ä—ã—à|–ª–æ—Ç–µ—Ä–µ|–ø–æ–¥–∞—Ä–æ–∫)', 2),
            (r'(–≥–∞—Ä–∞–Ω—Ç–∏|100%|—Ä–µ–∑—É–ª—å—Ç–∞—Ç|–±—ã—Å—Ç—Ä–æ)', 1.5),
            (r'(—Å–µ–∫—Å|–∑–Ω–∞–∫–æ–º—Å—Ç–≤|–≤—Å—Ç—Ä–µ—á|–∏–Ω—Ç–∏–º)', 3),
            
            # –°—Å—ã–ª–∫–∏ –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã
            (r'(http|https|t\.me|@[\w]+|www\.|\.[a-z]{2,})', 2),
            (r'([0-9]{10,}|—Ç–µ–ª–µ—Ñ–æ–Ω|–Ω–æ–º–µ—Ä|–∑–≤–æ–Ω)', 1.5),
            
            # –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            (r'([üíµüí∞ü§ëüìàüëá‚ù§Ô∏èüî•‚≠ê‚ú®üéÅüéâ])', 1),
            (r'(\!{3,}|\?{3,})', 0.5),
            (r'([A-Z]{5,})', 1),  # –ö–ê–ü–° –õ–û–ö
        ]
        
        # –§—Ä–∞–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—á—Ç–∏ –≤—Å–µ–≥–¥–∞ —Å–ø–∞–º
        self.hard_spam_phrases = [
            '–∑–∞—Ä–∞–±–æ—Ç–æ–∫ –±–µ–∑ –≤–ª–æ–∂–µ–Ω–∏–π',
            '–±—ã—Å—Ç—Ä—ã–µ –¥–µ–Ω—å–≥–∏',
            '—Ä–∞–±–æ—Ç–∞ –Ω–∞ –¥–æ–º—É',
            '—Å—Ç–∞–±–∏–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥',
            '–ø–∞—Å—Å–∏–≤–Ω—ã–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫',
            '–∏–Ω–≤–µ—Å—Ç–∏—Ä—É–π –∏ –±–æ–≥–∞—Ç–µ–π',
            '–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–±',
            '—Å–µ–∫—Ä–µ—Ç–Ω–∞—è –º–µ—Ç–æ–¥–∏–∫–∞',
            '—Ç–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è',
            '—É—Å–ø–µ–π –ø–æ–ª—É—á–∏—Ç—å'
        ]
    
    def _load_whitelist(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö —Ñ—Ä–∞–∑"""
        self.whitelist_phrases = [
            '—Å–ø–∞—Å–∏–±–æ', '–±–ª–∞–≥–æ–¥–∞—Ä—é', '–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ',
            '–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ', '–ø–æ–ª–µ–∑–Ω–æ', '–ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å', '–∫–ª–∞—Å—Å',
            '–≤–æ–ø—Ä–æ—Å', '–ø–æ–º–æ–≥–∏—Ç–µ', '–ø–æ–¥—Å–∫–∞–∂–∏—Ç–µ', '–æ–±—ä—è—Å–Ω–∏—Ç–µ',
            '—É—Ç–æ—á–Ω–µ–Ω–∏–µ', '–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ', '—Å–æ–≥–ª–∞—Å–µ–Ω', '–Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω'
        ]
    
    def calculate_text_metrics(self, text: str) -> Dict:
        """–†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ —Ç–µ–∫—Å—Ç–∞"""
        text_lower = text.lower()
        
        metrics = {
            'length': len(text),
            'word_count': len(text.split()),
            'avg_word_length': sum(len(word) for word in text.split()) / max(1, len(text.split())),
            'caps_ratio': sum(1 for c in text if c.isupper()) / max(1, len(text)),
            'special_chars_ratio': sum(1 for c in text if not c.isalnum() and not c.isspace()) / max(1, len(text)),
            'digit_ratio': sum(1 for c in text if c.isdigit()) / max(1, len(text)),
            'emoji_count': sum(1 for c in text if c in 'üíµüí∞ü§ëüìàüëá‚ù§Ô∏èüî•‚≠ê‚ú®üéÅüéâ'),
            'repetition_score': self._calculate_repetition_score(text),
            'suspicious_words': 0
        }
        
        return metrics
    
    def _calculate_repetition_score(self, text: str) -> float:
        """–†–∞—Å—á–µ—Ç –æ—Ü–µ–Ω–∫–∏ –ø–æ–≤—Ç–æ—Ä—è–µ–º–æ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞"""
        words = text.lower().split()
        if len(words) < 3:
            return 0
        
        word_freq = defaultdict(int)
        for word in words:
            word_freq[word] += 1
        
        # –û—Ü–µ–Ω–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —á–∞—Å—Ç–æ—Ç—ã —Å–ª–æ–≤–∞
        max_freq = max(word_freq.values()) if word_freq else 0
        return min(1.0, max_freq / len(words) * 3)
    
    def pattern_based_analysis(self, text: str) -> float:
        """–ê–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–æ–≤"""
        text_lower = text.lower()
        spam_score = 0
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∂–µ—Å—Ç–∫–∏—Ö —Å–ø–∞–º-—Ñ—Ä–∞–∑
        for phrase in self.hard_spam_phrases:
            if phrase in text_lower:
                spam_score += 5
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º –≤—ã—Ä–∞–∂–µ–Ω–∏—è–º
        for pattern, weight in self.spam_patterns:
            if re.search(pattern, text_lower, re.IGNORECASE):
                spam_score += weight
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞
        for phrase in self.whitelist_phrases:
            if phrase in text_lower:
                spam_score -= 1
        
        return max(0, spam_score)
    
    def behavioral_analysis(self, user_id: int, text: str) -> float:
        """–ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_data = self.user_behavior[user_id]
        current_time = datetime.now()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
        if not user_data['last_activity']:
            user_data['last_activity'] = current_time
            user_data['message_count'] = 1
            return 0
        
        # –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
        time_diff = (current_time - user_data['last_activity']).total_seconds()
        user_data['last_activity'] = current_time
        user_data['message_count'] += 1
        
        # –®—Ç—Ä–∞—Ñ –∑–∞ —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if time_diff < 10:  # –ú–µ–Ω—å—à–µ 10 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
            return 2
        elif time_diff < 30:  # –ú–µ–Ω—å—à–µ 30 —Å–µ–∫—É–Ω–¥
            return 1
        
        # –ë–æ–Ω—É—Å –∑–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
        if user_data['trust_score'] > 70:
            return -1
        
        return 0
    
    def update_user_trust_score(self, user_id: int, is_spam: bool):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–≤–µ—Ä–∏—è –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        user_data = self.user_behavior[user_id]
        
        if is_spam:
            user_data['spam_count'] += 1
            user_data['trust_score'] = max(0, user_data['trust_score'] - 20)
            user_data['warning_count'] += 1
        else:
            # –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–≤–µ—Ä–∏—è
            user_data['trust_score'] = min(100, user_data['trust_score'] + 1)
    
    def get_user_trust_level(self, user_id: int) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –¥–æ–≤–µ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        score = self.user_behavior[user_id]['trust_score']
        if score >= 80:
            return "trusted"
        elif score >= 50:
            return "neutral"
        elif score >= 20:
            return "suspicious"
        else:
            return "banned"

class RateLimiter:
    def __init__(self, db):
        self.db = db
        self.user_limits = defaultdict(list)
    
    async def check_limit(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        now = datetime.now()
        minute_ago = now - timedelta(minutes=1)
        
        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
        self.user_limits[user_id] = [
            timestamp for timestamp in self.user_limits[user_id] 
            if timestamp > minute_ago
        ]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞
        return len(self.user_limits[user_id]) < Config.USER_RATE_LIMIT
    
    async def record_message(self, user_id: int, message: str):
        """–ó–∞–ø–∏—Å—å —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.user_limits[user_id].append(datetime.now())
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É
        cursor = self.db.execute_with_datetime('''
            INSERT INTO message_history (user_id, message_text, timestamp, is_spam)
            VALUES (?, ?, ?, ?)
        ''', (user_id, message, datetime.now(), False))
        self.db.conn.commit()

class AdvancedModeration:
    def __init__(self, llm, db):
        self.llm = llm
        self.db = db
        self.spam_detector = AdvancedSpamDetector(db)
        self.rate_limiter = RateLimiter(db)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        self.stats = {
            'total_checked': 0,
            'spam_detected': 0,
            'false_positives': 0,
            'ai_checks': 0
        }
    
    async def advanced_spam_check(self, text: str, user_id: int) -> Tuple[bool, float]:
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º"""
        self.stats['total_checked'] += 1
        
        # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if not text or len(text.strip()) < 2:
            return False, 0
        
        # –®–∞–≥ 1: –ê–Ω–∞–ª–∏–∑ –º–µ—Ç—Ä–∏–∫ —Ç–µ–∫—Å—Ç–∞
        metrics = self.spam_detector.calculate_text_metrics(text)
        
        # –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —à–∞–±–ª–æ–Ω–∞–º
        pattern_score = self.spam_detector.pattern_based_analysis(text)
        
        # –®–∞–≥ 3: –ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
        behavior_score = self.spam_detector.behavioral_analysis(user_id, text)
        
        # –®–∞–≥ 4: –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
        total_score = (
            pattern_score * 0.6 +
            behavior_score * 0.3 +
            self._calculate_metrics_score(metrics) * 0.1
        )
        
        logger.info(f"üõ°Ô∏è –ê–Ω–∞–ª–∏–∑ —Å–ø–∞–º–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: "
                   f"pattern={pattern_score:.1f}, behavior={behavior_score:.1f}, "
                   f"total={total_score:.1f}")
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–æ–≤
        user_trust = self.spam_detector.get_user_trust_level(user_id)
        thresholds = {
            'trusted': 4.0,
            'neutral': 3.0,
            'suspicious': 2.0,
            'banned': 1.0
        }
        
        threshold = thresholds.get(user_trust, 3.0)
        is_spam = total_score >= threshold
        
        # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–≥—Ä–∞–Ω–∏—á–Ω—ã–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º AI –ø—Ä–æ–≤–µ—Ä–∫—É
        if 2.0 <= total_score <= 4.0:
            self.stats['ai_checks'] += 1
            ai_result = await self.ai_spam_check(text)
            if ai_result:
                is_spam = True
                total_score = max(total_score, 4.1)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.spam_detector.update_user_trust_score(user_id, is_spam)
        
        if is_spam:
            self.stats['spam_detected'] += 1
        
        return is_spam, total_score
    
    def _calculate_metrics_score(self, metrics: Dict) -> float:
        """–†–∞—Å—á–µ—Ç –æ—Ü–µ–Ω–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç—Ä–∏–∫ —Ç–µ–∫—Å—Ç–∞"""
        score = 0
        
        # –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if metrics['length'] < 10:
            score += 1
        
        # –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–≥–ª–∞–≤–Ω—ã—Ö –±—É–∫–≤
        if metrics['caps_ratio'] > 0.5:
            score += 2
        
        # –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
        if metrics['special_chars_ratio'] > 0.3:
            score += 1
        
        # –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ü–∏—Ñ—Ä
        if metrics['digit_ratio'] > 0.2:
            score += 1
        
        # –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —ç–º–æ–¥–∑–∏
        if metrics['emoji_count'] > 3:
            score += 1
        
        # –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
        if metrics['repetition_score'] > 0.5:
            score += 2
        
        return score
    
    async def ai_spam_check(self, text: str) -> bool:
        """AI –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–Ω–æ —Å–ø–∞–º–æ–º. –£—á–∏—Ç—ã–≤–∞–π –∫–æ–Ω—Ç–µ–∫—Å—Ç Telegram-–∫–∞–Ω–∞–ª–∞.

–°–û–û–ë–©–ï–ù–ò–ï: "{text[:500]}"

–ö–†–ò–¢–ï–†–ò–ò –°–ü–ê–ú–ê:
‚úÖ –ù–û–†–ú–ê–õ–¨–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï:
- –í–æ–ø—Ä–æ—Å—ã, –æ–±—Å—É–∂–¥–µ–Ω–∏—è, –º–Ω–µ–Ω–∏—è
- –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏, –æ—Ç–∑—ã–≤—ã
- –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–∞—è –∫—Ä–∏—Ç–∏–∫–∞
- –ó–∞–ø—Ä–æ—Å—ã –ø–æ–º–æ—â–∏ –∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
- –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –±–µ—Å–µ–¥–∞

‚ùå –°–ü–ê–ú:
- –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (–ø—Ä–æ–¥–∞–∂–∏, —É—Å–ª—É–≥–∏)
- –†–µ–∫–ª–∞–º–∞ –∫–∞–Ω–∞–ª–æ–≤, —Å–∞–π—Ç–æ–≤, –±–æ—Ç–æ–≤
- –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞
- –ú–∞—Å—Å–æ–≤—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏
- –ë–µ—Å—Å–º—ã—Å–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
- –ù–∞–≤—è–∑—á–∏–≤—ã–µ –ø—Ä–∏–∑—ã–≤—ã –∫ –¥–µ–π—Å—Ç–≤–∏—é

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ï—Å–ª–∏ —Å–æ–º–Ω–µ–≤–∞–µ—à—å—Å—è, —Å—á–∏—Ç–∞–π —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–º.

–í–ï–†–î–ò–ö–¢ (—Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —Å–ª–æ–≤–æ): –°–ü–ê–ú –∏–ª–∏ –ù–û–†–ú–ê"""
        
        try:
            output = self.llm(
                prompt,
                max_tokens=10,
                temperature=0.1,
                stop=["\n", "."]
            )
            answer = output["choices"][0]["text"].strip().upper()
            
            logger.info(f"ü§ñ AI –º–æ–¥–µ—Ä–∞—Ü–∏—è: {answer} –¥–ª—è —Ç–µ–∫—Å—Ç–∞: {text[:50]}...")
            
            return "–°–ü–ê–ú" in answer
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ AI –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {e}")
            return False
    
    async def check_limit(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        return await self.rate_limiter.check_limit(user_id)
    
    async def record_message(self, user_id: int, message: str):
        """–ó–∞–ø–∏—Å—å —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        await self.rate_limiter.record_message(user_id, message)
    
    def get_moderation_stats(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
        return self.stats.copy()
    
    def get_user_stats(self, user_id: int) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_data = self.spam_detector.user_behavior[user_id]
        return {
            'message_count': user_data['message_count'],
            'spam_count': user_data['spam_count'],
            'trust_score': user_data['trust_score'],
            'warning_count': user_data['warning_count'],
            'trust_level': self.spam_detector.get_user_trust_level(user_id)
        }