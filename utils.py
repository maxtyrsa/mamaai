import sys
import os
import logging
import asyncio
from datetime import datetime
from telegram.error import Forbidden, NetworkError, TimedOut, BadRequest, RetryAfter
from config import CHANNEL_ID, LOG_PATH

# === –ö–†–ê–°–ò–í–ê–Ø –°–ò–°–¢–ï–ú–ê –õ–û–ì–ì–ò–†–û–í–ê–ù–ò–Ø ===
class BeautifulFormatter(logging.Formatter):
    """–ö—Ä–∞—Å–∏–≤—ã–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä —Å —ç–º–æ–¥–∑–∏"""
    
    COLORS = {
        'DEBUG': '\033[36m',      # Cyan
        'INFO': '\033[32m',       # Green
        'WARNING': '\033[33m',    # Yellow
        'ERROR': '\033[31m',      # Red
        'CRITICAL': '\033[41m'    # Red background
    }
    RESET = '\033[0m'
    
    def format(self, record):
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º HTTP –ª–æ–≥–∏ –∏ DeprecationWarning
        message = record.getMessage()
        if any(ignore in message for ignore in ['HTTP Request', 'DeprecationWarning']):
            return ""
        
        color = self.COLORS.get(record.levelname, '')
        time_str = self.formatTime(record, "%H:%M:%S")
        
        # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
        emoji = self._get_emoji(record)
        
        # –î–ª—è –æ—à–∏–±–æ–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        if record.exc_info and record.levelname in ['ERROR', 'CRITICAL']:
            exc_type, exc_value, _ = record.exc_info
            short_error = f"{exc_type.__name__}: {str(exc_value)[:100]}"
            return f"{color}{emoji} [{time_str}] {message} | {short_error}{self.RESET}"
        
        return f"{color}{emoji} [{time_str}] {message}{self.RESET}"
    
    def _get_emoji(self, record):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —ç–º–æ–¥–∑–∏ –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—è"""
        message = record.getMessage().lower()
        
        if record.levelname == 'ERROR':
            return '‚ùå'
        elif record.levelname == 'WARNING':
            return '‚ö†Ô∏è'
        
        if any(word in message for word in ['üöÄ', '–∑–∞–ø—É—Å–∫', '—Å—Ç–∞—Ä—Ç']):
            return 'üöÄ'
        elif any(word in message for word in ['‚úÖ', '—É—Å–ø–µ—Ö', '–≥–æ—Ç–æ–≤', '—É—Å–ø–µ—à–Ω–æ']):
            return '‚úÖ'
        elif any(word in message for word in ['ü§ñ', '–∏–∏', '–≥–µ–Ω–µ—Ä–∞—Ü', '–º–æ–¥–µ–ª—å']):
            return 'ü§ñ'
        elif any(word in message for word in ['üí¨', '—Å–æ–æ–±—â–µ–Ω', '–∫–æ–º–º–µ–Ω—Ç–∞—Ä', '–æ—Ç–≤–µ—Ç']):
            return 'üí¨'
        elif any(word in message for word in ['üõ°Ô∏è', '—Å–ø–∞–º', '–º–æ–¥–µ—Ä–∞—Ü']):
            return 'üõ°Ô∏è'
        elif any(word in message for word in ['üì¢', '–ø–æ—Å—Ç', '–ø—É–±–ª–∏–∫–∞—Ü']):
            return 'üì¢'
        elif any(word in message for word in ['‚ùå', '–æ—à–∏–±–∫–∞', 'error']):
            return '‚ùå'
        elif any(word in message for word in ['‚ö†Ô∏è', '–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω', 'warning']):
            return '‚ö†Ô∏è'
        elif any(word in message for word in ['üîî', 'callback', '–∫–Ω–æ–ø–∫']):
            return 'üîî'
        elif any(word in message for word in ['‚å®Ô∏è', '–∫–æ–º–∞–Ω–¥–∞', 'command']):
            return '‚å®Ô∏è'
        elif any(word in message for word in ['üíæ', '–±–∞–∑–∞', 'database']):
            return 'üíæ'
        elif any(word in message for word in ['‚è∞', '–ø–ª–∞–Ω–∏—Ä–æ–≤—â', 'scheduler', '—Å–ª–µ–¥—É—é—â']):
            return '‚è∞'
        elif any(word in message for word in ['üìä', '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫']):
            return 'üìä'
        elif any(word in message for word in ['üåÖ', '—É—Ç—Ä–µ–Ω']):
            return 'üåÖ'
        elif any(word in message for word in ['üåô', '–≤–µ—á–µ—Ä']):
            return 'üåô'
        elif any(word in message for word in ['üõë', '–æ—Å—Ç–∞–Ω–æ–≤–∫', 'stop']):
            return 'üõë'
        elif any(word in message for word in ['üì±', '–±–æ—Ç', '—Ä–∞–±–æ—Ç–∞']):
            return 'üì±'
        elif any(word in message for word in ['üìù', '—Å–æ–∑–¥–∞–Ω', 'create']):
            return 'üìù'
        elif any(word in message for word in ['üìÖ', '–ø–ª–∞–Ω', 'content']):
            return 'üìÖ'
        elif any(word in message for word in ['üé≠', '—Ç–æ–Ω', 'tone']):
            return 'üé≠'
        elif any(word in message for word in ['üí°', '–∏–¥–µ—è', 'idea']):
            return 'üí°'
        
        return 'üìù'

def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫—Ä–∞—Å–∏–≤–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    # –û—Ç–∫–ª—é—á–∞–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ –ª–æ–≥–∏
    logging.getLogger("telegram").setLevel(logging.WARNING)
    logging.getLogger("httpx").setLevel(logging.WARNING)
    logging.getLogger("httpcore").setLevel(logging.WARNING)
    logging.getLogger("apscheduler").setLevel(logging.WARNING)
    logging.getLogger("telegram.request").setLevel(logging.WARNING)
    logging.getLogger("telegram.bot").setLevel(logging.WARNING)
    logging.getLogger("asyncio").setLevel(logging.WARNING)
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–≥–µ—Ä
    logger = logging.getLogger()
    logger.setLevel(logging.INFO)
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    for handler in logger.handlers[:]:
        logger.removeHandler(handler)
    
    # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å –∫—Ä–∞—Å–∏–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    console_handler = logging.StreamHandler(sys.stdout)
    console_handler.setFormatter(BeautifulFormatter())
    
    # –§–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ (–ø–æ–ª–Ω—ã–µ –ª–æ–≥–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
    file_handler = logging.FileHandler(LOG_PATH, encoding='utf-8')
    file_handler.setFormatter(logging.Formatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    ))
    file_handler.setLevel(logging.WARNING)
    
    logger.addHandler(console_handler)
    logger.addHandler(file_handler)
    
    return logger

# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ö–ê–ù–ê–õ–û–ú ===
async def check_bot_permissions(app):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ"""
    try:
        chat = await app.bot.get_chat(CHANNEL_ID)
        logging.info(f"‚úÖ –ö–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω: {chat.title}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ –≤ –∫–∞–Ω–∞–ª–µ
        bot_info = await app.bot.get_me()
        try:
            member = await app.bot.get_chat_member(CHANNEL_ID, bot_info.id)
            if member.status in ['administrator', 'creator']:
                logging.info("‚úÖ –ë–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞")
                return True
            else:
                logging.warning("‚ö†Ô∏è –ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞")
                return False
        except Exception as e:
            logging.error(f"‚ùå –ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∫–∞–Ω–∞–ª–∞: {e}")
            return False
            
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É: {e}")
        return False

async def send_message_with_fallback(app, chat_id: str, text: str, max_retries: int = 3) -> bool:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
    for attempt in range(max_retries):
        try:
            await app.bot.send_message(chat_id, text)
            return True
        except Forbidden as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
            if "bot is not a member" in str(e):
                # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ - –±–æ—Ç –Ω–µ –≤ –∫–∞–Ω–∞–ª–µ
                raise e
            await asyncio.sleep(2)
        except (NetworkError, TimedOut) as e:
            logging.warning(f"‚ö†Ô∏è –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
            await asyncio.sleep(2)
        except RetryAfter as e:
            # Telegram –ø—Ä–æ—Å–∏—Ç –ø–æ–¥–æ–∂–¥–∞—Ç—å
            wait_time = e.retry_after
            logging.warning(f"‚è∞ Rate limit, –∂–¥–µ–º {wait_time} —Å–µ–∫—É–Ω–¥ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})")
            await asyncio.sleep(wait_time)
        except BadRequest as e:
            logging.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
            # –î–ª—è BadRequest –æ–±—ã—á–Ω–æ –Ω–µ—Ç —Å–º—ã—Å–ª–∞ –ø–æ–≤—Ç–æ—Ä—è—Ç—å
            return False
        except Exception as e:
            logging.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
            await asyncio.sleep(2)
    
    return False

async def send_message_safe(app, chat_id: str, text: str, **kwargs) -> bool:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    try:
        await app.bot.send_message(chat_id, text, **kwargs)
        return True
    except Forbidden as e:
        if "bot was blocked" in str(e).lower():
            logging.warning(f"‚ö†Ô∏è –ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º/–∫–∞–Ω–∞–ª–æ–º {chat_id}")
        else:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return False
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return False

async def edit_message_safe(app, chat_id: str, message_id: int, text: str, **kwargs) -> bool:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        await app.bot.edit_message_text(text, chat_id, message_id, **kwargs)
        return True
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return False

async def delete_message_safe(app, chat_id: str, message_id: int) -> bool:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        await app.bot.delete_message(chat_id, message_id)
        return True
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return False

# === –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –í–†–ï–ú–ï–ù–ï–ú ===
def format_timedelta(delta) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    total_seconds = int(delta.total_seconds())
    hours, remainder = divmod(total_seconds, 3600)
    minutes, seconds = divmod(remainder, 60)
    
    if hours > 0:
        return f"{hours}—á {minutes}–º"
    elif minutes > 0:
        return f"{minutes}–º {seconds}—Å"
    else:
        return f"{seconds}—Å"

def get_next_post_time(post_time, current_time=None):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ—Å—Ç–∞"""
    if current_time is None:
        current_time = datetime.now()
    
    target_time = datetime.combine(current_time.date(), post_time)
    
    # –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ —Å–µ–≥–æ–¥–Ω—è, –ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
    if current_time >= target_time:
        target_time = datetime.combine(current_time.date(), post_time) + timedelta(days=1)
    
    return target_time

def is_time_close(target_time, tolerance_minutes=10):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, –±–ª–∏–∑–∫–æ –ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∫ —Ü–µ–ª–µ–≤–æ–º—É"""
    current_time = datetime.now()
    time_diff = abs((target_time - current_time).total_seconds())
    return time_diff <= tolerance_minutes * 60

# === –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –¢–ï–ö–°–¢–û–ú ===
def truncate_text(text: str, max_length: int, suffix: str = "...") -> str:
    """–û–±—Ä–µ–∑–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã"""
    if len(text) <= max_length:
        return text
    return text[:max_length - len(suffix)] + suffix

def escape_markdown(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤ Markdown"""
    escape_chars = r'\_*[]()~`>#+-=|{}.!'
    return ''.join(['\\' + char if char in escape_chars else char for char in text])

def clean_username(username: str) -> str:
    """–û—á–∏—Å—Ç–∫–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not username:
        return "–∞–Ω–æ–Ω–∏–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    # –£–¥–∞–ª—è–µ–º @ –≤ –Ω–∞—á–∞–ª–µ –µ—Å–ª–∏ –µ—Å—Ç—å
    if username.startswith('@'):
        username = username[1:]
    
    # –ó–∞–º–µ–Ω—è–µ–º –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
    username = re.sub(r'[^\w]', '_', username)
    
    return username if username else "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

# === –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–• ===
def get_today_date() -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è –ë–î"""
    return datetime.now().date().isoformat()

def get_current_datetime() -> datetime:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ datetime"""
    return datetime.now()

def datetime_from_isoformat(iso_string: str) -> datetime:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ datetime –∏–∑ ISO —Å—Ç—Ä–æ–∫–∏"""
    try:
        return datetime.fromisoformat(iso_string)
    except (ValueError, TypeError):
        return datetime.now()

# === –§–£–ù–ö–¶–ò–ò –î–õ–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ò ===
async def get_bot_usage_stats(db) -> dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞"""
    cursor = db.conn.cursor()
    
    try:
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
        cursor.execute('SELECT COUNT(*) FROM message_history')
        total_messages = cursor.fetchone()[0]
        
        # –°–æ–æ–±—â–µ–Ω–∏—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        cursor.execute('SELECT COUNT(*) FROM message_history WHERE date(timestamp) = date("now")')
        today_messages = cursor.fetchone()[0]
        
        # –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∞–º
        cursor.execute('SELECT COUNT(*) FROM message_history WHERE is_spam = TRUE')
        spam_blocked = cursor.fetchone()[0]
        
        # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        cursor.execute('SELECT COUNT(DISTINCT user_id) FROM user_activity')
        unique_users = cursor.fetchone()[0]
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)
        cursor.execute('''
            SELECT COUNT(DISTINCT user_id) FROM user_activity 
            WHERE date(last_activity) >= date("now", "-7 days")
        ''')
        active_users = cursor.fetchone()[0]
        
        return {
            'total_messages': total_messages,
            'today_messages': today_messages,
            'spam_blocked': spam_blocked,
            'unique_users': unique_users,
            'active_users': active_users
        }
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return {}

async def get_channel_stats(app, channel_id: str) -> dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–Ω–∞–ª–∞"""
    try:
        chat = await app.bot.get_chat(channel_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
        try:
            members_count = await app.bot.get_chat_members_count(channel_id)
        except:
            members_count = "–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
        
        return {
            'title': chat.title,
            'description': chat.description,
            'members_count': members_count,
            'username': f"@{chat.username}" if chat.username else "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        }
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–Ω–∞–ª–∞: {e}")
        return {}

# === –§–£–ù–ö–¶–ò–ò –î–õ–Ø –û–ë–†–ê–ë–û–¢–ö–ò –û–®–ò–ë–û–ö ===
def handle_async_error(task: asyncio.Task, context: str = ""):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö"""
    if task.exception():
        exception = task.exception()
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ {context}: {exception}")

async def safe_execute(coroutine, context: str = "", default_return=None):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ—Ä—É—Ç–∏–Ω—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        return await coroutine
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ {context}: {e}")
        return default_return

# === –§–£–ù–ö–¶–ò–ò –î–õ–Ø –í–ê–õ–ò–î–ê–¶–ò–ò ===
def is_valid_channel_id(channel_id: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ ID –∫–∞–Ω–∞–ª–∞"""
    if not channel_id:
        return False
    
    # ID –∫–∞–Ω–∞–ª–∞ –æ–±—ã—á–Ω–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å -100
    if channel_id.startswith('-100'):
        try:
            int(channel_id)
            return True
        except ValueError:
            return False
    
    return False

def is_valid_user_id(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return user_id is not None and user_id > 0

def is_valid_text(text: str, min_length: int = 1, max_length: int = 4000) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞"""
    if not text or not isinstance(text, str):
        return False
    
    text = text.strip()
    return min_length <= len(text) <= max_length

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π
import re
from datetime import timedelta

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logger = setup_logging()
