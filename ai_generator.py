import re
import json
import random
import logging
from typing import Dict, Optional, List, Tuple
from datetime import datetime, timedelta
from config import Config

logger = logging.getLogger(__name__)

class AdvancedCache:
    def __init__(self, db):
        self.db = db
        self.memory_cache = {}
        self.hit_count = 0
        self.miss_count = 0
    
    def get(self, key: str) -> Optional[str]:
        if key in self.memory_cache:
            self.hit_count += 1
            return self.memory_cache[key]
        
        cursor = self.db.conn.cursor()
        cursor.execute(
            'SELECT response_text FROM response_cache WHERE message_hash = ? AND datetime(created_at) > datetime("now", "-1 day")',
            (key,)
        )
        result = cursor.fetchone()
        
        if result:
            self.memory_cache[key] = result[0]
            self.hit_count += 1
            return result[0]
        
        self.miss_count += 1
        return None
    
    def set(self, key: str, value: str):
        self.memory_cache[key] = value
        cursor = self.db.conn.cursor()
        cursor.execute('''
            INSERT OR REPLACE INTO response_cache 
            (message_hash, response_text, created_at, usage_count)
            VALUES (?, ?, datetime("now"), COALESCE((SELECT usage_count FROM response_cache WHERE message_hash = ?), 0) + 1)
        ''', (key, value, key))
        self.db.conn.commit()
    
    def get_stats(self) -> Dict:
        total = self.hit_count + self.miss_count
        return {
            'hit_rate': self.hit_count / total if total > 0 else 0,
            'memory_size': len(self.memory_cache),
            'total_hits': self.hit_count,
            'total_misses': self.miss_count
        }

class ResponseGenerator:
    def __init__(self, llm, cache, db):
        self.llm = llm
        self.cache = cache
        self.db = db
    
    async def generate_context_aware_reply(self, comment: str, user_id: int, username: str) -> str:
        logger.info(f"ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –¥–ª—è {username}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context = await self._get_user_context(user_id)
        
        prompt = f"""–¢—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤ Telegram-–∫–∞–Ω–∞–ª–µ. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–≤–∏–ª –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π - –æ—Ç–≤–µ—Ç—å –Ω–∞ –Ω–µ–≥–æ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ —É–º–µ—Å—Ç–Ω–æ.

–ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:
"{comment}"

–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï:
–ò–º—è: {username}
–ö–æ–Ω—Ç–µ–∫—Å—Ç: {context if context else "–ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"}

–¢–í–û–ô –û–¢–í–ï–¢ –î–û–õ–ñ–ï–ù –ë–´–¢–¨:
- –ö—Ä–∞—Ç–∫–∏–º (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
- –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º
- –£–º–µ—Å—Ç–Ω—ã–º –ø–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é
- –û–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ –∏–º–µ–Ω–∏
- –ë–µ–∑ —à–∞–±–ª–æ–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑ —Ç–∏–ø–∞ "–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ"

–û–¢–í–ï–¢:"""
        
        # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
        cache_key = f"reply_{user_id}_{hash(comment[:100])}"
        cached = self.cache.get(cache_key)
        if cached:
            logger.info(f"üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è {username}")
            return cached
        
        try:
            output = self.llm(
                prompt,
                max_tokens=100,
                temperature=0.8,
                stop=["\n\n", "---", "###"]
            )
            
            text = output["choices"][0]["text"].strip()
            text = self.clean_generated_text(text)
            
            if not text or len(text) < 3:
                logger.warning(f"‚ö†Ô∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç: '{text}'")
                text = await self._generate_fallback_reply(username, comment)
            elif len(text) > Config.MAX_REPLY_LENGTH:
                text = text[:Config.MAX_REPLY_LENGTH - 3] + "..."
            
            self.cache.set(cache_key, text)
            logger.info(f"üí¨ –û—Ç–≤–µ—Ç –¥–ª—è {username}: {text[:50]}...")
            return text
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è {username}: {e}")
            return await self._generate_fallback_reply(username, comment)
    
    async def _generate_fallback_reply(self, username: str, comment: str) -> str:
        fallbacks = [
            f"–ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –º—ã—Å–ª—å, {username}! üí´",
            f"{username}, —Å–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏–∏! üëè",
            f"–•–æ—Ä–æ—à–∏–π –≤–æ–ø—Ä–æ—Å, {username}! ü§î",
            f"{username}, –±–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π! üåü",
            f"–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ, {username}! üòä",
            f"{username}, —Ü–µ–Ω—é –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ! üôè",
            f"–°–ø–∞—Å–∏–±–æ, {username}, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª–∏—Å—å! üíñ"
        ]
        return random.choice(fallbacks)
    
    async def _get_user_context(self, user_id: int) -> str:
        cursor = self.db.conn.cursor()
        cursor.execute('''
            SELECT message_text FROM message_history 
            WHERE user_id = ? AND is_spam = FALSE 
            ORDER BY datetime(timestamp) DESC LIMIT 3
        ''', (user_id,))
        
        messages = [row[0] for row in cursor.fetchall()]
        return " | ".join(messages[-2:]) if len(messages) > 1 else ""
    
    def clean_generated_text(self, text: str) -> str:
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        if not text:
            return ""
            
        text = text.strip()
        
        # –£–¥–∞–ª—è–µ–º –∫–∞–≤—ã—á–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if (text.startswith('"') and text.endswith('"')) or (text.startswith("'") and text.endswith("'")):
            text = text[1:-1].strip()
        
        # –£–¥–∞–ª—è–µ–º —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –ø—Ä–æ–º–ø—Ç–∞ (–±–æ–ª–µ–µ –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫)
        artifacts = [
            r'^–æ—Ç–≤–µ—Ç[:\-\s]*',
            r'^—Ä–µ–ø–ª–∏–∫–∞[:\-\s]*', 
            r'^–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π[:\-\s]*',
            r'^–±–æ—Ç[:\-\s]*',
            r'^assistant[:\-\s]*',
            r'^ai[:\-\s]*',
            r'^—Å–æ–æ–±—â–µ–Ω–∏–µ[:\-\s]*',
            r'^–ø–æ—Å—Ç[:\-\s]*',
            r'^—Ç–µ–∫—Å—Ç[:\-\s]*',
            r'^—Å–æ–∑–¥–∞–Ω[:\-\s]*',
            r'^–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω[:\-\s]*',
            r'^–≤–æ—Ç[:\-\s]*',
            r'^–ø—Ä–∏–º–µ—Ä[:\-\s]*',
            r'^–ø—Ä–æ–º–ø—Ç[:\-\s]*',
            r'^–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å[:\-\s]*',
            r'^–∫–∞–Ω–∞–ª[:\-\s]*',
            r'^telegram[:\-\s]*',
        ]
        
        for artifact in artifacts:
            text = re.sub(artifact, '', text, flags=re.IGNORECASE).strip()
        
        # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –≤ –Ω–∞—á–∞–ª–µ
        text = re.sub(r'^[,\-‚Äì‚Äî\s\.\!:]+', '', text).strip()
        
        return text

    def is_quality_text(self, text: str, min_length: int = 20) -> bool:
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
        if not text or len(text.strip()) < min_length:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∏–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
        artifact_indicators = [
            '–æ—Ç–≤–µ—Ç:', '—Ä–µ–ø–ª–∏–∫–∞:', '–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:', '–±–æ—Ç:', 'assistant:', 
            '—Å–æ–æ–±—â–µ–Ω–∏–µ:', '–ø–æ—Å—Ç:', '—Ç–µ–∫—Å—Ç:', '—Å–æ–∑–¥–∞–Ω', '–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω',
            '–Ω–µ–π—Ä–æ—Å–µ—Ç—å', '–∏–∏', 'ai:'
        ]
        
        text_lower = text.lower()
        artifact_count = sum(1 for artifact in artifact_indicators if artifact in text_lower)
        
        # –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤, —Å—á–∏—Ç–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–µ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º
        if artifact_count > 1:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ (–Ω–µ —Ç–æ–ª—å–∫–æ —ç–º–æ–¥–∑–∏ –∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é)
        words = re.findall(r'\b[–∞-—è—ëa-z]{3,}\b', text_lower)
        if len(words) < 3:  # –ú–∏–Ω–∏–º—É–º 3 –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤–∞
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ fallback-—Ñ—Ä–∞–∑
        fallback_phrases = [
            '–ø—Ä–æ—Å—ã–ø–∞–π—Ç–µ—Å—å —Å —É–ª—ã–±–∫–æ–π',
            '—Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å –ø–æ–ª–æ–Ω –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π',
            '–≤–µ—á–µ—Ä - –≤—Ä–µ–º—è –æ—Ç–¥–æ—Ö–Ω—É—Ç—å',
            '–ø—É—Å—Ç—å –≤–∞—à —Å–æ–Ω –±—É–¥–µ—Ç –∫—Ä–µ–ø–∫–∏–º',
            '–Ω–æ–≤—ã–π –¥–µ–Ω—å - –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏',
            '—Å–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏',
            '–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ'
        ]
        
        if any(phrase in text_lower for phrase in fallback_phrases):
            # –≠—Ç–æ fallback-—Ç–µ–∫—Å—Ç, —Å—á–∏—Ç–∞–µ–º –µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –¥–ª—è –∞–≤—Ç–æ-–ø–æ—Å—Ç–æ–≤
            return True
        
        return True

    def clean_motivational_text(self, text: str) -> str:
        """–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–ª—è –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if not text:
            return ""
        
        original_text = text
        text = text.strip()
        
        # –£–¥–∞–ª—è–µ–º –∫–∞–≤—ã—á–∫–∏
        if (text.startswith('"') and text.endswith('"')) or (text.startswith("'") and text.endswith("'")):
            text = text[1:-1].strip()
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –∏ –¥—Ä—É–≥–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã
        text = re.sub(r'^_+\s*', '', text)  # –£–¥–∞–ª—è–µ–º –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –≤ –Ω–∞—á–∞–ª–µ
        text = re.sub(r'_+\s*$', '', text)  # –£–¥–∞–ª—è–µ–º –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Ü–µ
        text = re.sub(r'\s*_{2,}\s*', ' ', text)  # –ó–∞–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –ø—Ä–æ–±–µ–ª–æ–º
        
        # –£–¥–∞–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã
        motivational_artifacts = [
            r'^—Å–æ–æ–±—â–µ–Ω–∏–µ[:\-\s]*',
            r'^—É—Ç—Ä–µ–Ω–Ω–µ–µ[:\-\s]*',
            r'^–≤–µ—á–µ—Ä–Ω–µ–µ[:\-\s]*', 
            r'^–º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ[:\-\s]*',
            r'^–≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–µ–µ[:\-\s]*',
            r'^–ø–æ—Å—Ç[:\-\s]*',
            r'^—Ç–µ–∫—Å—Ç[:\-\s]*',
            r'^–ø—Ä–∏–º–µ—Ä[:\-\s]*',
            r'^—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω[:\-\s]*',
            r'^—Å–æ–∑–¥–∞–Ω[:\-\s]*',
            r'^–±–æ—Ç[:\-\s]*',
            r'^ai[:\-\s]*',
            r'^assistant[:\-\s]*',
            r'^–Ω–µ–π—Ä–æ—Å–µ—Ç—å[:\-\s]*',
            # –£–¥–∞–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –Ω—É–º–µ—Ä–∞—Ü–∏–∏
            r'^\d+[\.\)]\s*',
            r'^[\-\*‚Ä¢]\s*',
            # –£–¥–∞–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –º–µ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –∏–ª–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
            r'\[\d+\]\s*',
            r'\(\d+\)\s*',
        ]
        
        for artifact in motivational_artifacts:
            text = re.sub(artifact, '', text, flags=re.IGNORECASE).strip()
        
        # –£–¥–∞–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏ –ø—Ä–æ–º–ø—Ç–∞ (–º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–µ)
        prompt_remnants = [
            r'—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è.*',
            r'–ø—Ä–∏–º–µ—Ä.*',
            r'–¥–ª–∏–Ω–∞.*', 
            r'–∏—Å–ø–æ–ª—å–∑—É–π.*',
            r'–±—É–¥—å.*',
            r'–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π.*',
            r'–Ω–∞—á–Ω–∏ —Å—Ä–∞–∑—É.*',
            r'—Å–æ–∑–¥–∞–π.*',
            r'—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ.*',
            r'—ç–º–æ–¥–∑–∏.*',
            r'—Ç–µ–ª–µ–≥—Ä–∞–º.*',
            r'–∫–∞–Ω–∞–ª.*',
        ]
        
        for remnant in prompt_remnants:
            text = re.sub(remnant, '', text, flags=re.IGNORECASE | re.DOTALL)
        
        # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
        text = re.sub(r'^[,\-‚Äì‚Äî\s\.\!:\n_]+', '', text)
        text = re.sub(r'[,\-‚Äì‚Äî\s\.\!:\n_]+$', '', text)
        
        # –£–¥–∞–ª—è–µ–º –¥–≤–æ–π–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ª–∏—à–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å—ã
        text = re.sub(r'\s+', ' ', text)
        text = re.sub(r'\n\s*\n', '\n', text)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç —Ç–æ–ª—å–∫–æ –∏–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
        clean_text = re.sub(r'[_\-‚Äì‚Äî\s\.\!:,]', '', text)
        if len(clean_text.strip()) < 10:  # –ï—Å–ª–∏ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –∑–Ω–∞–∫–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å –º–∞–ª–æ —Å–∏–º–≤–æ–ª–æ–≤
            logger.warning(f"‚ö†Ô∏è –¢–µ–∫—Å—Ç —Å–æ—Å—Ç–æ–∏—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∏–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤: '{original_text[:50]}...'")
            return ""  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è fallback
        
        return text.strip()

    async def generate_motivational_message(self, message_type: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º"""
        
        if message_type == "morning":
            prompt = """–°–æ–∑–¥–∞–π –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–µ–µ —É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram-–∫–∞–Ω–∞–ª–∞.

–í–ê–ñ–ù–´–ï –ü–†–ê–í–ò–õ–ê:
1. –ù–ê–ß–ò–ù–ê–ô –ù–ï–ú–ï–î–õ–ï–ù–ù–û –° –¢–ï–ö–°–¢–ê –°–û–û–ë–©–ï–ù–ò–Ø
2. –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π –≤–≤–æ–¥–Ω—ã–µ —Ñ—Ä–∞–∑—ã —Ç–∏–ø–∞ "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ", "–í–æ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ", "–°–æ–∑–¥–∞–ª –ø–æ—Å—Ç"
3. –ù–ï —É–ø–æ–º–∏–Ω–∞–π —á—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ—Å—Ç –∏–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
4. –ë—É–¥—å –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–º –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º
5. –ò—Å–ø–æ–ª—å–∑—É–π —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —è–∑—ã–∫
6. –î–æ–±–∞–≤—å –º–æ—Ç–∏–≤–∞—Ü–∏—é –Ω–∞ –¥–µ–Ω—å
7. –î–ª–∏–Ω–∞: 150-250 —Å–∏–º–≤–æ–ª–æ–≤
8. –ò—Å–ø–æ–ª—å–∑—É–π —É–º–µ—Å—Ç–Ω—ã–µ —ç–º–æ–¥–∑–∏ (1-2 —à—Ç—É–∫–∏)

–ü—Ä–∏–º–µ—Ä –•–û–†–û–®–ï–ì–û —Å–æ–æ–±—â–µ–Ω–∏—è:
"–ù–æ–≤—ã–π –¥–µ–Ω—å - —ç—Ç–æ —á–∏—Å—Ç—ã–π –ª–∏—Å—Ç! üåû –ö–∞–∫–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–∞–ø–∏—à–µ—à—å —Å–µ–≥–æ–¥–Ω—è? –ü—É—Å—Ç—å –∫–∞–∂–¥–∞—è –º–∏–Ω—É—Ç–∞ –±—É–¥–µ—Ç –Ω–∞–ø–æ–ª–Ω–µ–Ω–∞ —Å–º—ã—Å–ª–æ–º –∏ —Ä–∞–¥–æ—Å—Ç—å—é! üí´"

–ü—Ä–∏–º–µ—Ä –ü–õ–û–•–û–ì–û —Å–æ–æ–±—â–µ–Ω–∏—è:
"–°–æ–æ–±—â–µ–Ω–∏–µ: –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, –¥–æ—Ä–æ–≥–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏! –í–æ—Ç —Å–æ–∑–¥–∞–ª –¥–ª—è –≤–∞—Å –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –ø–æ—Å—Ç..."

–¢–í–û–ô –£–¢–†–ï–ù–ù–ò–ô –ü–û–°–¢:"""
        
        else:
            prompt = """–°–æ–∑–¥–∞–π –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Ç—ë–ø–ª–æ–µ –≤–µ—á–µ—Ä–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram-–∫–∞–Ω–∞–ª–∞.

–í–ê–ñ–ù–´–ï –ü–†–ê–í–ò–õ–ê:
1. –ù–ê–ß–ò–ù–ê–ô –ù–ï–ú–ï–î–õ–ï–ù–ù–û –° –¢–ï–ö–°–¢–ê –°–û–û–ë–©–ï–ù–ò–Ø  
2. –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π –≤–≤–æ–¥–Ω—ã–µ —Ñ—Ä–∞–∑—ã —Ç–∏–ø–∞ "–°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏", "–í–æ—Ç –≤–µ—á–µ—Ä–Ω–∏–π –ø–æ—Å—Ç", "–°–æ–∑–¥–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ"
3. –ù–ï —É–ø–æ–º–∏–Ω–∞–π —á—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ—Å—Ç –∏–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
4. –ë—É–¥—å –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–º –∏ —É—é—Ç–Ω—ã–º
5. –ò—Å–ø–æ–ª—å–∑—É–π —Ä–∞—Å—Å–ª–∞–±–ª—è—é—â–∏–π —Ç–æ–Ω
6. –î–ª–∏–Ω–∞: 150-250 —Å–∏–º–≤–æ–ª–æ–≤
7. –ò—Å–ø–æ–ª—å–∑—É–π —É–º–µ—Å—Ç–Ω—ã–µ —ç–º–æ–¥–∑–∏ (1-2 —à—Ç—É–∫–∏)

–ü—Ä–∏–º–µ—Ä –•–û–†–û–®–ï–ì–û —Å–æ–æ–±—â–µ–Ω–∏—è:
"–í–µ—á–µ—Ä –Ω–∞–∫—Ä—ã–≤–∞–µ—Ç –≥–æ—Ä–æ–¥ —É—é—Ç–Ω—ã–º –ø–æ–∫—Ä—ã–≤–∞–ª–æ–º... üåô –°–∞–º–æ–µ –≤—Ä–µ–º—è –æ—Ç–¥–æ—Ö–Ω—É—Ç—å, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è –∏ –ø–æ–º–µ—á—Ç–∞—Ç—å –æ –∑–∞–≤—Ç—Ä–∞—à–Ω–∏—Ö —Å–≤–µ—Ä—à–µ–Ω–∏—è—Ö! üí§"

–ü—Ä–∏–º–µ—Ä –ü–õ–û–•–û–ì–û —Å–æ–æ–±—â–µ–Ω–∏—è:
"–í–µ—á–µ—Ä–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: –°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏, –¥—Ä—É–∑—å—è! –í–æ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –≤–∞—Å..."

–¢–í–û–ô –í–ï–ß–ï–†–ù–ò–ô –ü–û–°–¢:"""
        
        try:
            output = self.llm(
                prompt,
                max_tokens=200,
                temperature=0.85,
                top_p=0.9,
                stop=["–ü—Ä–∏–º–µ—Ä", "–ü—Ä–∞–≤–∏–ª–∞:", "–°–æ–æ–±—â–µ–Ω–∏–µ:", "–ü–æ—Å—Ç:"]
            )
            text = output["choices"][0]["text"].strip()
            
            logger.info(f"ü§ñ –°—ã—Ä–æ–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç ({message_type}): {text[:100]}...")
            
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–ª—è –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            text = self.clean_motivational_text(text)
            
            # –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
            if not text or len(text.strip()) < 20:
                logger.warning(f"‚ö†Ô∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π {message_type} —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
                return await self._get_fallback_post(message_type)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
            words = re.findall(r'\b[–∞-—è—ë]{3,}\b', text.lower())
            if len(words) < 3:  # –ú–∏–Ω–∏–º—É–º 3 –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤–∞
                logger.warning(f"‚ö†Ô∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–µ—á–∏—Ç–∞–µ–º—ã–π {message_type} —Ç–µ–∫—Å—Ç (–º–∞–ª–æ —Å–ª–æ–≤), –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
                return await self._get_fallback_post(message_type)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
            if any(artifact in text.lower() for artifact in ['—Å–æ–æ–±—â–µ–Ω–∏–µ', '–ø–æ—Å—Ç', '–±–æ—Ç', '—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω', '—Å–æ–∑–¥–∞–Ω']):
                logger.warning(f"‚ö†Ô∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π {message_type} —Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
                return await self._get_fallback_post(message_type)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            if message_type == "evening":
                evening_indicators = ['–≤–µ—á–µ—Ä', '–Ω–æ—á—å', '—Å–æ–Ω', '–æ—Ç–¥—ã—Ö', '—Å–ø–æ–∫–æ–π–Ω–æ–π', '–∑–∞–∫–∞—Ç', '–ª—É–Ω–∞', '–∑–≤–µ–∑–¥', '—Ä–∞—Å—Å–ª–∞–±', '–≤–æ—Å—Å—Ç–∞–Ω–æ–≤']
                if not any(indicator in text.lower() for indicator in evening_indicators):
                    logger.warning(f"‚ö†Ô∏è –í–µ—á–µ—Ä–Ω–∏–π –ø–æ—Å—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–µ—á–µ—Ä–Ω–µ–π —Ç–µ–º–∞—Ç–∏–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
                    return await self._get_fallback_post(message_type)
            else:
                morning_indicators = ['—É—Ç—Ä–æ', '—É—Ç—Ä–µ–Ω', '–¥–µ–Ω—å', '–Ω–æ–≤—ã–π', '–ø—Ä–æ—Å—ã–ø–∞–π', '—Å–æ–ª–Ω—Ü', '—Ä–∞—Å—Å–≤–µ—Ç', '–Ω–∞—á–∞–ª–æ']
                if not any(indicator in text.lower() for indicator in morning_indicators):
                    logger.warning(f"‚ö†Ô∏è –£—Ç—Ä–µ–Ω–Ω–∏–π –ø–æ—Å—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —É—Ç—Ä–µ–Ω–Ω–µ–π —Ç–µ–º–∞—Ç–∏–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
                    return await self._get_fallback_post(message_type)
            
            logger.info(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π {message_type} –ø–æ—Å—Ç: {text[:80]}...")
            return text
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ {message_type} —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return await self._get_fallback_post(message_type)

    async def _get_fallback_post(self, post_type: str) -> str:
        """–£–ª—É—á—à–µ–Ω–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –ø–æ—Å—Ç—ã –Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        fallbacks = {
            "morning": [
                "‚òÄÔ∏è –ù–æ–≤–æ–µ —É—Ç—Ä–æ ‚Äî –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏! –ü—É—Å—Ç—å —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å –±—É–¥–µ—Ç –Ω–∞–ø–æ–ª–Ω–µ–Ω —è—Ä–∫–∏–º–∏ –º–æ–º–µ–Ω—Ç–∞–º–∏ –∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–º–∏ —Å–≤–µ—Ä—à–µ–Ω–∏—è–º–∏! üåü",
                "üåû –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –û—Ç–∫—Ä–æ–π—Ç–µ –≥–ª–∞–∑–∞ –Ω–∞–≤—Å—Ç—Ä–µ—á—É –Ω–æ–≤—ã–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º. –°–µ–≥–æ–¥–Ω—è ‚Äî –∏–¥–µ–∞–ª—å–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –±–æ–ª—å—à–∏—Ö –∏ –º–∞–ª–µ–Ω—å–∫–∏—Ö –ø–æ–±–µ–¥! üí´",
                "‚ú® –ü—Ä–æ—Å—ã–ø–∞–π—Ç–µ—Å—å —Å —É–ª—ã–±–∫–æ–π! –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª –¥–ª—è –≤–∞—Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø—Ä–∏—è—Ç–Ω—ã—Ö —Å—é—Ä–ø—Ä–∏–∑–æ–≤ –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è —Ä–æ—Å—Ç–∞! üöÄ",
                "üåÖ –£—Ç—Ä–æ ‚Äî –≤—Ä–µ–º—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤–µ–ª–∏–∫–∏–µ –¥–µ–ª–∞! –ù–∞–ø–æ–ª–Ω–∏—Ç–µ —ç—Ç–æ—Ç –¥–µ–Ω—å —Å–º—ã—Å–ª–æ–º, —Ä–∞–¥–æ—Å—Ç—å—é –∏ –¥–≤–∏–∂–µ–Ω–∏–µ–º –∫ –≤–∞—à–∏–º —Ü–µ–ª—è–º! üí™"
            ],
            "evening": [
                "üåô –í–µ—á–µ—Ä –Ω–∞—Å—Ç—É–ø–∞–µ—Ç, –ø—Ä–∏–Ω–æ—Å—è —Å —Å–æ–±–æ–π —É–º–∏—Ä–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ... –û—Ç–¥–æ—Ö–Ω–∏—Ç–µ, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å–∏–ª—ã –∏ –ø—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ –Ω–æ–≤—ã–º —Å–≤–µ—Ä—à–µ–Ω–∏—è–º –∑–∞–≤—Ç—Ä–∞! üí§",
                "‚ú® –î–µ–Ω—å –ø–æ–¥—Ö–æ–¥–∏—Ç –∫ –∫–æ–Ω—Ü—É... –ë–ª–∞–≥–æ–¥–∞—Ä–∏—Ç–µ –∑–∞ –≤—Å–µ —É—Ä–æ–∫–∏ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è. –ó–∞–≤—Ç—Ä–∞ ‚Äî –Ω–æ–≤—ã–π —à–∞–Ω—Å —Å—Ç–∞—Ç—å –µ—â–µ –ª—É—á—à–µ! üåü",
                "üåú –°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏! –ü—É—Å—Ç—å –≤–∞—à–∏ —Å–Ω—ã –±—É–¥—É—Ç —Å–≤–µ—Ç–ª—ã–º–∏, –∞ —É—Ç—Ä–æ –ø—Ä–∏–Ω–µ—Å–µ—Ç —Å–≤–µ–∂–∏–µ —Å–∏–ª—ã –∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–±–µ–¥! üí´",
                "üåÉ –í–µ—á–µ—Ä ‚Äî –≤—Ä–µ–º—è –ø–æ–¥–≤–µ—Å—Ç–∏ –∏—Ç–æ–≥–∏ –∏ –æ—Ç–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è. –û—Ç–¥—ã—Ö–∞–π—Ç–µ, –∑–∞–≤—Ç—Ä–∞ –≤–∞—Å –∂–¥—É—Ç –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏! üíñ"
            ]
        }
        
        import random
        return random.choice(fallbacks.get(post_type, ["–û—Ç–ª–∏—á–Ω–æ–≥–æ –¥–Ω—è! üåü"]))

    async def generate_post(self, topic: str, tone: str, main_idea: str, use_emojis: bool, length: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º"""
        
        length_map = {
            "short": "50-100 —Å–∏–º–≤–æ–ª–æ–≤, –æ—á–µ–Ω—å –∫—Ä–∞—Ç–∫–æ",
            "medium": "200-300 —Å–∏–º–≤–æ–ª–æ–≤, —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ—Å—Ç",
            "long": "400-600 —Å–∏–º–≤–æ–ª–æ–≤, —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –ø–æ—Å—Ç"
        }
        
        tone_map = {
            "serious": "—Å–µ—Ä—å—ë–∑–Ω—ã–π, –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π",
            "friendly": "–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π", 
            "funny": "—é–º–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π, —Å —à—É—Ç–∫–∞–º–∏",
            "inspirational": "–≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π, –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π",
            "professional": "–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, –¥–µ–ª–æ–≤–æ–π"
        }
        
        emoji_instruction = "–ò—Å–ø–æ–ª—å–∑—É–π —É–º–µ—Å—Ç–Ω—ã–µ —Å–º–∞–π–ª–∏–∫–∏ –∏ —ç–º–æ–¥–∑–∏." if use_emojis else "–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–º–∞–π–ª–∏–∫–∏ –∏ —ç–º–æ–¥–∑–∏."
        
        prompt = f"""–°–æ–∑–¥–∞–π –ø–æ—Å—Ç –¥–ª—è Telegram-–∫–∞–Ω–∞–ª–∞ –Ω–∞ —Ç–µ–º—É: "{topic}"

–û—Å–Ω–æ–≤–Ω–∞—è –º—ã—Å–ª—å: {main_idea}
–¢–æ–Ω: {tone_map.get(tone, tone)}
–î–ª–∏–Ω–∞: {length_map.get(length, length)}
{emoji_instruction}

–í–ê–ñ–ù–´–ï –ü–†–ê–í–ò–õ–ê:
- –ù–∞—á–∏–Ω–∞–π —Å—Ä–∞–∑—É —Å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –ø–æ—Å—Ç–∞
- –ù–µ —É–ø–æ–º–∏–Ω–∞–π —á—Ç–æ —ç—Ç–æ –ø–æ—Å—Ç, —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
- –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –≤–≤–æ–¥–Ω—ã–µ —Ñ—Ä–∞–∑—ã —Ç–∏–ø–∞ "–í–æ—Ç –ø–æ—Å—Ç", "–°–æ–∑–¥–∞–ª –∫–æ–Ω—Ç–µ–Ω—Ç", "–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–µ–∫—Å—Ç"
- –ù–µ –ø–æ–≤—Ç–æ—Ä—è–π —É—Å–ª–æ–≤–∏—è –∑–∞–¥–∞–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç–µ
- –ë—É–¥—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –∏ –æ—Ä–≥–∞–Ω–∏—á–Ω—ã–º
- –ù–µ –¥—É–±–ª–∏—Ä—É–π —Å–ª–æ–≤–∞ –∏ —Ñ—Ä–∞–∑—ã

–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:"""
        
        try:
            output = self.llm(
                prompt,
                max_tokens=400 if length == "long" else 250,
                temperature=0.8,
                top_p=0.9
            )
            
            text = output["choices"][0]["text"].strip()
            
            # –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
            text = self.clean_post_text(text)
            
            # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–Ω–æ–≤–æ
            if len(text) < 20:
                logger.warning("‚ö†Ô∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –ø–æ—Å—Ç, –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞")
                return await self.generate_post_fallback(topic, tone, main_idea, use_emojis, length)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Ç–µ–∫—Å—Ç–∞
            if not self.is_quality_text(text):
                logger.warning("‚ö†Ô∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–µ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–æ—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
                return await self.generate_post_fallback(topic, tone, main_idea, use_emojis, length)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
            if len(text) > 100 and length != "short":
                sentences = re.split(r'[.!?]+', text)
                if len(sentences) > 2:
                    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏
                    cleaned_sentences = [s.strip() for s in sentences if s.strip()]
                    if len(cleaned_sentences) > 2:
                        text = '.\n\n'.join(cleaned_sentences) + ('.' if not text.endswith('.') else '')
            
            return text or "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã."
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞: {e}")
            return await self.generate_post_fallback(topic, tone, main_idea, use_emojis, length)

    async def generate_post_fallback(self, topic: str, tone: str, main_idea: str, use_emojis: bool, length: str) -> str:
        """–†–µ–∑–µ—Ä–≤–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞"""
        emojis = "üåü‚ú®üòäüì±üí´üéØüí°" if use_emojis else ""
        
        base_text = f"{topic}. {main_idea}"
        
        if length == "short":
            return f"{base_text}{emojis}"
        elif length == "medium":
            return f"{base_text}\n\n–£–∑–Ω–∞–π—Ç–µ –±–æ–ª—å—à–µ –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ!{emojis}"
        else:
            return f"{base_text}\n\n–ü–æ–¥—Ä–æ–±–Ω–µ–µ —Ä–∞—Å—Å–∫–∞–∂–µ–º –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏—è—Ö. –û—Å—Ç–∞–≤–∞–π—Ç–µ—Å—å –Ω–∞ —Å–≤—è–∑–∏!{emojis}"

    def clean_post_text(self, text: str) -> str:
        """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–æ–≤"""
        if not text:
            return ""
        
        # –£–¥–∞–ª—è–µ–º –∫–∞–≤—ã—á–∫–∏ –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
        text = text.strip()
        if (text.startswith('"') and text.endswith('"')) or (text.startswith("'") and text.endswith("'")):
            text = text[1:-1].strip()
        
        # –£–¥–∞–ª—è–µ–º –Ω–æ–º–µ—Ä–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –≤ –Ω–∞—á–∞–ª–µ
        text = re.sub(r'^\d+[\.\)]\s*', '', text)
        
        # –£–¥–∞–ª—è–µ–º –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –≤ –Ω–∞—á–∞–ª–µ
        text = re.sub(r'^[\-\*‚Ä¢]\s*', '', text)
        
        # –£–¥–∞–ª—è–µ–º —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã (—Ç–æ–ª—å–∫–æ –≤ –Ω–∞—á–∞–ª–µ —Ç–µ–∫—Å—Ç–∞)
        prefixes = [
            r'^–ø–æ—Å—Ç\s*[:\-]?\s*',
            r'^—Ç–µ–∫—Å—Ç\s*[:\-]?\s*', 
            r'^—Å–æ–æ–±—â–µ–Ω–∏–µ\s*[:\-]?\s*',
            r'^–∫–æ–Ω—Ç–µ–Ω—Ç\s*[:\-]?\s*',
            r'^–∑–∞–ø–∏—Å—å\s*[:\-]?\s*',
            r'^—Ä–µ–∑—É–ª—å—Ç–∞—Ç\s*[:\-]?\s*',
            r'^–≤–æ—Ç\s*[:\-]?\s*',
            r'^—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω\w*\s*[:\-]?\s*',
            r'^–æ—Ç–≤–µ—Ç\s*[:\-]?\s*',
            r'^–±–æ—Ç\s*[:\-]?\s*',
            r'^–∏–∏\s*[:\-]?\s*',
            r'^–Ω–µ–π—Ä–æ—Å–µ—Ç—å\s*[:\-]?\s*',
        ]
        
        for prefix in prefixes:
            text = re.sub(prefix, '', text, flags=re.IGNORECASE)
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–ª–æ–≤–∞ (–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–ª—É—á–∞–∏)
        words = text.split()
        if len(words) > 1:
            cleaned_words = []
            for i, word in enumerate(words):
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –∏–¥—É—Ç –ø–æ–¥—Ä—è–¥ –∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ
                if i > 0 and word.lower() == words[i-1].lower():
                    continue
                cleaned_words.append(word)
            text = ' '.join(cleaned_words)
        
        # –£–¥–∞–ª—è–µ–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –ø—Ä–æ–º–ø—Ç–∞
        artifacts = [
            r'—Å–æ–∑–¥–∞–π\s+–ø–æ—Å—Ç\s*[:\-]?\s*',
            r'–Ω–∞—á–Ω–∏\s+—Å—Ä–∞–∑—É\s+—Å\s+—Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è\s*[:\-]?\s*',
            r'–Ω–µ\s+–∏—Å–ø–æ–ª—å–∑—É–π\s+—Ñ—Ä–∞–∑—ã\s*[:\-]?\s*',
            r'—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è\s+–∫\s+–ø–æ—Å—Ç—É\s*[:\-]?\s*',
            r'–ø–æ—Å—Ç\s+–¥–æ–ª–∂–µ–Ω\s+–±—ã—Ç—å\s*[:\-]?\s*',
        ]
        
        for artifact in artifacts:
            text = re.sub(artifact, '', text, flags=re.IGNORECASE)
        
        # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –≤ –Ω–∞—á–∞–ª–µ
        text = re.sub(r'^[,\-‚Äì‚Äî\s\.\!:]+', '', text).strip()
        
        # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
        text = re.sub(r'\n\s*\n\s*\n+', '\n\n', text)
        
        return text

    async def generate_content_plan(self, plan_type: str, niche: str, tone: str, posts_per_week: int = 7, audience: str = "–ø–æ–¥–ø–∏—Å—á–∏–∫–∏ Telegram-–∫–∞–Ω–∞–ª–∞", goals: str = "–≤–æ–≤–ª–µ—á–µ–Ω–∏–µ –∏ —Ä–æ—Å—Ç –∞—É–¥–∏—Ç–æ—Ä–∏–∏") -> Dict:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞ —Å —É—á–µ—Ç–æ–º –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π Telegram"""
        
        if plan_type == "weekly":
            duration = "–Ω–µ–¥–µ–ª—é"
            total_posts = min(posts_per_week, 7)
        else:
            duration = "–º–µ—Å—è—Ü"
            total_posts = min(posts_per_week * 4, 28)
        
        # –§–æ—Ä–º–∞—Ç—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è Telegram
        content_formats = [
            "üìù –¢–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç (–ª–æ–Ω–≥—Ä–∏–¥, –º–Ω–µ–Ω–∏–µ, –∞–Ω–∞–ª–∏—Ç–∏–∫–∞)",
            "üìä –û–ø—Ä–æ—Å –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ",
            "üì∞ –ù–æ–≤–æ—Å—Ç–∏ –∏ –¥–∞–π–¥–∂–µ—Å—Ç—ã", 
            "üí¨ –û–±—Å—É–∂–¥–µ–Ω–∏–µ –∏ –¥–∏—Å–∫—É—Å—Å–∏—è",
            "üìà –û–±–∑–æ—Ä –∏–ª–∏ –∫–µ–π—Å",
            "‚ùì –í–æ–ø—Ä–æ—Å –∫ –∞—É–¥–∏—Ç–æ—Ä–∏–∏",
            "üéØ –ü–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã (—á–µ–∫-–ª–∏—Å—Ç—ã, –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏)",
            "üé≠ –†–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç",
            "üöÄ –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –ø–æ—Å—Ç",
            "ü§ù –°–æ–≤–µ—Ç—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"
        ]
        
        prompt = f"""–°–æ–∑–¥–∞–π –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω –¥–ª—è Telegram-–∫–∞–Ω–∞–ª–∞ –Ω–∞ {duration}. 

–ö–õ–Æ–ß–ï–í–´–ï –ü–†–ò–ù–¶–ò–ü–´ –†–ê–ë–û–¢–´:
1. –£—á–∏—Ç—ã–≤–∞–π –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ Telegram: –¥–ª–∏–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã, —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, —Ö–µ—à—Ç–µ–≥–∏, –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –∞—É–¥–∏—Ç–æ—Ä–∏–µ–π
2. –ì–µ–Ω–µ—Ä–∏—Ä—É–π –∫–æ–Ω—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–≤–æ—Ü–∏—Ä—É–µ—Ç –æ–±—Å—É–∂–¥–µ–Ω–∏–µ –∏ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å  
3. –ò—Å–ø–æ–ª—å–∑—É–π —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞

–û–°–ù–û–í–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´:
- **–¢–µ–º–∞—Ç–∏–∫–∞**: {niche}
- **–¢–æ–Ω –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏**: {tone}
- **–ü–µ—Ä–∏–æ–¥**: {duration}
- **–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è**: {audience}
- **–¶–µ–ª–∏**: {goals}
- **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤**: {total_posts}

–§–û–†–ú–ê–¢–´ –ö–û–ù–¢–ï–ù–¢–ê –î–õ–Ø TELEGRAM:
{chr(10).join(f"{i+1}. {format}" for i, format in enumerate(content_formats))}

–¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –ö–û–ù–¢–ï–ù–¢-–ü–õ–ê–ù–£:
- –°–æ–∑–¥–∞–π —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç, —á–µ—Ä–µ–¥—É—è —Ñ–æ—Ä–º–∞—Ç—ã
- –í–∫–ª—é—á–∞–π –≤–æ–≤–ª–µ–∫–∞—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã (–≤–æ–ø—Ä–æ—Å—ã, –æ–ø—Ä–æ—Å—ã, –æ–±—Å—É–∂–¥–µ–Ω–∏—è)
- –ü—Ä–µ–¥–ª–∞–≥–∞–π —Ç–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≤–æ—Ü–∏—Ä—É—é—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
- –ò—Å–ø–æ–ª—å–∑—É–π –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ç–µ–º—ã –¥–ª—è —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏
- –î–æ–±–∞–≤–ª—è–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ö–µ—à—Ç–µ–≥–∞–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—é

–°–¢–†–£–ö–¢–£–†–ê –ö–ê–ñ–î–û–ì–û –ü–û–°–¢–ê:
- day (–¥–ª—è –Ω–µ–¥–µ–ª–∏) –∏–ª–∏ date (–¥–ª—è –º–µ—Å—è—Ü–∞)
- topic: –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ç–µ–º–∞ –ø–æ—Å—Ç–∞ (–µ–º–∫–∞—è –∏ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–∞—è)
- main_idea: –æ—Å–Ω–æ–≤–Ω–∞—è –∏–¥–µ—è –∏ –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã
- post_type: —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ —Ñ–æ—Ä–º–∞—Ç–æ–≤
- tone: —Ç–æ–Ω –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
- engagement_elements: —ç–ª–µ–º–µ–Ω—Ç—ã –≤–æ–≤–ª–µ—á–µ–Ω–∏—è (–≤–æ–ø—Ä–æ—Å—ã, –æ–ø—Ä–æ—Å—ã –∏ —Ç.–¥.)
- hashtags: —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ö–µ—à—Ç–µ–≥–∏ (3-5 —à—Ç—É–∫)
- format_tips: —Å–æ–≤–µ—Ç—ã –ø–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –¥–ª—è Telegram

–í–µ—Ä–Ω–∏ –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON —Å –ø–æ–ª–µ–º "plan", —Å–æ–¥–µ—Ä–∂–∞—â–∏–º –º–∞—Å—Å–∏–≤ –ø–æ—Å—Ç–æ–≤."""

        try:
            output = self.llm(
                prompt,
                max_tokens=3000,
                temperature=0.8,
                top_p=0.9
            )
            
            text = output["choices"][0]["text"].strip()
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
            json_match = re.search(r'\{.*\}', text, re.DOTALL)
            if json_match:
                try:
                    plan_data = json.loads(json_match.group())
                    
                    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
                    if 'plan' in plan_data and isinstance(plan_data['plan'], list):
                        for post in plan_data['plan']:
                            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
                            if 'engagement_elements' not in post:
                                post['engagement_elements'] = "–í–æ–ø—Ä–æ—Å –∫ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –≤ –∫–æ–Ω—Ü–µ –ø–æ—Å—Ç–∞"
                            if 'hashtags' not in post:
                                post['hashtags'] = f"#{niche.replace(' ', '')} #–∫–æ–Ω—Ç–µ–Ω—Ç #–æ–±—Å—É–∂–¥–µ–Ω–∏–µ"
                            if 'format_tips' not in post:
                                post['format_tips'] = "–ò—Å–ø–æ–ª—å–∑—É–π –∞–±–∑–∞—Ü—ã –∏ —ç–º–æ–¥–∑–∏ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏"
                    
                    logger.info(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω —Å {len(plan_data.get('plan', []))} –ø–æ—Å—Ç–∞–º–∏")
                    return plan_data
                    
                except json.JSONDecodeError as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞: {e}")
                    return await self.create_enhanced_fallback_plan(plan_type, niche, tone, total_posts, audience, goals)
            else:
                logger.warning("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω JSON –≤ –æ—Ç–≤–µ—Ç–µ –ò–ò, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
                return await self.create_enhanced_fallback_plan(plan_type, niche, tone, total_posts, audience, goals)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞: {e}")
            return await self.create_enhanced_fallback_plan(plan_type, niche, tone, total_posts, audience, goals)

    async def create_enhanced_fallback_plan(self, plan_type: str, niche: str, tone: str, total_posts: int, audience: str, goals: str) -> Dict:
        """–°–æ–∑–¥–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞"""
        
        # –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –ø–æ—Å—Ç–æ–≤ –¥–ª—è Telegram
        post_types = [
            {
                "type": "üìù –¢–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç",
                "engagement": "–í–æ–ø—Ä–æ—Å –∫ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –≤ –∫–æ–Ω—Ü–µ",
                "hashtags": f"#{niche.replace(' ', '')} #–æ–±—Å—É–∂–¥–µ–Ω–∏–µ #–º–Ω–µ–Ω–∏–µ",
                "format": "–ò—Å–ø–æ–ª—å–∑—É–π –∞–±–∑–∞—Ü—ã –∏ —ç–º–æ–¥–∑–∏"
            },
            {
                "type": "üìä –û–ø—Ä–æ—Å", 
                "engagement": "–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤",
                "hashtags": f"#{niche.replace(' ', '')} #–æ–ø—Ä–æ—Å #–≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ",
                "format": "–ß–µ—Ç–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤"
            },
            {
                "type": "üì∞ –ù–æ–≤–æ—Å—Ç–∏",
                "engagement": "–ü—Ä–æ—Å–∏–º –º–Ω–µ–Ω–∏–µ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö",
                "hashtags": f"#{niche.replace(' ', '')} #–Ω–æ–≤–æ—Å—Ç–∏ #–∞–∫—Ç—É–∞–ª—å–Ω–æ–µ", 
                "format": "–ö—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É"
            },
            {
                "type": "üí¨ –î–∏—Å–∫—É—Å—Å–∏—è",
                "engagement": "–û—Ç–∫—Ä—ã—Ç—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è",
                "hashtags": f"#{niche.replace(' ', '')} #–¥–∏—Å–∫—É—Å—Å–∏—è #–º–Ω–µ–Ω–∏—è",
                "format": "–ü—Ä–æ–≤–æ–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫"
            },
            {
                "type": "üéØ –ü–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã",
                "engagement": "–ü—Ä–æ—Å–∏–º –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –æ–ø—ã—Ç–æ–º",
                "hashtags": f"#{niche.replace(' ', '')} #–ø–æ–ª–µ–∑–Ω–æ–µ #—Å–æ–≤–µ—Ç—ã",
                "format": "–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫"
            },
            {
                "type": "‚ùì –í–æ–ø—Ä–æ—Å –∫ –∞—É–¥–∏—Ç–æ—Ä–∏–∏",
                "engagement": "–ü—Ä—è–º–æ–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤",
                "hashtags": f"#{niche.replace(' ', '')} #–≤–æ–ø—Ä–æ—Å #–æ—Ç–≤–µ—Ç—ã",
                "format": "–Ø—Å–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞"
            },
            {
                "type": "üöÄ –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –ø–æ—Å—Ç", 
                "engagement": "–ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é",
                "hashtags": f"#{niche.replace(' ', '')} #–º–æ—Ç–∏–≤–∞—Ü–∏—è #—Ä–∞–∑–≤–∏—Ç–∏–µ",
                "format": "–í–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π —Ç–æ–Ω"
            }
        ]
        
        plan = {"plan": []}
        
        if plan_type == "weekly":
            days = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
            for i, day in enumerate(days[:total_posts]):
                post_type = post_types[i % len(post_types)]
                plan["plan"].append({
                    "day": day,
                    "topic": f"{niche} - {post_type['type']}",
                    "main_idea": f"–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –æ {niche} –¥–ª—è {audience}. {goals}",
                    "post_type": post_type['type'],
                    "tone": tone,
                    "engagement_elements": post_type['engagement'],
                    "hashtags": post_type['hashtags'],
                    "format_tips": post_type['format']
                })
        else:
            start_date = datetime.now()
            for i in range(total_posts):
                post_date = start_date + timedelta(days=i)
                post_type = post_types[i % len(post_types)]
                plan["plan"].append({
                    "date": post_date.strftime("%d.%m.%Y"),
                    "topic": f"{niche} - {post_type['type']}",
                    "main_idea": f"–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø–æ—Ä—Ü–∏—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –æ {niche}",
                    "post_type": post_type['type'],
                    "tone": tone,
                    "engagement_elements": post_type['engagement'],
                    "hashtags": post_type['hashtags'],
                    "format_tips": post_type['format']
                })
        
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω fallback –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω —Å {len(plan['plan'])} –ø–æ—Å—Ç–∞–º–∏")
        return plan

    async def generate_post_from_plan_data(self, post_data: Dict) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞"""
        try:
            topic = post_data.get('topic', '–ë–µ–∑ —Ç–µ–º—ã')
            tone = post_data.get('tone', 'friendly')
            main_idea = post_data.get('main_idea', '–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç')
            post_type = post_data.get('post_type', '–¢–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç')
            
            prompt = f"""–°–æ–∑–¥–∞–π –ø–æ—Å—Ç –¥–ª—è Telegram-–∫–∞–Ω–∞–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞.

–¢–ï–ú–ê: {topic}
–¢–ò–ü –ü–û–°–¢–ê: {post_type}
–¢–û–ù: {tone}
–û–°–ù–û–í–ù–ê–Ø –ò–î–ï–Ø: {main_idea}

–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:
- –≠–ª–µ–º–µ–Ω—Ç—ã –≤–æ–≤–ª–µ—á–µ–Ω–∏—è: {post_data.get('engagement_elements', '–í–æ–ø—Ä–æ—Å –∫ –∞—É–¥–∏—Ç–æ—Ä–∏–∏')}
- –•–µ—à—Ç–µ–≥–∏: {post_data.get('hashtags', '#–∫–æ–Ω—Ç–µ–Ω—Ç #–æ–±—Å—É–∂–¥–µ–Ω–∏–µ')}
- –°–æ–≤–µ—Ç—ã –ø–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—é: {post_data.get('format_tips', '–ò—Å–ø–æ–ª—å–∑—É–π –∞–±–∑–∞—Ü—ã –∏ —ç–º–æ–¥–∑–∏')}

–í–ê–ñ–ù–´–ï –ü–†–ê–í–ò–õ–ê:
- –ù–∞—á–∏–Ω–∞–π —Å—Ä–∞–∑—É —Å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –ø–æ—Å—Ç–∞
- –ù–µ —É–ø–æ–º–∏–Ω–∞–π —á—Ç–æ —ç—Ç–æ –ø–æ—Å—Ç –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞
- –ò—Å–ø–æ–ª—å–∑—É–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∏ –æ—Ä–≥–∞–Ω–∏—á–Ω—ã–π —è–∑—ã–∫
- –£—á–∏—Ç—ã–≤–∞–π —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ç–æ–Ω –∏ —Ç–∏–ø –ø–æ—Å—Ç–∞
- –í–∫–ª—é—á–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –≤–æ–≤–ª–µ—á–µ–Ω–∏—è
- –î–æ–±–∞–≤—å —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ö–µ—à—Ç–µ–≥–∏ –≤ –∫–æ–Ω—Ü–µ

–¢–ï–ö–°–¢ –ü–û–°–¢–ê:"""
            
            output = self.llm(
                prompt,
                max_tokens=350,
                temperature=0.8,
                top_p=0.9
            )
            
            text = output["choices"][0]["text"].strip()
            text = self.clean_post_text(text)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ö–µ—à—Ç–µ–≥–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
            if 'hashtags' in post_data and not any(hashtag in text for hashtag in post_data['hashtags'].split()):
                text += f"\n\n{post_data['hashtags']}"
            
            return text or f"–ü–æ—Å—Ç –Ω–∞ —Ç–µ–º—É: {topic}"
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞: {e}")
            return f"–ü–æ—Å—Ç –Ω–∞ —Ç–µ–º—É: {post_data.get('topic', '–ë–µ–∑ —Ç–µ–º—ã')}\n\n{post_data.get('main_idea', '–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç')}"