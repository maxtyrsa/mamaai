import re
import json
import random
import logging
from typing import Dict, Optional, List
from datetime import datetime, timedelta
from config import Config

logger = logging.getLogger(__name__)

class AdvancedCache:
    def __init__(self, db):
        self.db = db
        self.memory_cache = {}
        self.hit_count = 0
        self.miss_count = 0
    
    def get(self, key: str) -> Optional[str]:
        if key in self.memory_cache:
            self.hit_count += 1
            return self.memory_cache[key]
        
        cursor = self.db.conn.cursor()
        cursor.execute(
            'SELECT response_text FROM response_cache WHERE message_hash = ? AND datetime(created_at) > datetime("now", "-1 day")',
            (key,)
        )
        result = cursor.fetchone()
        
        if result:
            self.memory_cache[key] = result[0]
            self.hit_count += 1
            return result[0]
        
        self.miss_count += 1
        return None
    
    def set(self, key: str, value: str):
        self.memory_cache[key] = value
        cursor = self.db.conn.cursor()
        cursor.execute('''
            INSERT OR REPLACE INTO response_cache 
            (message_hash, response_text, created_at, usage_count)
            VALUES (?, ?, datetime("now"), COALESCE((SELECT usage_count FROM response_cache WHERE message_hash = ?), 0) + 1)
        ''', (key, value, key))
        self.db.conn.commit()
    
    def get_stats(self) -> Dict:
        total = self.hit_count + self.miss_count
        return {
            'hit_rate': self.hit_count / total if total > 0 else 0,
            'memory_size': len(self.memory_cache),
            'total_hits': self.hit_count,
            'total_misses': self.miss_count
        }

class ResponseGenerator:
    def __init__(self, llm, cache, db):
        self.llm = llm
        self.cache = cache
        self.db = db
    
    async def generate_context_aware_reply(self, comment: str, user_id: int, username: str) -> str:
        logger.info(f"ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –¥–ª—è {username}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context = await self._get_user_context(user_id)
        
        prompt = f"""–¢—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤ Telegram-–∫–∞–Ω–∞–ª–µ. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–≤–∏–ª –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π - –æ—Ç–≤–µ—Ç—å –Ω–∞ –Ω–µ–≥–æ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ —É–º–µ—Å—Ç–Ω–æ.

–ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:
"{comment}"

–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï:
–ò–º—è: {username}
–ö–æ–Ω—Ç–µ–∫—Å—Ç: {context if context else "–ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"}

–¢–í–û–ô –û–¢–í–ï–¢ –î–û–õ–ñ–ï–ù –ë–´–¢–¨:
- –ö—Ä–∞—Ç–∫–∏–º (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
- –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º
- –£–º–µ—Å—Ç–Ω—ã–º –ø–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é
- –û–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ –∏–º–µ–Ω–∏
- –ë–µ–∑ —à–∞–±–ª–æ–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑ —Ç–∏–ø–∞ "–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ"

–û–¢–í–ï–¢:"""
        
        # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
        cache_key = f"reply_{user_id}_{hash(comment[:100])}"
        cached = self.cache.get(cache_key)
        if cached:
            logger.info(f"üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è {username}")
            return cached
        
        try:
            output = self.llm(
                prompt,
                max_tokens=100,
                temperature=0.8,
                stop=["\n\n", "---", "###"]
            )
            
            text = output["choices"][0]["text"].strip()
            text = self.clean_generated_text(text)
            
            if not text or len(text) < 3:
                logger.warning(f"‚ö†Ô∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç: '{text}'")
                text = await self._generate_fallback_reply(username, comment)
            elif len(text) > Config.MAX_REPLY_LENGTH:
                text = text[:Config.MAX_REPLY_LENGTH - 3] + "..."
            
            self.cache.set(cache_key, text)
            logger.info(f"üí¨ –û—Ç–≤–µ—Ç –¥–ª—è {username}: {text[:50]}...")
            return text
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è {username}: {e}")
            return await self._generate_fallback_reply(username, comment)
    
    async def _generate_fallback_reply(self, username: str, comment: str) -> str:
        fallbacks = [
            f"–ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –º—ã—Å–ª—å, {username}! üí´",
            f"{username}, —Å–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –æ–±—Å—É–∂–¥–µ–Ω–∏–∏! üëè",
            f"–•–æ—Ä–æ—à–∏–π –≤–æ–ø—Ä–æ—Å, {username}! ü§î",
            f"{username}, –±–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π! üåü",
            f"–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ, {username}! üòä",
            f"{username}, —Ü–µ–Ω—é –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ! üôè",
            f"–°–ø–∞—Å–∏–±–æ, {username}, —á—Ç–æ –ø–æ–¥–µ–ª–∏–ª–∏—Å—å! üíñ"
        ]
        return random.choice(fallbacks)
    
    async def _get_user_context(self, user_id: int) -> str:
        cursor = self.db.conn.cursor()
        cursor.execute('''
            SELECT message_text FROM message_history 
            WHERE user_id = ? AND is_spam = FALSE 
            ORDER BY datetime(timestamp) DESC LIMIT 3
        ''', (user_id,))
        
        messages = [row[0] for row in cursor.fetchall()]
        return " | ".join(messages[-2:]) if len(messages) > 1 else ""
    
    def clean_generated_text(self, text: str) -> str:
        if not text:
            return ""
            
        text = text.strip()
        
        if (text.startswith('"') and text.endswith('"')) or (text.startswith("'") and text.endswith("'")):
            text = text[1:-1].strip()
        
        artifacts = [
            r'^–æ—Ç–≤–µ—Ç[:\-\s]*',
            r'^—Ä–µ–ø–ª–∏–∫–∞[:\-\s]*',
            r'^–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π[:\-\s]*',
            r'^–±–æ—Ç[:\-\s]*',
            r'^assistant[:\-\s]*',
        ]
        
        for artifact in artifacts:
            text = re.sub(artifact, '', text, flags=re.IGNORECASE).strip()
        
        text = re.sub(r'^[,\-‚Äì‚Äî\s\.\!:]+', '', text).strip()
        
        return text
    
    async def generate_motivational_message(self, message_type: str) -> str:
        if message_type == "morning":
            prompt = """–°–æ–∑–¥–∞–π –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–µ–µ —É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram-–∫–∞–Ω–∞–ª–∞. 

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –ù–∞—á–Ω–∏ —Å—Ä–∞–∑—É —Å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è, –±–µ–∑ –≤–≤–æ–¥–Ω—ã—Ö —Å–ª–æ–≤
- –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —à–∞–±–ª–æ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã —Ç–∏–ø–∞ "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, –¥–æ—Ä–æ–≥–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏"
- –ë—É–¥—å –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–º –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º
- –ò—Å–ø–æ–ª—å–∑—É–π —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —è–∑—ã–∫
- –î–æ–±–∞–≤—å –º–æ—Ç–∏–≤–∞—Ü–∏—é –Ω–∞ –¥–µ–Ω—å
- –î–ª–∏–Ω–∞: 150-250 —Å–∏–º–≤–æ–ª–æ–≤
- –ò—Å–ø–æ–ª—å–∑—É–π —É–º–µ—Å—Ç–Ω—ã–µ —ç–º–æ–¥–∑–∏

–ü—Ä–∏–º–µ—Ä —Ö–æ—Ä–æ—à–µ–≥–æ –Ω–∞—á–∞–ª–∞:
"–ù–æ–≤—ã–π –¥–µ–Ω—å - –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏! üåû"

–°–æ–∑–¥–∞–π —Å–æ–æ–±—â–µ–Ω–∏–µ:"""
            default = "‚òÄÔ∏è –ü—Ä–æ—Å—ã–ø–∞–π—Ç–µ—Å—å —Å —É–ª—ã–±–∫–æ–π! –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å –ø–æ–ª–æ–Ω –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è —Ä–æ—Å—Ç–∞ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π. –ü—É—Å—Ç—å –∫–∞–∂–¥–æ–µ –≤–∞—à–µ –¥–µ–π—Å—Ç–≤–∏–µ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç –∫ –º–µ—á—Ç–µ! üí´"
        else:
            prompt = """–°–æ–∑–¥–∞–π –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Ç—ë–ø–ª–æ–µ –≤–µ—á–µ—Ä–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram-–∫–∞–Ω–∞–ª–∞.

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –ù–∞—á–Ω–∏ —Å—Ä–∞–∑—É —Å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è, –±–µ–∑ –≤–≤–æ–¥–Ω—ã—Ö —Å–ª–æ–≤  
- –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —à–∞–±–ª–æ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã —Ç–∏–ø–∞ "–°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏, –¥–æ—Ä–æ–≥–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏"
- –ë—É–¥—å –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–º –∏ —É—é—Ç–Ω—ã–º
- –ò—Å–ø–æ–ª—å–∑—É–π —Ä–∞—Å—Å–ª–∞–±–ª—è—é—â–∏–π —Ç–æ–Ω
- –î–ª–∏–Ω–∞: 150-250 —Å–∏–º–≤–æ–ª–æ–≤
- –ò—Å–ø–æ–ª—å–∑—É–π —É–º–µ—Å—Ç–Ω—ã–µ —ç–º–æ–¥–∑–∏

–ü—Ä–∏–º–µ—Ä —Ö–æ—Ä–æ—à–µ–≥–æ –Ω–∞—á–∞–ª–∞:
"–í–µ—á–µ—Ä - –≤—Ä–µ–º—è –ø–æ–¥–≤–æ–¥–∏—Ç—å –∏—Ç–æ–≥–∏... üåô"

–°–æ–∑–¥–∞–π —Å–æ–æ–±—â–µ–Ω–∏–µ:"""
            default = "üåô –í–µ—á–µ—Ä - –≤—Ä–µ–º—è –æ—Ç–¥–æ—Ö–Ω—É—Ç—å –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∏–ª—ã. –ü—É—Å—Ç—å –≤–∞—à —Å–æ–Ω –±—É–¥–µ—Ç –∫—Ä–µ–ø–∫–∏–º, –∞ –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å –ø—Ä–∏–Ω–µ—Å—ë—Ç —Ä–∞–¥–æ—Å—Ç–Ω—ã–µ —Å—é—Ä–ø—Ä–∏–∑—ã! üí§"
        
        try:
            output = self.llm(
                prompt,
                max_tokens=120,
                temperature=0.8,
                top_p=0.9
            )
            text = self.clean_generated_text(output["choices"][0]["text"])
            return text or default
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ {message_type} —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return default
    
    async def generate_post(self, topic: str, tone: str, main_idea: str, use_emojis: bool, length: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º"""
        
        length_map = {
            "short": "50-100 —Å–∏–º–≤–æ–ª–æ–≤, –æ—á–µ–Ω—å –∫—Ä–∞—Ç–∫–æ",
            "medium": "200-300 —Å–∏–º–≤–æ–ª–æ–≤, —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ—Å—Ç",
            "long": "400-600 —Å–∏–º–≤–æ–ª–æ–≤, —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –ø–æ—Å—Ç"
        }
        
        tone_map = {
            "serious": "—Å–µ—Ä—å—ë–∑–Ω—ã–π, –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π",
            "friendly": "–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π", 
            "funny": "—é–º–æ—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π, —Å —à—É—Ç–∫–∞–º–∏",
            "inspirational": "–≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π, –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π",
            "professional": "–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, –¥–µ–ª–æ–≤–æ–π"
        }
        
        emoji_instruction = "–ò—Å–ø–æ–ª—å–∑—É–π —É–º–µ—Å—Ç–Ω—ã–µ —Å–º–∞–π–ª–∏–∫–∏ –∏ —ç–º–æ–¥–∑–∏." if use_emojis else "–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–º–∞–π–ª–∏–∫–∏ –∏ —ç–º–æ–¥–∑–∏."
        
        prompt = f"""–°–æ–∑–¥–∞–π –ø–æ—Å—Ç –¥–ª—è Telegram-–∫–∞–Ω–∞–ª–∞ –Ω–∞ —Ç–µ–º—É: "{topic}"

–û—Å–Ω–æ–≤–Ω–∞—è –º—ã—Å–ª—å: {main_idea}
–¢–æ–Ω: {tone_map.get(tone, tone)}
–î–ª–∏–Ω–∞: {length_map.get(length, length)}
{emoji_instruction}

–í–ê–ñ–ù–´–ï –ü–†–ê–í–ò–õ–ê:
- –ù–∞—á–∏–Ω–∞–π —Å—Ä–∞–∑—É —Å —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –ø–æ—Å—Ç–∞
- –ù–µ —É–ø–æ–º–∏–Ω–∞–π —á—Ç–æ —ç—Ç–æ –ø–æ—Å—Ç, —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
- –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –≤–≤–æ–¥–Ω—ã–µ —Ñ—Ä–∞–∑—ã —Ç–∏–ø–∞ "–í–æ—Ç –ø–æ—Å—Ç", "–°–æ–∑–¥–∞–ª –∫–æ–Ω—Ç–µ–Ω—Ç", "–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–µ–∫—Å—Ç"
- –ù–µ –ø–æ–≤—Ç–æ—Ä—è–π —É—Å–ª–æ–≤–∏—è –∑–∞–¥–∞–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç–µ
- –ë—É–¥—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –∏ –æ—Ä–≥–∞–Ω–∏—á–Ω—ã–º
- –ù–µ –¥—É–±–ª–∏—Ä—É–π —Å–ª–æ–≤–∞ –∏ —Ñ—Ä–∞–∑—ã

–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:"""
        
        try:
            output = self.llm(
                prompt,
                max_tokens=400 if length == "long" else 250,
                temperature=0.8,
                top_p=0.9
            )
            
            text = output["choices"][0]["text"].strip()
            
            # –£–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            if text.startswith('"') and text.endswith('"'):
                text = text[1:-1].strip()
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
            text = self.clean_generated_text(text)
            text = self.clean_post_text(text)
            
            # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–Ω–æ–≤–æ
            if len(text) < 20:
                logger.warning("‚ö†Ô∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –ø–æ—Å—Ç, –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞")
                return await self.generate_post_fallback(topic, tone, main_idea, use_emojis, length)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
            if len(text) > 100 and length != "short":
                sentences = re.split(r'[.!?]+', text)
                if len(sentences) > 2:
                    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏
                    cleaned_sentences = [s.strip() for s in sentences if s.strip()]
                    if len(cleaned_sentences) > 2:
                        text = '.\n\n'.join(cleaned_sentences) + ('.' if not text.endswith('.') else '')
            
            return text or "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã."
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞: {e}")
            return await self.generate_post_fallback(topic, tone, main_idea, use_emojis, length)

    async def generate_post_fallback(self, topic: str, tone: str, main_idea: str, use_emojis: bool, length: str) -> str:
        """–†–µ–∑–µ—Ä–≤–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞"""
        emojis = "üåü‚ú®üòäüì±üí´üéØüí°" if use_emojis else ""
        
        base_text = f"{topic}. {main_idea}"
        
        if length == "short":
            return f"{base_text}{emojis}"
        elif length == "medium":
            return f"{base_text}\n\n–£–∑–Ω–∞–π—Ç–µ –±–æ–ª—å—à–µ –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ!{emojis}"
        else:
            return f"{base_text}\n\n–ü–æ–¥—Ä–æ–±–Ω–µ–µ —Ä–∞—Å—Å–∫–∞–∂–µ–º –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏—è—Ö. –û—Å—Ç–∞–≤–∞–π—Ç–µ—Å—å –Ω–∞ —Å–≤—è–∑–∏!{emojis}"

    def clean_post_text(self, text: str) -> str:
        """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–æ–≤"""
        if not text:
            return ""
        
        # –£–¥–∞–ª—è–µ–º –∫–∞–≤—ã—á–∫–∏ –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
        text = text.strip()
        if (text.startswith('"') and text.endswith('"')) or (text.startswith("'") and text.endswith("'")):
            text = text[1:-1].strip()
        
        # –£–¥–∞–ª—è–µ–º –Ω–æ–º–µ—Ä–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –≤ –Ω–∞—á–∞–ª–µ
        text = re.sub(r'^\d+[\.\)]\s*', '', text)
        
        # –£–¥–∞–ª—è–µ–º –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –≤ –Ω–∞—á–∞–ª–µ
        text = re.sub(r'^[\-\*‚Ä¢]\s*', '', text)
        
        # –£–¥–∞–ª—è–µ–º —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã (—Ç–æ–ª—å–∫–æ –≤ –Ω–∞—á–∞–ª–µ —Ç–µ–∫—Å—Ç–∞)
        prefixes = [
            r'^–ø–æ—Å—Ç\s*[:\-]?\s*',
            r'^—Ç–µ–∫—Å—Ç\s*[:\-]?\s*', 
            r'^—Å–æ–æ–±—â–µ–Ω–∏–µ\s*[:\-]?\s*',
            r'^–∫–æ–Ω—Ç–µ–Ω—Ç\s*[:\-]?\s*',
            r'^–∑–∞–ø–∏—Å—å\s*[:\-]?\s*',
            r'^—Ä–µ–∑—É–ª—å—Ç–∞—Ç\s*[:\-]?\s*',
            r'^–≤–æ—Ç\s*[:\-]?\s*',
            r'^—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω\w*\s*[:\-]?\s*',
            r'^–æ—Ç–≤–µ—Ç\s*[:\-]?\s*',
            r'^–±–æ—Ç\s*[:\-]?\s*',
            r'^–∏–∏\s*[:\-]?\s*',
            r'^–Ω–µ–π—Ä–æ—Å–µ—Ç—å\s*[:\-]?\s*',
        ]
        
        for prefix in prefixes:
            text = re.sub(prefix, '', text, flags=re.IGNORECASE)
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–ª–æ–≤–∞ (–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–ª—É—á–∞–∏)
        words = text.split()
        if len(words) > 1:
            cleaned_words = []
            for i, word in enumerate(words):
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –∏–¥—É—Ç –ø–æ–¥—Ä—è–¥ –∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ
                if i > 0 and word.lower() == words[i-1].lower():
                    continue
                cleaned_words.append(word)
            text = ' '.join(cleaned_words)
        
        # –£–¥–∞–ª—è–µ–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –ø—Ä–æ–º–ø—Ç–∞
        artifacts = [
            r'—Å–æ–∑–¥–∞–π\s+–ø–æ—Å—Ç\s*[:\-]?\s*',
            r'–Ω–∞—á–Ω–∏\s+—Å—Ä–∞–∑—É\s+—Å\s+—Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è\s*[:\-]?\s*',
            r'–Ω–µ\s+–∏—Å–ø–æ–ª—å–∑—É–π\s+—Ñ—Ä–∞–∑—ã\s*[:\-]?\s*',
            r'—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è\s+–∫\s+–ø–æ—Å—Ç—É\s*[:\-]?\s*',
            r'–ø–æ—Å—Ç\s+–¥–æ–ª–∂–µ–Ω\s+–±—ã—Ç—å\s*[:\-]?\s*',
        ]
        
        for artifact in artifacts:
            text = re.sub(artifact, '', text, flags=re.IGNORECASE)
        
        # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –≤ –Ω–∞—á–∞–ª–µ
        text = re.sub(r'^[,\-‚Äì‚Äî\s\.\!:]+', '', text).strip()
        
        # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
        text = re.sub(r'\n\s*\n\s*\n+', '\n\n', text)
        
        return text

    async def generate_content_plan(self, plan_type: str, niche: str, tone: str, posts_per_week: int = 7) -> Dict:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞"""
        
        if plan_type == "weekly":
            duration = "–Ω–µ–¥–µ–ª—é"
            total_posts = posts_per_week
        else:
            duration = "–º–µ—Å—è—Ü"
            total_posts = posts_per_week * 4
        
        prompt = f"""–°–æ–∑–¥–∞–π –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω –¥–ª—è Telegram-–∫–∞–Ω–∞–ª–∞ –Ω–∞ {duration}. 

–ù–∏—à–∞ –∫–∞–Ω–∞–ª–∞: {niche}
–¢–æ–Ω –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {tone}
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤: {total_posts}

–°–æ–∑–¥–∞–π —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω, –∫–æ—Ç–æ—Ä—ã–π –≤–∫–ª—é—á–∞–µ—Ç:
1. –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ—Å—Ç—ã
2. –†–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
3. –í–æ–≤–ª–µ–∫–∞—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
4. –ù–æ–≤–æ—Å—Ç–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
5. –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã

–í–µ—Ä–Ω–∏ –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –ø–æ–ª—è–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Å—Ç–∞:
- day (–¥–ª—è –Ω–µ–¥–µ–ª–∏) –∏–ª–∏ date (–¥–ª—è –º–µ—Å—è—Ü–∞)
- topic (—Ç–µ–º–∞ –ø–æ—Å—Ç–∞)
- main_idea (–æ—Å–Ω–æ–≤–Ω–∞—è –∏–¥–µ—è)
- post_type (—Ç–∏–ø –ø–æ—Å—Ç–∞)
- tone (—Ç–æ–Ω)

–°–æ–∑–¥–∞–π –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω:"""
        
        try:
            output = self.llm(
                prompt,
                max_tokens=2000,
                temperature=0.7,
                top_p=0.9
            )
            
            text = output["choices"][0]["text"].strip()
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
            json_match = re.search(r'\{.*\}', text, re.DOTALL)
            if json_match:
                plan_data = json.loads(json_match.group())
                return plan_data
            else:
                return await self.create_fallback_plan(plan_type, niche, tone, total_posts)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞: {e}")
            return await self.create_fallback_plan(plan_type, niche, tone, total_posts)
    
    async def create_fallback_plan(self, plan_type: str, niche: str, tone: str, total_posts: int) -> Dict:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞"""
        
        post_types = ["–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π", "–†–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π", "–í–æ–≤–ª–µ–∫–∞—é—â–∏–π", "–ù–æ–≤–æ—Å—Ç–Ω–æ–π", "–ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π"]
        
        plan = {"plan": []}
        
        if plan_type == "weekly":
            days = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
            for i, day in enumerate(days[:total_posts]):
                plan["plan"].append({
                    "day": day,
                    "topic": f"{niche} - {post_types[i % len(post_types)]}",
                    "main_idea": f"–ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {niche} –¥–ª—è {day.lower()}",
                    "post_type": post_types[i % len(post_types)],
                    "tone": tone
                })
        else:
            start_date = datetime.now()
            for i in range(total_posts):
                post_date = start_date + timedelta(days=i)
                plan["plan"].append({
                    "date": post_date.strftime("%d.%m.%Y"),
                    "topic": f"{niche} - {post_types[i % len(post_types)]}",
                    "main_idea": f"–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø–æ—Ä—Ü–∏—è –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ {niche}",
                    "post_type": post_types[i % len(post_types)],
                    "tone": tone
                })
        
        return plan
