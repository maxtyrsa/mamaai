import logging
import asyncio
from datetime import datetime, timedelta
from typing import List, Dict
from telegram.error import Forbidden, NetworkError

logger = logging.getLogger(__name__)

class MessageRecoverySystem:
    def __init__(self, app, db, moderation, response_generator):
        self.app = app
        self.db = db
        self.moderation = moderation
        self.response_generator = response_generator
        self.is_recovering = False
        self.recovery_task = None
        self.monitoring_task = None
    
    async def start_recovery_check(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ"""
        if self.is_recovering:
            logger.info("‚è≥ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è...")
            return
        
        self.is_recovering = True
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram
            await self.app.bot.get_me()
            logger.info("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
            await self._recover_messages()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            self.db.log_recovery(
                recovery_type="auto_recovery",
                processed_count=0,
                spam_count=0,
                total_messages=0,
                success=False,
                error_message=f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}"
            )
        finally:
            self.is_recovering = False
    
    async def _recover_messages(self, hours_back: int = 24):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        start_time = datetime.now()
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–ø—Ä–æ—Ü–µ—Å—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            unprocessed_messages = self.db.get_unprocessed_messages(hours_back)
            
            if not unprocessed_messages:
                logger.info("‚úÖ –ù–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
                return
            
            logger.info(f"üîÑ –ù–∞–π–¥–µ–Ω–æ {len(unprocessed_messages)} –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {hours_back} —á–∞—Å–æ–≤")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –ø–æ—Ä—è–¥–∫—É
            processed_count = 0
            spam_count = 0
            error_count = 0
            skipped_count = 0
            
            for i, msg in enumerate(unprocessed_messages):
                try:
                    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
                    msg_id = msg.get('id')
                    user_id = msg.get('user_id')
                    text = msg.get('message_text', '')
                    timestamp = msg.get('timestamp')
                    username = msg.get('username')
                    is_spam = msg.get('is_spam')
                    response_text = msg.get('response_text')
                    spam_score = msg.get('spam_score')
                    
                    logger.info(f"üîç –ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è {i+1}/{len(unprocessed_messages)}: ID={msg_id}, user={user_id}, —Ç–µ–∫—Å—Ç='{text[:50]}...'")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
                    if not msg_id:
                        logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ ID: {msg}")
                        skipped_count += 1
                        continue
                    
                    if not user_id:
                        logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ user_id: {msg}")
                        skipped_count += 1
                        continue
                    
                    if not text or len(text.strip()) < 2:
                        logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—É—Å—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–º: ID={msg_id}")
                        skipped_count += 1
                        continue
                    
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
                    if is_spam is not None:
                        logger.info(f"‚è© –ü—Ä–æ–ø—É—â–µ–Ω–æ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_id} (is_spam={is_spam})")
                        skipped_count += 1
                        continue
                    
                    if response_text is not None:
                        logger.info(f"‚è© –ü—Ä–æ–ø—É—â–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–≤–µ—Ç–æ–º {msg_id}")
                        skipped_count += 1
                        continue
                    
                    logger.info(f"üîÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è {msg_id} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º
                    logger.info(f"üõ°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º —Å–æ–æ–±—â–µ–Ω–∏—è {msg_id}...")
                    is_spam_detected, spam_score_value = await self.moderation.advanced_spam_check(text, user_id)
                    logger.info(f"üõ°Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ø–∞–º–∞ –¥–ª—è {msg_id}: {is_spam_detected} (score: {spam_score_value:.1f})")
                    
                    if is_spam_detected:
                        # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ —Å–ø–∞–º
                        logger.info(f"üö´ –°–æ–æ–±—â–µ–Ω–∏–µ {msg_id} –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ —Å–ø–∞–º")
                        self.db.mark_message_processed(
                            msg_id, 
                            is_spam=True, 
                            response_text=f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ (score: {spam_score_value:.1f})",
                            spam_score=spam_score_value
                        )
                        spam_count += 1
                        logger.info(f"üõ°Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–ø–∞–º –≤ –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ {msg_id}")
                        
                    else:
                        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
                        display_name = username or f"user_{user_id}"
                        logger.info(f"ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {msg_id}...")
                        reply_text = await self.response_generator.generate_context_aware_reply(
                            text, user_id, display_name
                        )
                        
                        if not reply_text or len(reply_text.strip()) < 3:
                            logger.warning(f"‚ö†Ô∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {msg_id}")
                            reply_text = "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! üòä"
                        
                        # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ
                        logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {msg_id}")
                        self.db.mark_message_processed(
                            msg_id, 
                            is_spam=False, 
                            response_text=reply_text,
                            spam_score=spam_score_value
                        )
                        
                        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞)
                        logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}...")
                        send_success = await self._try_send_reply(user_id, text, reply_text, msg_id)
                        
                        if send_success:
                            processed_count += 1
                            logger.info(f"‚úÖ –û—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                        else:
                            error_count += 1
                            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_id}")
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏–π
                    await asyncio.sleep(0.5)
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è {msg.get('id', 'unknown')}: {e}")
                    error_count += 1
                    continue
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            duration = (datetime.now() - start_time).total_seconds()
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            self.db.log_recovery(
                recovery_type="auto_recovery",
                processed_count=processed_count,
                spam_count=spam_count,
                total_messages=len(unprocessed_messages),
                success=True,
                duration_seconds=int(duration)
            )
            
            logger.info(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: "
                       f"{processed_count} –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, "
                       f"{spam_count} —Å–ø–∞–º–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ, "
                       f"{error_count} –æ—à–∏–±–æ–∫, "
                       f"{skipped_count} –ø—Ä–æ–ø—É—â–µ–Ω–æ, "
                       f"–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration:.1f} —Å–µ–∫.")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
            if processed_count > 0 or spam_count > 0:
                await self._notify_admins_recovery(processed_count, spam_count, error_count, len(unprocessed_messages))
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            self.db.log_recovery(
                recovery_type="auto_recovery",
                processed_count=0,
                spam_count=0,
                total_messages=0,
                success=False,
                error_message=str(e)
            )
    
    async def _try_send_reply(self, user_id: int, original_text: str, reply_text: str, msg_id: int) -> bool:
        """–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            # –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
            original_preview = original_text[:100] + ('...' if len(original_text) > 100 else '')
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            formatted_message = (
                f"üí¨ **–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:**\n\n"
                f"_{original_preview}_\n\n"
                f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
                f"{reply_text}\n\n"
                f"_üìÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞_"
            )
            
            logger.info(f"üì® –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {formatted_message[:100]}...")
            
            await self.app.bot.send_message(
                user_id,
                formatted_message,
                parse_mode='Markdown'
            )
            logger.info(f"‚úÖ –û—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            return True
            
        except Forbidden as e:
            error_msg = str(e).lower()
            if "bot was blocked" in error_msg:
                logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞, –æ—Ç–≤–µ—Ç –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            elif "chat not found" in error_msg:
                logger.warning(f"‚ö†Ô∏è –ß–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            return False
    
    async def _notify_admins_recovery(self, processed_count: int, spam_count: int, error_count: int, total_messages: int):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
        try:
            notification_system = self.app.bot_data.get('notification_system')
            if notification_system:
                success_rate = (processed_count / total_messages * 100) if total_messages > 0 else 0
                
                message = (
                    "üîÑ **–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ**\n\n"
                    f"üìä **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
                    f"‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}\n"
                    f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed_count}\n"
                    f"‚Ä¢ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å–ø–∞–º–∞: {spam_count}\n"
                    f"‚Ä¢ –û—à–∏–±–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {error_count}\n"
                    f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {success_rate:.1f}%\n\n"
                    f"‚è∞ **–í—Ä–µ–º—è:** {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}\n\n"
                    f"‚úÖ –ë–æ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª —Ä–∞–±–æ—Ç—É!"
                )
                await notification_system.notify_admins(message)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {e}")
    
    async def schedule_periodic_recovery_check(self, interval_hours: int = 6):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        logger.info(f"‚è∞ –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ {interval_hours} —á–∞—Å–æ–≤")
        
        while True:
            try:
                await asyncio.sleep(interval_hours * 3600)  # –ñ–¥–µ–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤
                
                if not self.is_recovering:
                    logger.info("üîç –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è...")
                    await self._recover_messages(interval_hours)
                else:
                    logger.info("‚è≥ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É - –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è")
                    
            except asyncio.CancelledError:
                logger.info("üõë –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
                await asyncio.sleep(3600)  # –ñ–¥–µ–º 1 —á–∞—Å –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    async def start_periodic_checks(self):
        """–ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫"""
        try:
            self.recovery_task = asyncio.create_task(self.schedule_periodic_recovery_check(6))
            logger.info("‚úÖ –ó–∞–ø—É—â–µ–Ω—ã –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤)")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫: {e}")
    
    async def force_recovery(self, hours_back: int = 24):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        start_time = datetime.now()
        
        try:
            if self.is_recovering:
                return {"success": False, "message": "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è"}
            
            self.is_recovering = True
            logger.info(f"üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {hours_back} —á–∞—Å–æ–≤")
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–ø—Ä–æ—Ü–µ—Å—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            unprocessed_messages = self.db.get_unprocessed_messages(hours_back)
            
            if not unprocessed_messages:
                result = {"success": True, "message": "–ù–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏"}
                self.is_recovering = False
                return result
            
            logger.info(f"üîÑ –ù–∞–π–¥–µ–Ω–æ {len(unprocessed_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            processed_count = 0
            spam_count = 0
            error_count = 0
            skipped_count = 0
            
            for i, msg in enumerate(unprocessed_messages):
                try:
                    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
                    msg_id = msg.get('id')
                    user_id = msg.get('user_id')
                    text = msg.get('message_text', '')
                    username = msg.get('username')
                    is_spam = msg.get('is_spam')
                    response_text = msg.get('response_text')
                    
                    logger.info(f"üîç [{i+1}/{len(unprocessed_messages)}] –ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è ID={msg_id}, user={user_id}")
                    
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
                    if is_spam is not None:
                        logger.info(f"‚è© –ü—Ä–æ–ø—É—â–µ–Ω–æ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_id} (is_spam={is_spam})")
                        skipped_count += 1
                        continue
                    
                    if response_text is not None:
                        logger.info(f"‚è© –ü—Ä–æ–ø—É—â–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–≤–µ—Ç–æ–º {msg_id}")
                        skipped_count += 1
                        continue
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º
                    logger.info(f"üõ°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º —Å–æ–æ–±—â–µ–Ω–∏—è {msg_id}...")
                    is_spam_detected, spam_score = await self.moderation.advanced_spam_check(text, user_id)
                    logger.info(f"üõ°Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è {msg_id}: —Å–ø–∞–º={is_spam_detected}, score={spam_score:.1f}")
                    
                    if is_spam_detected:
                        self.db.mark_message_processed(
                            msg_id, 
                            is_spam=True, 
                            response_text=f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ (score: {spam_score:.1f})",
                            spam_score=spam_score
                        )
                        spam_count += 1
                        logger.info(f"üö´ –°–æ–æ–±—â–µ–Ω–∏–µ {msg_id} –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ —Å–ø–∞–º")
                    else:
                        display_name = username or f"user_{user_id}"
                        logger.info(f"ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –¥–ª—è {msg_id}...")
                        reply_text = await self.response_generator.generate_context_aware_reply(
                            text, user_id, display_name
                        )
                        
                        if not reply_text or len(reply_text.strip()) < 3:
                            logger.warning(f"‚ö†Ô∏è –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –¥–ª—è {msg_id}, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
                            reply_text = "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! üòä"
                        
                        self.db.mark_message_processed(
                            msg_id, 
                            is_spam=False, 
                            response_text=reply_text,
                            spam_score=spam_score
                        )
                        
                        logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}...")
                        send_success = await self._try_send_reply(user_id, text, reply_text, msg_id)
                        if send_success:
                            processed_count += 1
                            logger.info(f"‚úÖ –û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                        else:
                            error_count += 1
                            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_id}")
                    
                    await asyncio.sleep(0.3)  # –£–º–µ–Ω—å—à–µ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {msg.get('id', 'unknown')}: {e}")
                    error_count += 1
                    continue
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            duration = (datetime.now() - start_time).total_seconds()
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self.db.log_recovery(
                recovery_type="forced_recovery",
                processed_count=processed_count,
                spam_count=spam_count,
                total_messages=len(unprocessed_messages),
                success=True,
                duration_seconds=int(duration)
            )
            
            result = {
                "success": True,
                "message": f"–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ",
                "stats": {
                    "total_messages": len(unprocessed_messages),
                    "processed": processed_count,
                    "spam_detected": spam_count,
                    "errors": error_count,
                    "skipped": skipped_count,
                    "success_rate": (processed_count / len(unprocessed_messages) * 100) if unprocessed_messages else 0,
                    "duration_seconds": int(duration)
                }
            }
            
            logger.info(f"‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {processed_count} –æ—Ç–≤–µ—Ç–æ–≤, {spam_count} —Å–ø–∞–º–∞, {skipped_count} –ø—Ä–æ–ø—É—â–µ–Ω–æ")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            if processed_count > 0 or spam_count > 0:
                await self._notify_admins_recovery(processed_count, spam_count, error_count, len(unprocessed_messages))
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            self.db.log_recovery(
                recovery_type="forced_recovery",
                processed_count=0,
                spam_count=0,
                total_messages=0,
                success=False,
                error_message=str(e)
            )
            return {"success": False, "message": f"–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {e}"}
        finally:
            self.is_recovering = False
    
    async def get_recovery_status(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
            recovery_stats = self.db.get_recovery_stats(7)
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ—Ü–µ—Å—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            unprocessed_messages = self.db.get_unprocessed_messages(24)
            
            status = {
                "is_recovering": self.is_recovering,
                "unprocessed_messages": len(unprocessed_messages),
                "recovery_stats": recovery_stats,
                "last_check": datetime.now().isoformat(),
                "periodic_checks_active": self.recovery_task is not None and not self.recovery_task.done()
            }
            
            return status
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            return {
                "is_recovering": self.is_recovering,
                "error": str(e)
            }
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
        try:
            if self.recovery_task and not self.recovery_task.done():
                self.recovery_task.cancel()
                try:
                    await self.recovery_task
                except asyncio.CancelledError:
                    pass
                logger.info("üõë –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            
            self.is_recovering = False
            logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∏—Å—Ç–µ–º—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")