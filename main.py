import asyncio
import logging
import signal
import sys
from telegram import Update
from telegram.ext import Application
from config import BOT_TOKEN, CHANNEL_ID, MODEL_PATH
from database import Database
from models import Llama, MockLLM
from moderation import AdvancedModeration, RateLimiter
from ai_generator import ResponseGenerator, AdvancedCache
from scheduler import AutoPostScheduler, PostScheduler
from handlers import setup_handlers, PostCreator, ContentPlanManager, NotificationSystem
from utils import setup_logging, check_bot_permissions
from recovery_system import MessageRecoverySystem

logger = setup_logging()

class BotRunner:
    def __init__(self):
        self.app = None
        self.db = None
        self.auto_post_scheduler = None
        self.post_scheduler = None
        self.post_creator = None
        self.content_plan_manager = None
        self.notification_system = None
        self.recovery_system = None
        self._stop_event = asyncio.Event()

    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –±–æ—Ç–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ MamaAI –ë–æ—Ç–∞...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        loop = asyncio.get_running_loop()
        self.db = await loop.run_in_executor(None, Database)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI –º–æ–¥–µ–ª–∏
        logger.info("üß† –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –ò–ò...")
        llm = None
        try:
            llm = await loop.run_in_executor(None, lambda: Llama(
                model_path=MODEL_PATH,
                n_ctx=2048,
                n_threads=4,
                n_gpu_layers=0,
                verbose=False
            ))
            logger.info("‚úÖ –ú–æ–¥–µ–ª—å –ò–ò –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
            llm = MockLLM()
            logger.info("ü§ñ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ—Å—Ç–æ–≤–∞—è –º–æ–¥–µ–ª—å")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.app = Application.builder().token(BOT_TOKEN).build()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º
        cache = AdvancedCache(self.db)
        rate_limiter = RateLimiter(self.db)
        moderation = AdvancedModeration(llm, self.db)
        response_generator = ResponseGenerator(llm, cache, self.db)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        self.auto_post_scheduler = AutoPostScheduler(self.app, response_generator, self.db)
        self.post_scheduler = PostScheduler(self.app, self.db)
        self.post_creator = PostCreator(response_generator, self.db)
        self.content_plan_manager = ContentPlanManager(response_generator, self.db)
        self.notification_system = NotificationSystem(self.app, self.db)
        self.recovery_system = MessageRecoverySystem(self.app, self.db, moderation, response_generator)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ bot_data –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.app.bot_data.update({
            'db': self.db,
            'cache': cache,
            'rate_limiter': rate_limiter,
            'moderation': moderation,
            'response_generator': response_generator,
            'auto_post_scheduler': self.auto_post_scheduler,
            'post_scheduler': self.post_scheduler,
            'post_creator': self.post_creator,
            'content_plan_manager': self.content_plan_manager,
            'notification_system': self.notification_system,
            'recovery_system': self.recovery_system,
            'llm': llm,
            'channel_id': CHANNEL_ID
        })
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        setup_handlers(self.app)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ...")
        try:
            has_permissions = await check_bot_permissions(self.app.bot, CHANNEL_ID)
            if has_permissions:
                logger.info("‚úÖ –ü—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –ø–æ—Ä—è–¥–∫–µ")
            else:
                logger.error("‚ùå –ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª–µ!")
        except Exception as e:
            logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤: {e}")

        # –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º
        await self.auto_post_scheduler.start()
        await self.post_scheduler.start()
        
        # –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        await self.recovery_system.start_recovery_check()
        await self.recovery_system.start_periodic_checks()
        
        # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–µ–ø—Ä–æ—Ü–µ—Å—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        asyncio.create_task(self.monitor_unprocessed_messages())
        
        logger.info("üì± –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")

    async def monitor_unprocessed_messages(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ–ø—Ä–æ—Ü–µ—Å—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        logger.info("üîç –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–µ–ø—Ä–æ—Ü–µ—Å—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...")
        
        while not self._stop_event.is_set():
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                await asyncio.sleep(300)
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ—Ü–µ—Å—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                unprocessed = self.db.get_unprocessed_messages(1)  # –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
                if unprocessed:
                    logger.warning(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {len(unprocessed)} –Ω–µ–ø—Ä–æ—Ü–µ—Å—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
                    
                    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å –º–Ω–æ–≥–æ –Ω–µ–ø—Ä–æ—Ü–µ—Å—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                    if len(unprocessed) >= 5:
                        logger.info("üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è...")
                        await self.recovery_system.force_recovery(1)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–µ–ø—Ä–æ—Ü–µ—Å—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
                await asyncio.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø—Ä–∏ –æ—à–∏–±–∫–µ

    async def run(self):
        """–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –±–æ—Ç–∞"""
        try:
            await self.initialize()

            # –í—Ä—É—á–Ω—É—é –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ polling
            await self.app.initialize()
            await self.app.start()
            await self.app.updater.start_polling(
                drop_pending_updates=True,
                allowed_updates=Update.ALL_TYPES
            )

            logger.info("üì° Polling –∑–∞–ø—É—â–µ–Ω. –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω!")
            
            # –ñ–¥–µ–º —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            await self._stop_event.wait()
            
        except Exception as e:
            logger.exception(f"üí• –û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
        finally:
            await self.shutdown()

    async def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
        logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        self._stop_event.set()
        
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ updater (polling)
        try:
            if self.app and self.app.updater and self.app.updater.running:
                await self.app.updater.stop()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ updater: {e}")

        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–≤
        try:
            if self.auto_post_scheduler:
                await self.auto_post_scheduler.stop()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≤—Ç–æ-–ø–æ—Å—Ç–æ–≤: {e}")
            
        try:
            if self.post_scheduler:
                await self.post_scheduler.stop()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
            
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        try:
            if self.recovery_system:
                await self.recovery_system.stop()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∏—Å—Ç–µ–º—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        try:
            if self.app:
                await self.app.stop()
                await self.app.shutdown()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
            
        # –ó–∞–∫—Ä—ã—Ç–∏–µ –ë–î
        try:
            if self.db:
                loop = asyncio.get_running_loop()
                await loop.run_in_executor(None, self.db.conn.close)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ë–î: {e}")
            
        logger.info("üî¥ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    def stop(self):
        """–í–Ω–µ—à–Ω–∏–π –≤—ã–∑–æ–≤ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞"""
        self._stop_event.set()


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    runner = BotRunner()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
    def signal_handler(signum, frame):
        logger.info(f"üì± –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...")
        runner.stop()
    
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    try:
        asyncio.run(runner.run())
    except KeyboardInterrupt:
        logger.info("üî¥ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ KeyboardInterrupt")
    except Exception as e:
        logger.exception(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")


if __name__ == "__main__":
    main()