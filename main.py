import asyncio
import logging
from telegram.ext import Application
from config import BOT_TOKEN, CHANNEL_ID
from database import Database
from models import Llama, MockLLM
from moderation import AdvancedModeration
from ai_generator import ResponseGenerator
from scheduler import AutoPostScheduler, PostScheduler
from handlers import setup_handlers
from utils import setup_logging, check_bot_permissions

logger = setup_logging()

async def main():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ MamaAI –ë–æ—Ç–∞...")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db = Database()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI –º–æ–¥–µ–ª–∏
        logger.info("üß† –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –ò–ò...")
        try:
            llm = Llama(
                model_path=MODEL_PATH,
                n_ctx=2048,
                n_threads=4,
                n_gpu_layers=0,
                verbose=False
            )
            logger.info("‚úÖ –ú–æ–¥–µ–ª—å –ò–ò –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
            llm = MockLLM()
            logger.info("ü§ñ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ—Å—Ç–æ–≤–∞—è –º–æ–¥–µ–ª—å")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        app = Application.builder().token(BOT_TOKEN).build()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        context_data = {
            'db': db,
            'llm': llm,
            'channel_id': CHANNEL_ID
        }
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º
        from ai_generator import AdvancedCache
        from moderation import RateLimiter
        from handlers import NotificationSystem, PostCreator, ContentPlanManager
        
        cache = AdvancedCache(db)
        rate_limiter = RateLimiter(db)
        moderation = AdvancedModeration(llm, db)
        response_generator = ResponseGenerator(llm, cache, db)
        notification_system = NotificationSystem(app, db)
        post_creator = PostCreator(response_generator, db)
        content_plan_manager = ContentPlanManager(response_generator, db)
        auto_post_scheduler = AutoPostScheduler(app, response_generator, db)
        post_scheduler = PostScheduler(app, db)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        app.context_data = {
            'db': db,
            'cache': cache,
            'rate_limiter': rate_limiter,
            'moderation': moderation,
            'response_generator': response_generator,
            'notification_system': notification_system,
            'post_creator': post_creator,
            'content_plan_manager': content_plan_manager,
            'auto_post_scheduler': auto_post_scheduler,
            'post_scheduler': post_scheduler
        }
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        setup_handlers(app)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ...")
        has_permissions = await check_bot_permissions(app)
        if has_permissions:
            logger.info("‚úÖ –ü—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –ø–æ—Ä—è–¥–∫–µ")
        else:
            logger.error("‚ùå –ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª–µ!")
        
        # –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º
        await auto_post_scheduler.start()
        await post_scheduler.start()
        
        logger.info("üì± –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        await app.run_polling(
            drop_pending_updates=True,
            close_loop=False,
            allowed_updates=Update.ALL_TYPES
        )
        
    except KeyboardInterrupt:
        logger.info("üî¥ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        if 'auto_post_scheduler' in locals():
            await auto_post_scheduler.stop()
        if 'post_scheduler' in locals():
            await post_scheduler.stop()
        if 'db' in locals():
            db.conn.close()
        logger.info("üî¥ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    asyncio.run(main())
