import asyncio
import logging
from datetime import datetime, time as dt_time, timedelta
from config import MORNING_POST_TIME, EVENING_POST_TIME, Config, CHANNEL_ID
from utils import send_message_with_fallback

logger = logging.getLogger(__name__)

class AutoPostScheduler:
    def __init__(self, app, response_generator, db):
        self.app = app
        self.response_generator = response_generator
        self.db = db
        self.is_running = False
        self.tasks = []
        self.last_morning_post = None
        self.last_evening_post = None
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ—Å—Ç–æ–≤"""
        if self.is_running:
            return
        
        self.is_running = True
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ—Å—Ç–æ–≤...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∏ –ª–∏ —Å–µ–≥–æ–¥–Ω—è —É–∂–µ –ø–æ—Å—Ç—ã
        await self._check_today_posts()
        
        self.tasks = [
            asyncio.create_task(self._post_loop("morning", MORNING_POST_TIME)),
            asyncio.create_task(self._post_loop("evening", EVENING_POST_TIME))
        ]
        
        logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ—Å—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω–∞")
        logger.info(f"‚è∞ –£—Ç—Ä–µ–Ω–Ω–∏–µ –ø–æ—Å—Ç—ã: {MORNING_POST_TIME.strftime('%H:%M')}")
        logger.info(f"‚è∞ –í–µ—á–µ—Ä–Ω–∏–µ –ø–æ—Å—Ç—ã: {EVENING_POST_TIME.strftime('%H:%M')}")
    
    async def _check_today_posts(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∏ –ª–∏ —Å–µ–≥–æ–¥–Ω—è —É–∂–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã –ø–æ—Å—Ç—ã"""
        try:
            cursor = self.db.conn.cursor()
            today = datetime.now().date().isoformat()
            
            cursor.execute('''
                SELECT post_type, MAX(posted_at) 
                FROM auto_posts_history 
                WHERE date(posted_at) = date(?) AND success = TRUE
                GROUP BY post_type
            ''', (today,))
            
            results = cursor.fetchall()
            
            for post_type, last_post_time in results:
                if post_type == "morning":
                    self.last_morning_post = datetime.fromisoformat(last_post_time)
                    logger.info(f"üìÖ –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π —É—Ç—Ä–µ–Ω–Ω–∏–π –ø–æ—Å—Ç —É–∂–µ –±—ã–ª –≤ {self.last_morning_post.strftime('%H:%M')}")
                elif post_type == "evening":
                    self.last_evening_post = datetime.fromisoformat(last_post_time)
                    logger.info(f"üìÖ –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –≤–µ—á–µ—Ä–Ω–∏–π –ø–æ—Å—Ç —É–∂–µ –±—ã–ª –≤ {self.last_evening_post.strftime('%H:%M')}")
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏—Ö –ø–æ—Å—Ç–æ–≤: {e}")
    
    async def _post_loop(self, post_type: str, post_time: dt_time):
        """–¶–∏–∫–ª –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤"""
        type_emoji = "üåÖ" if post_type == "morning" else "üåô"
        type_name = "—É—Ç—Ä–µ–Ω–Ω–∏–π" if post_type == "morning" else "–≤–µ—á–µ—Ä–Ω–∏–π"
        
        while self.is_running:
            try:
                now = datetime.now()
                target_time = datetime.combine(now.date(), post_time)
                
                # –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ —Å–µ–≥–æ–¥–Ω—è, –ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
                if now >= target_time:
                    target_time += timedelta(days=1)
                    logger.info(f"‚è∞ –í—Ä–µ–º—è {post_time.strftime('%H:%M')} —É–∂–µ –ø—Ä–æ—à–ª–æ, –ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞")
                
                wait_seconds = (target_time - now).total_seconds()
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∂–¥–µ–º –±–æ–ª—å—à–µ 10 –º–∏–Ω—É—Ç
                if wait_seconds > 600:
                    hours = wait_seconds / 3600
                    logger.info(f"‚è∞ –°–ª–µ–¥—É—é—â–∏–π {type_name} –ø–æ—Å—Ç —á–µ—Ä–µ–∑ {hours:.1f} —á–∞—Å–æ–≤ (–≤ {target_time.strftime('%d.%m %H:%M')})")
                
                # –ñ–¥–µ–º –¥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–Ω–æ –Ω–µ –±–æ–ª–µ–µ 1 —á–∞—Å–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏)
                await asyncio.sleep(min(wait_seconds, 3600))
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç
                if self.is_running and await self._should_publish_post(post_type):
                    if post_type == "morning" and Config.ENABLE_MORNING_POSTS:
                        await self._publish_post(post_type)
                    elif post_type == "evening" and Config.ENABLE_EVENING_POSTS:
                        await self._publish_post(post_type)
                    
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ {type_name} –ø–æ—Å—Ç–æ–≤: {e}")
                await asyncio.sleep(300)  # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
    
    async def _should_publish_post(self, post_type: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç"""
        now = datetime.now()
        today = now.date()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É–∂–µ –ø–æ—Å—Ç —Å–µ–≥–æ–¥–Ω—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞
        if post_type == "morning":
            if self.last_morning_post and self.last_morning_post.date() == today:
                logger.info(f"‚è∞ –£—Ç—Ä–µ–Ω–Ω–∏–π –ø–æ—Å—Ç —É–∂–µ –±—ã–ª —Å–µ–≥–æ–¥–Ω—è –≤ {self.last_morning_post.strftime('%H:%M')}")
                return False
        else:
            if self.last_evening_post and self.last_evening_post.date() == today:
                logger.info(f"‚è∞ –í–µ—á–µ—Ä–Ω–∏–π –ø–æ—Å—Ç —É–∂–µ –±—ã–ª —Å–µ–≥–æ–¥–Ω—è –≤ {self.last_evening_post.strftime('%H:%M')}")
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è - –ø—É–±–ª–∏–∫—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –±–ª–∏–∑–∫–æ –∫ —Ü–µ–ª–µ–≤–æ–º—É
        target_time = MORNING_POST_TIME if post_type == "morning" else EVENING_POST_TIME
        current_time = now.time()
        
        # –ü—É–±–ª–∏–∫—É–µ–º –µ—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 10 –º–∏–Ω—É—Ç –æ—Ç —Ü–µ–ª–µ–≤–æ–≥–æ
        time_diff = abs((datetime.combine(now.date(), current_time) - 
                        datetime.combine(now.date(), target_time)).total_seconds())
        
        if time_diff > 600:  # 10 –º–∏–Ω—É—Ç
            logger.info(f"‚è∞ –ù–µ –≤—Ä–µ–º—è –¥–ª—è {post_type} –ø–æ—Å—Ç–∞ (—Ä–∞–∑–Ω–∏—Ü–∞: {time_diff/60:.1f} –º–∏–Ω)")
            return False
            
        return True
    
    async def _publish_post(self, post_type: str):
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞"""
        type_name = "—É—Ç—Ä–µ–Ω–Ω–∏–π" if post_type == "morning" else "–≤–µ—á–µ—Ä–Ω–∏–π"
        type_emoji = "üåÖ" if post_type == "morning" else "üåô"
        
        try:
            logger.info(f"{type_emoji} –ì–µ–Ω–µ—Ä–∞—Ü–∏—è {type_name} –ø–æ—Å—Ç–∞...")
            post_text = await self.response_generator.generate_motivational_message(post_type)
            
            if not post_text or len(post_text.strip()) < 10:
                logger.error(f"‚ùå –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –ø—É—Å—Ç–æ–π –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π {type_name} –ø–æ—Å—Ç")
                post_text = await self._get_fallback_post(post_type)
            
            # –ü—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
            success = await send_message_with_fallback(self.app, CHANNEL_ID, post_text)
            
            if success:
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ—Å—Ç–∞
                post_time = datetime.now()
                if post_type == "morning":
                    self.last_morning_post = post_time
                else:
                    self.last_evening_post = post_time
                
                cursor = self.db.execute_with_datetime('''
                    INSERT INTO auto_posts_history 
                    (post_type, post_text, posted_at, success)
                    VALUES (?, ?, ?, ?)
                ''', (post_type, post_text, post_time, True))
                self.db.conn.commit()
                
                logger.info(f"‚úÖ {type_emoji} {type_name.capitalize()} –ø–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω")
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
                if Config.NOTIFY_ON_SPAM:
                    notification_system = self.app.context_data.get('notification_system')
                    if notification_system:
                        await notification_system.notify_admins(
                            f"{type_emoji} {type_name.capitalize()} –ø–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ {post_time.strftime('%H:%M')}\n\n"
                            f"{post_text[:100]}..."
                        )
            else:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ {type_name} –ø–æ—Å—Ç–∞: {e}")
            
            cursor = self.db.execute_with_datetime('''
                INSERT INTO auto_posts_history 
                (post_type, post_text, posted_at, success, error_message)
                VALUES (?, ?, ?, ?, ?)
            ''', (post_type, "", datetime.now(), False, str(e)))
            self.db.conn.commit()
    
    async def _get_fallback_post(self, post_type: str) -> str:
        """–†–µ–∑–µ—Ä–≤–Ω—ã–µ –ø–æ—Å—Ç—ã –Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        if post_type == "morning":
            return "‚òÄÔ∏è –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ù–æ–≤—ã–π –¥–µ–Ω—å ‚Äî –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏. –ü—É—Å—Ç—å —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å –±—É–¥–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–º –∏ –Ω–∞—Å—ã—â–µ–Ω–Ω—ã–º –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–º–∏ —Å–æ–±—ã—Ç–∏—è–º–∏! üí´"
        else:
            return "üåô –°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏! –û—Ç–¥—ã—Ö–∞–π—Ç–µ –∏ –Ω–∞–±–∏—Ä–∞–π—Ç–µ—Å—å —Å–∏–ª –¥–ª—è –Ω–æ–≤—ã—Ö —Å–≤–µ—Ä—à–µ–Ω–∏–π. –ü—É—Å—Ç—å –≤–∞—à–∏ —Å–Ω—ã –±—É–¥—É—Ç —è—Ä–∫–∏–º–∏ –∏ –ø—Ä–∏—è—Ç–Ω—ã–º–∏! üí§"
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ—Å—Ç–æ–≤"""
        self.is_running = False
        for task in self.tasks:
            if not task.done():
                task.cancel()
        logger.info("üõë –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ—Å—Ç–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")


class PostScheduler:
    def __init__(self, app, db):
        self.app = app
        self.db = db
        self.is_running = False
        self.scheduler_task = None
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø–æ—Å—Ç–æ–≤"""
        if self.is_running:
            return
        
        self.is_running = True
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø–æ—Å—Ç–æ–≤...")
        
        self.scheduler_task = asyncio.create_task(self._scheduler_loop())
        logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø–æ—Å—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω–∞")
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø–æ—Å—Ç–æ–≤"""
        self.is_running = False
        if self.scheduler_task:
            self.scheduler_task.cancel()
        logger.info("üõë –°–∏—Å—Ç–µ–º–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø–æ—Å—Ç–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    async def _scheduler_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        while self.is_running:
            try:
                await self._check_scheduled_posts()
                await asyncio.sleep(30)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
                await asyncio.sleep(60)
    
    async def _check_scheduled_posts(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤"""
        try:
            cursor = self.db.conn.cursor()
            cursor.execute('''
                SELECT id, user_id, post_text, scheduled_time, channel_id 
                FROM scheduled_posts 
                WHERE status = 'scheduled' 
                AND datetime(scheduled_time) <= datetime('now', '+10 seconds')
                ORDER BY datetime(scheduled_time) ASC
            ''')
            
            posts_to_publish = cursor.fetchall()
            
            for post in posts_to_publish:
                post_id, user_id, post_text, scheduled_time, channel_id = post
                logger.info(f"üì§ –ù–∞–π–¥–µ–Ω –ø–æ—Å—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: ID {post_id}, –≤—Ä–µ–º—è: {scheduled_time}")
                await self._publish_scheduled_post(post_id, user_id, post_text, channel_id)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤: {e}")
    
    async def _publish_scheduled_post(self, post_id: int, user_id: int, post_text: str, channel_id: str):
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞"""
        try:
            logger.info(f"üì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ {post_id} –≤ –∫–∞–Ω–∞–ª {channel_id}...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–Ω–∞–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –±–æ—Ç –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞
            try:
                chat = await self.app.bot.get_chat(channel_id)
                logger.info(f"‚úÖ –ö–∞–Ω–∞–ª –Ω–∞–π–¥–µ–Ω: {chat.title}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞
                bot_info = await self.app.bot.get_me()
                member = await self.app.bot.get_chat_member(channel_id, bot_info.id)
                if member.status not in ['administrator', 'creator']:
                    error_msg = "–ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞"
                    logger.error(f"‚ùå {error_msg}")
                    await self._mark_post_as_error(post_id, error_msg)
                    return
                    
            except Forbidden as e:
                if "bot is not a member" in str(e):
                    error_msg = "–ë–æ—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª"
                    logger.error(f"‚ùå {error_msg}")
                    await self._mark_post_as_error(post_id, error_msg)
                    return
                else:
                    raise e
            
            # –ü—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
            success = await send_message_with_fallback(self.app, channel_id, post_text)
            
            if success:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ
                await self._mark_post_as_published(post_id)
                logger.info(f"‚úÖ –ü–æ—Å—Ç {post_id} —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω")
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await self._notify_user(user_id, post_text, post_id)
            else:
                error_msg = "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫"
                await self._mark_post_as_error(post_id, error_msg)
                
        except Forbidden as e:
            if "bot is not a member" in str(e):
                error_msg = "–ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –∫–∞–Ω–∞–ª–∞. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
                logger.error(f"‚ùå {error_msg}")
                await self._mark_post_as_error(post_id, error_msg)
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ {post_id}: {e}")
                await self._mark_post_as_error(post_id, str(e))
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ—Å—Ç–∞ {post_id}: {e}")
            await self._mark_post_as_error(post_id, str(e))
    
    async def _mark_post_as_published(self, post_id: int):
        """–û—Ç–º–µ—á–∞–µ–º –ø–æ—Å—Ç –∫–∞–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–π"""
        try:
            cursor = self.db.execute_with_datetime('''
                UPDATE scheduled_posts 
                SET status = 'published'
                WHERE id = ?
            ''', (post_id,))
            self.db.conn.commit()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ—Å—Ç–∞ {post_id}: {e}")
    
    async def _mark_post_as_error(self, post_id: int, error_message: str):
        """–û—Ç–º–µ—á–∞–µ–º –ø–æ—Å—Ç –∫–∞–∫ –æ—à–∏–±–æ—á–Ω—ã–π"""
        try:
            cursor = self.db.execute_with_datetime('''
                UPDATE scheduled_posts 
                SET status = 'error', scheduled_time = ?
                WHERE id = ?
            ''', (datetime.now(), post_id))
            self.db.conn.commit()
            logger.error(f"‚ùå –ü–æ—Å—Ç {post_id} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –æ—à–∏–±–æ—á–Ω—ã–π: {error_message}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–º–µ—Ç–∫–∏ –ø–æ—Å—Ç–∞ {post_id} –∫–∞–∫ –æ—à–∏–±–æ—á–Ω–æ–≥–æ: {e}")
    
    async def _notify_user(self, user_id: int, post_text: str, post_id: int):
        """–£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
        try:
            await self.app.bot.send_message(
                user_id,
                f"‚úÖ –í–∞—à –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!\n\n"
                f"üìù {post_text[:100]}...\n\n"
                f"üÜî ID –ø–æ—Å—Ç–∞: {post_id}"
            )
            logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ {post_id}")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    
    async def get_scheduled_posts_stats(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤"""
        cursor = self.db.conn.cursor()
        
        cursor.execute('''
            SELECT status, COUNT(*) 
            FROM scheduled_posts 
            GROUP BY status
        ''')
        
        stats = {}
        for status, count in cursor.fetchall():
            stats[status] = count
        
        # –ë–ª–∏–∂–∞–π—à–∏–µ –ø–æ—Å—Ç—ã
        cursor.execute('''
            SELECT topic, scheduled_time, status 
            FROM scheduled_posts 
            WHERE status = 'scheduled'
            ORDER BY datetime(scheduled_time) 
            LIMIT 5
        ''')
        
        upcoming_posts = []
        for row in cursor.fetchall():
            topic, scheduled_time, status = row
            try:
                time_str = datetime.fromisoformat(scheduled_time).strftime('%d.%m %H:%M')
            except:
                time_str = scheduled_time
                
            upcoming_posts.append({
                'topic': topic,
                'time': time_str,
                'status': status
            })
        
        return {
            'stats': stats,
            'upcoming_posts': upcoming_posts
        }
