import re
import json
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters
from telegram.error import Forbidden, NetworkError, TimedOut, BadRequest

from config import CHANNEL_ID, Config
from utils import send_message_with_fallback, check_bot_permissions
from keyboards import (
    get_main_menu_keyboard,
    get_tone_keyboard,
    get_length_keyboard,
    get_content_plan_type_keyboard
)

logger = logging.getLogger(__name__)

class NotificationSystem:
    def __init__(self, app, db):
        self.app = app
        self.db = db
    
    async def notify_admins(self, message: str, include_buttons: bool = False):
        admins = await self.get_channel_admins()
        
        for admin_id in admins:
            try:
                if include_buttons:
                    keyboard = [
                        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
                        [InlineKeyboardButton("üõë –°—Ç–æ–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="mute_notifications")]
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    await self.app.bot.send_message(
                        admin_id, message, reply_markup=reply_markup
                    )
                else:
                    await self.app.bot.send_message(admin_id, message)
            except Exception as e:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
    
    async def get_channel_admins(self) -> list:
        try:
            administrators = await self.app.bot.get_chat_administrators(CHANNEL_ID)
            return [
                admin.user.id for admin in administrators 
                if admin.user and not admin.user.is_bot
            ]
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {e}")
            return []

class PostCreator:
    def __init__(self, response_generator, db):
        self.response_generator = response_generator
        self.db = db
    
    async def handle_post_creation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not context.user_data.get('creating_post'):
            return
        
        user = update.effective_user
        message = update.effective_message
        
        stage = context.user_data.get('post_stage')
        logger.info(f"üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞, —Å—Ç–∞–¥–∏—è: {stage}")
        
        if stage == 'topic':
            context.user_data['post_topic'] = message.text
            context.user_data['post_stage'] = 'tone'
            
            reply_markup = get_tone_keyboard()
            
            await message.reply_text(
                "üé≠ **–®–∞–≥ 2 –∏–∑ 5:** –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–Ω –ø–æ—Å—Ç–∞:",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        
        elif stage == 'main_idea':
            context.user_data['post_main_idea'] = message.text
            context.user_data['post_stage'] = 'length'
            
            reply_markup = get_length_keyboard()
            
            await message.reply_text(
                "üìè **–®–∞–≥ 4 –∏–∑ 5:** –í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏–Ω—É –ø–æ—Å—Ç–∞:",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        
        elif stage == 'schedule_time':
            try:
                schedule_time = self.parse_schedule_time(message.text)
                if schedule_time:
                    logger.info(f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –≤—Ä–µ–º—è: {schedule_time}")
                    await self.schedule_post(update, context, schedule_time)
                else:
                    await message.reply_text(
                        "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤—Ä–µ–º—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: '—Å–µ–π—á–∞—Å', '—á–µ—Ä–µ–∑ 2 —á–∞—Å–∞', '–∑–∞–≤—Ç—Ä–∞ 09:00'",
                        parse_mode='Markdown'
                    )
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞: {e}")
                await message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞")

    def parse_schedule_time(self, text: str):
        text = text.lower().strip()
        now = datetime.now()
        
        if text in ['—Å–µ–π—á–∞—Å', '–Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ', 'now', '—Å—Ä–∞–∑—É']:
            return now
        
        match = re.search(r'—á–µ—Ä–µ–∑\s*(\d+)\s*(—á–∞—Å|—á–∞—Å–∞|—á–∞—Å–æ–≤|–º–∏–Ω—É—Ç|–º–∏–Ω—É—Ç—ã|–º–∏–Ω—É—Ç—É)', text)
        if match:
            amount = int(match.group(1))
            unit = match.group(2)
            
            if unit in ['—á–∞—Å', '—á–∞—Å–∞', '—á–∞—Å–æ–≤']:
                return now + timedelta(hours=amount)
            elif unit in ['–º–∏–Ω—É—Ç', '–º–∏–Ω—É—Ç—ã', '–º–∏–Ω—É—Ç—É']:
                return now + timedelta(minutes=amount)
        
        match = re.search(r'–∑–∞–≤—Ç—Ä–∞\s*–≤\s*(\d{1,2})[:\s]?(\d{2})?', text)
        if match:
            hour = int(match.group(1))
            minute = int(match.group(2) or 0)
            tomorrow = now + timedelta(days=1)
            try:
                return tomorrow.replace(hour=hour, minute=minute, second=0, microsecond=0)
            except ValueError:
                return None
        
        return None

    async def schedule_post(self, update: Update, context: ContextTypes.DEFAULT_TYPE, schedule_time: datetime):
        user = update.effective_user
        post_data = context.user_data
        
        required_data = ['generated_post', 'post_tone', 'post_topic', 'post_length', 'post_main_idea']
        missing_data = [key for key in required_data if key not in post_data or not post_data[key]]
        
        if missing_data:
            logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ: {missing_data}")
            await update.effective_message.reply_text("‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞")
            context.user_data.clear()
            return
        
        topic = post_data['post_topic']
        tone = post_data['post_tone']
        main_idea = post_data['post_main_idea']
        length = post_data['post_length']
        generated_post = post_data['generated_post']
        
        try:
            cursor = self.db.execute_with_datetime('''
                INSERT INTO scheduled_posts 
                (user_id, post_text, scheduled_time, channel_id, tone, topic, length, main_idea, status)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                user.id,
                generated_post,
                schedule_time,
                CHANNEL_ID,
                tone,
                topic,
                length,
                main_idea,
                'scheduled'
            ))
            self.db.conn.commit()
            
            post_id = cursor.lastrowid
            logger.info(f"‚úÖ –ü–æ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ID={post_id}, —Ç–µ–º–∞='{topic}', –≤—Ä–µ–º—è='{schedule_time}'")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å—Ç–∞: {e}")
            await update.effective_message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞")
            return
        
        context.user_data.clear()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
        time_diff = (schedule_time - datetime.now()).total_seconds()
        
        if time_diff <= 60:  # –ï—Å–ª–∏ –º–µ–Ω–µ–µ 60 —Å–µ–∫—É–Ω–¥ –¥–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            try:
                success = await send_message_with_fallback(context.application, CHANNEL_ID, generated_post)
                
                if success:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ
                    cursor = self.db.execute_with_datetime('''
                        UPDATE scheduled_posts 
                        SET status = 'published'
                        WHERE id = ?
                    ''', (post_id,))
                    self.db.conn.commit()
                    
                    status = "‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!"
                    logger.info(f"‚úÖ –ü–æ—Å—Ç {post_id} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ")
                else:
                    status = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞"
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç {post_id}")
                
            except Forbidden as e:
                if "bot is not a member" in str(e):
                    status = "‚ùå –ë–æ—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
                    logger.error(f"‚ùå {status}")
                else:
                    status = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞"
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
                status = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞"
        else:
            status = f"‚úÖ –ü–æ—Å—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {schedule_time.strftime('%d.%m.%Y %H:%M')}"
            logger.info(f"‚úÖ –ü–æ—Å—Ç {post_id} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {schedule_time}")
        
        await update.effective_message.reply_text(
            f"{status}\n\n"
            f"üìù –¢–µ–º–∞: {topic}\n"
            f"üé≠ –¢–æ–Ω: {tone}\n"
            f"üí° –ò–¥–µ—è: {main_idea}\n"
            f"üÜî ID –ø–æ—Å—Ç–∞: {post_id}",
            parse_mode='Markdown'
        )

class ContentPlanManager:
    def __init__(self, response_generator, db):
        self.response_generator = response_generator
        self.db = db
    
    async def create_content_plan(self, update: Update, context: ContextTypes.DEFAULT_TYPE, plan_type: str):
        user = update.effective_user
        
        context.user_data['content_plan_type'] = plan_type
        context.user_data['content_plan_stage'] = 'niche'
        
        await update.callback_query.edit_message_text(
            f"ÔøΩÔøΩ **–°–æ–∑–¥–∞–Ω–∏–µ {plan_type} –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞**\n\n"
            "üéØ **–®–∞–≥ 1 –∏–∑ 3:** –í–≤–µ–¥–∏—Ç–µ –Ω–∏—à—É –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞:",
            parse_mode='Markdown'
        )
    
    async def handle_content_plan_creation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        message = update.effective_message
        
        if not context.user_data.get('content_plan_stage'):
            return
        
        stage = context.user_data.get('content_plan_stage')
        logger.info(f"üìÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞, —Å—Ç–∞–¥–∏—è: {stage}")
        
        if stage == 'niche':
            context.user_data['content_plan_niche'] = message.text
            context.user_data['content_plan_stage'] = 'tone'
            
            reply_markup = get_tone_keyboard("plan_tone")
            
            await message.reply_text(
                "üé≠ **–®–∞–≥ 2 –∏–∑ 3:** –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–Ω –∫–æ–Ω—Ç–µ–Ω—Ç–∞:",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        
        elif stage == 'posts_count':
            try:
                posts_count = int(message.text)
                if posts_count < 1 or posts_count > 50:
                    await message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 50")
                    return
                
                context.user_data['content_plan_posts_count'] = posts_count
                await self.generate_content_plan(update, context)
                
            except ValueError:
                await message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")

    async def generate_content_plan(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        plan_data = context.user_data
        
        await update.effective_message.reply_text("ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω... ‚è≥")
        
        try:
            content_plan = await self.response_generator.generate_content_plan(
                plan_type=plan_data['content_plan_type'],
                niche=plan_data['content_plan_niche'],
                tone=plan_data['content_plan_tone'],
                posts_per_week=plan_data.get('content_plan_posts_count', 7)
            )
            
            plan_name = f"{plan_data['content_plan_type']} –ø–ª–∞–Ω - {plan_data['content_plan_niche']}"
            
            cursor = self.db.execute_with_datetime('''
                INSERT INTO content_plans 
                (user_id, plan_name, plan_type, start_date, end_date, plan_data)
                VALUES (?, ?, ?, ?, ?, ?)
            ''', (
                user.id,
                plan_name,
                plan_data['content_plan_type'],
                datetime.now().date().isoformat(),
                (datetime.now() + timedelta(days=30 if plan_data['content_plan_type'] == 'monthly' else 7)).date().isoformat(),
                json.dumps(content_plan, ensure_ascii=False)
            ))
            self.db.conn.commit()
            
            await self.show_content_plan(update, context, content_plan, plan_name)
            context.user_data.clear()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞: {e}")
            await update.effective_message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞")

    async def show_content_plan(self, update: Update, context: ContextTypes.DEFAULT_TYPE, content_plan: dict, plan_name: str):
        plan_text = f"üìÖ **{plan_name}**\n\n"
        
        for i, post in enumerate(content_plan.get('plan', [])[:5]):
            if 'day' in post:
                plan_text += f"**{post['day']}**\n"
            elif 'date' in post:
                plan_text += f"**{post['date']}**\n"
            
            plan_text += f"üéØ –¢–µ–º–∞: {post.get('topic', '–ë–µ–∑ —Ç–µ–º—ã')}\n"
            plan_text += f"üí° –ò–¥–µ—è: {post.get('main_idea', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')}\n\n"
        
        plan_text += "‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω!"
        
        keyboard = [
            [InlineKeyboardButton("üìã –ú–æ–∏ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω—ã", callback_data="my_content_plans")],
            [InlineKeyboardButton("‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.effective_message.reply_text(
            plan_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===
async def get_user_display_name(user, message) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω–æ–µ –∏–º—è
        if user.first_name and user.first_name.lower() != "telegram":
            if user.last_name:
                return f"{user.first_name} {user.last_name}"
            return user.first_name
        
        # –ü—Ä–æ–±—É–µ–º username
        if user.username:
            return f"@{user.username}"
        
        # –î–ª—è –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∫–∞–Ω–∞–ª–∞—Ö
        if hasattr(message, 'sender_chat') and message.sender_chat:
            return message.sender_chat.title or "—É—á–∞—Å—Ç–Ω–∏–∫ –∫–∞–Ω–∞–ª–∞"
            
        return "–¥—Ä—É–≥"
    except Exception:
        return "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

async def safe_reply_to_message(message, reply_text: str, username: str):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        if message and message.message_id:
            await message.reply_text(reply_text)
            logger.info(f"üí¨ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω {username}: {reply_text[:50]}...")
        else:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ç–æ—Ç –∂–µ —á–∞—Ç
            await message.chat.send_message(reply_text)
            logger.info(f"üí¨ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç –¥–ª—è {username}: {reply_text[:50]}...")
            
    except Exception as e:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –¥–ª—è {username}: {e}")
        # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ reply
        try:
            await message.chat.send_message(reply_text)
            logger.info(f"üí¨ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –±–µ–∑ reply –¥–ª—è {username}")
        except Exception as e2:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è {username}: {e2}")

async def save_user_activity(db, user, username: str):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        db_username = user.username or user.first_name or "anonymous"
        cursor = db.execute_with_datetime('''
            INSERT OR REPLACE INTO user_activity 
            (user_id, username, first_seen, last_activity, messages_count)
            VALUES (?, ?, COALESCE((SELECT first_seen FROM user_activity WHERE user_id = ?), ?), ?, 
            COALESCE((SELECT messages_count FROM user_activity WHERE user_id = ?), 0) + 1)
        ''', (user.id, db_username, user.id, datetime.now().date().isoformat(), 
              datetime.now().date().isoformat(), user.id))
        db.conn.commit()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}")

async def handle_message_error(message, user, error):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    error_msg = str(error).lower()
    
    if "message to be replied not found" in error_msg:
        logger.warning(f"‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
        return
    
    if "bot was blocked" in error_msg:
        logger.warning(f"‚ö†Ô∏è –ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user.id}")
        return
        
    # –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    try:
        if user.first_name and user.first_name.lower() != "telegram":
            await message.reply_text(f"–°–ø–∞—Å–∏–±–æ, {user.first_name}! üòä")
        else:
            await message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π! üåü")
    except Exception:
        pass

def clean_message_text(text: str) -> str:
    """–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤"""
    if not text:
        return ""
    
    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
    text = text.strip()
    
    # –£–¥–∞–ª—è–µ–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã —Ç–∏–ø–∞ ___ –≤ –Ω–∞—á–∞–ª–µ
    text = re.sub(r'^_+\s*', '', text)
    
    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –∫–∞–≤—ã—á–∫–∏
    text = re.sub(r'^["\']+|\s*["\']+$', '', text)
    
    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    text = re.sub(r'\s+', ' ', text)
    
    return text.strip()

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–û–ë–©–ï–ù–ò–ô ===
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.effective_message
    if not message or not message.text:
        return

    user = message.from_user
    text = clean_message_text(message.text)
    
    logger.info(f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.first_name or user.id}: {text[:50]}...")

    if str(message.chat.id) == CHANNEL_ID:
        await handle_channel_comment(update, context)
        return

    if not await context.application.context_data['rate_limiter'].check_limit(user.id):
        try:
            await message.reply_text("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.")
            return
        except:
            pass
        return

    await context.application.context_data['rate_limiter'].record_message(user.id, text)

    is_spam, spam_score = await context.application.context_data['moderation'].advanced_spam_check(text, user.id)
    
    if is_spam:
        await handle_spam(message, user, spam_score)
    else:
        await handle_legitimate_message(message, user, text, context)

async def handle_channel_comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.effective_message
    user = message.from_user
    text = clean_message_text(message.text)
    
    if not user or not text:
        return
        
    logger.info(f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –∫–∞–Ω–∞–ª–µ –æ—Ç {user.first_name or '–∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'}: {text[:50]}...")

    is_spam, spam_score = await context.application.context_data['moderation'].advanced_spam_check(text, user.id)
    
    if is_spam:
        await handle_spam(message, user, spam_score)
        return

    if not await context.application.context_data['rate_limiter'].check_limit(user.id):
        logger.info(f"‚è∞ Rate limit –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –æ—Ç {user.first_name or '–∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'}")
        return

    await context.application.context_data['rate_limiter'].record_message(user.id, text)

    try:
        username = await get_user_display_name(user, message)
        
        logger.info(f"ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç {username}")
        
        reply_text = await context.application.context_data['response_generator'].generate_context_aware_reply(
            text, user.id, username
        )
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
        await safe_reply_to_message(message, reply_text, username)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        await save_user_activity(context.application.context_data['db'], user, username)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {e}")

async def handle_spam(message, user, spam_score):
    try:
        await message.delete()
        logger.warning(f"üõ°Ô∏è –£–¥–∞–ª–µ–Ω —Å–ø–∞–º –æ—Ç {user.first_name or user.id} (score: {spam_score})")
        
        if spam_score >= 5 and Config.NOTIFY_ON_SPAM:
            notification_system = message._bot.context_data.get('notification_system')
            if notification_system:
                notification = f"üö® –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Å–ø–∞–º–∞ (score: {spam_score})\n–û—Ç: {user.first_name or user.id}\n–¢–µ–∫—Å—Ç: {message.text[:100]}..."
                await notification_system.notify_admins(notification)
            
    except Exception as e:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–ø–∞–º: {e}")

async def handle_legitimate_message(message, user, text, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–µ–≥–∏—Ç–∏–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        username = await get_user_display_name(user, message)
        
        logger.info(f"ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –¥–ª—è {username} –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text[:50]}...")
        
        reply_text = await context.application.context_data['response_generator'].generate_context_aware_reply(
            text, user.id, username
        )
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
        await safe_reply_to_message(message, reply_text, username)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
        await save_user_activity(context.application.context_data['db'], user, username)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {user.id}: {e}")
        await handle_message_error(message, user, e)

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö –í–°–ï–• –°–û–û–ë–©–ï–ù–ò–ô ===
async def handle_all_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–æ–≤
    if context.user_data.get('content_plan_stage'):
        stage = context.user_data.get('content_plan_stage')
        if stage in ['niche', 'posts_count']:
            await context.application.context_data['content_plan_manager'].handle_content_plan_creation(update, context)
            return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤
    if context.user_data.get('creating_post'):
        stage = context.user_data.get('post_stage')
        if stage in ['topic', 'main_idea', 'schedule_time']:
            await context.application.context_data['post_creator'].handle_post_creation(update, context)
            return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    await handle_message(update, context)

# === –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê ===
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_text = """üöÄ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MamaAI –ë–æ—Ç–∞!**

ü§ñ –Ø –ø–æ–º–æ–≥–∞—é –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ—Ä–∞—Ü–∏—é –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –≤ Telegram-–∫–∞–Ω–∞–ª–∞—Ö.

**–ß—Ç–æ —è —É–º–µ—é:**
üõ°Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Ö–æ–¥–∏—Ç—å –∏ —É–¥–∞–ª—è—Ç—å —Å–ø–∞–º
üí¨ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
üì¢ –ü—É–±–ª–∏–∫–æ–≤–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ø–æ—Å—Ç—ã
üìä –°–æ–±–∏—Ä–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç—ã —Å –ø–æ–º–æ—â—å—é –ò–ò
üìÖ –°–æ–∑–¥–∞–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω—ã

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"""
    
    reply_markup = get_main_menu_keyboard()
    
    if update.message:
        await update.message.reply_text(welcome_text, reply_markup=reply_markup, parse_mode='Markdown')
    elif update.callback_query:
        await update.callback_query.edit_message_text(welcome_text, reply_markup=reply_markup, parse_mode='Markdown')

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        db = context.application.context_data['db']
        cache = context.application.context_data['cache']
        
        cursor = db.conn.cursor()
        
        cursor.execute('SELECT COUNT(*) FROM message_history')
        total_messages = cursor.fetchone()[0]
        
        cursor.execute('SELECT COUNT(*) FROM message_history WHERE is_spam = TRUE')
        spam_blocked = cursor.fetchone()[0]
        
        cursor.execute('SELECT COUNT(DISTINCT user_id) FROM user_activity')
        unique_users = cursor.fetchone()[0]
        
        cursor.execute('SELECT COUNT(*) FROM scheduled_posts WHERE status = "scheduled"')
        scheduled_posts = cursor.fetchone()[0]
        
        cache_stats = cache.get_stats()
        
        stats_text = f"""üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞**

‚Ä¢ üí¨ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}
‚Ä¢ üõ°Ô∏è –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ —Å–ø–∞–º–∞: {spam_blocked}
‚Ä¢ üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {unique_users}
‚Ä¢ üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –ø–æ—Å—Ç–æ–≤: {scheduled_posts}
‚Ä¢ üíæ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫—ç—à–∞: {cache_stats['hit_rate']:.1%}
‚Ä¢ ‚è∞ –ê–≤—Ç–æ-–ø–æ—Å—Ç—ã: –∞–∫—Ç–∏–≤–Ω—ã

–í—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ! ‚úÖ"""
        
        if update.message:
            await update.message.reply_text(stats_text, parse_mode='Markdown')
        elif update.callback_query:
            await update.callback_query.edit_message_text(stats_text, parse_mode='Markdown')
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        error_text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
        if update.message:
            await update.message.reply_text(error_text)
        elif update.callback_query:
            await update.callback_query.edit_message_text(error_text)

async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    from config import MORNING_POST_TIME, EVENING_POST_TIME
    
    status_text = f"""üñ• **–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã**

‚Ä¢ ü§ñ –ú–æ–¥–µ–ª—å –ò–ò: –ó–∞–≥—Ä—É–∂–µ–Ω–∞
‚Ä¢ üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –ê–∫—Ç–∏–≤–Ω–∞
‚Ä¢ üì¢ –ê–≤—Ç–æ-–ø–æ—Å—Ç—ã: –†–∞–±–æ—Ç–∞—é—Ç
‚Ä¢ üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ü–∏—è: –í–∫–ª—é—á–µ–Ω–∞
‚Ä¢ üåê –°–µ—Ç—å: –°—Ç–∞–±–∏–ª—å–Ω–∞—è

‚è∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤:
‚Ä¢ –£—Ç—Ä–µ–Ω–Ω–∏–µ: {MORNING_POST_TIME.strftime('%H:%M')}
‚Ä¢ –í–µ—á–µ—Ä–Ω–∏–µ: {EVENING_POST_TIME.strftime('%H:%M')}

üïê –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: {datetime.now().strftime('%H:%M:%S')}"""
    
    if update.message:
        await update.message.reply_text(status_text, parse_mode='Markdown')
    elif update.callback_query:
        await update.callback_query.edit_message_text(status_text, parse_mode='Markdown')

async def test_post_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        post_text = f"üß™ **–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç**\n\n–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ {datetime.now().strftime('%H:%M:%S')}\n\n–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ! ‚úÖ"
        
        success = await send_message_with_fallback(context.application, CHANNEL_ID, post_text)
        
        if success:
            await update.message.reply_text("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ!")
            logger.info("üì¢ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        else:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç")
            logger.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞")
            
    except Forbidden as e:
        if "bot is not a member" in str(e):
            await update.message.reply_text(
                "‚ùå –ë–æ—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª!\n\n"
                "–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n"
                "1. –ó–∞–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞\n"
                "2. –í—ã–±–µ—Ä–∏—Ç–µ '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã'\n"
                "3. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ @MamaAIBot\n"
                "4. –î–∞–π—Ç–µ –ø—Ä–∞–≤–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π"
            )
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞")
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞: {e}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    from config import MORNING_POST_TIME, EVENING_POST_TIME
    
    help_text = f"""ü§ñ **–ü–æ–º–æ—â—å –ø–æ MamaAI –ë–æ—Ç—É**

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞
/status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
/test_post - —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç
/create_post - —Å–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç —Å –ò–ò
/content_plan - —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω
/scheduled_posts - –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã
/check_permissions - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –±–æ—Ç–∞
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

**–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
‚Ä¢ –ú–æ–¥–µ—Ä–∞—Ü–∏—è —Å–ø–∞–º–∞ (AI –ø—Ä–æ–≤–µ—Ä–∫–∞)
‚Ä¢ –û—Ç–≤–µ—Ç—ã –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ (AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—è)
‚Ä¢ –£—Ç—Ä–µ–Ω–Ω–∏–µ –ø–æ—Å—Ç—ã: {MORNING_POST_TIME.strftime('%H:%M')}
‚Ä¢ –í–µ—á–µ—Ä–Ω–∏–µ –ø–æ—Å—Ç—ã: {EVENING_POST_TIME.strftime('%H:%M')}
‚Ä¢ –°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏! üéØ"""
    
    if update.message:
        await update.message.reply_text(help_text, parse_mode='Markdown')
    elif update.callback_query:
        await update.callback_query.edit_message_text(help_text, parse_mode='Markdown')

async def create_post_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['creating_post'] = True
    context.user_data['post_stage'] = 'topic'
    
    if update.message:
        await update.message.reply_text(
            "ü§ñ **–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é –ò–ò**\n\n"
            "üìù **–®–∞–≥ 1 –∏–∑ 5:** –í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –ø–æ—Å—Ç–∞:",
            parse_mode='Markdown'
        )
    elif update.callback_query:
        await update.callback_query.edit_message_text(
            "ü§ñ **–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é –ò–ò**\n\n"
            "üìù **–®–∞–≥ 1 –∏–∑ 5:** –í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –ø–æ—Å—Ç–∞:",
            parse_mode='Markdown'
        )

async def content_plan_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reply_markup = get_content_plan_type_keyboard()
    
    if update.message:
        await update.message.reply_text(
            "üìÖ **–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    elif update.callback_query:
        await update.callback_query.edit_message_text(
            "üìÖ **–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

async def scheduled_posts_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        stats = await context.application.context_data['post_scheduler'].get_scheduled_posts_stats()
        
        response = "üìÖ **–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã**\n\n"
        
        if stats['upcoming_posts']:
            response += "‚è∞ **–ë–ª–∏–∂–∞–π—à–∏–µ –ø–æ—Å—Ç—ã:**\n"
            for post in stats['upcoming_posts']:
                response += f"‚Ä¢ {post['time']}: {post['topic']}\n"
            response += "\n"
        else:
            response += "üì≠ –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤\n\n"
        
        response += "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
        for status, count in stats['stats'].items():
            status_emoji = {
                'scheduled': '‚è∞',
                'published': '‚úÖ', 
                'error': '‚ùå'
            }.get(status, 'üìù')
            response += f"‚Ä¢ {status_emoji} {status}: {count}\n"
        
        if update.message:
            await update.message.reply_text(response, parse_mode='Markdown')
        elif update.callback_query:
            await update.callback_query.edit_message_text(response, parse_mode='Markdown')
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤: {e}")
        error_text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤"
        if update.message:
            await update.message.reply_text(error_text)
        elif update.callback_query:
            await update.callback_query.edit_message_text(error_text)

async def check_permissions_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ"""
    try:
        if update.message:
            await update.message.reply_text("üîç –ü—Ä–æ–≤–µ—Ä—è—é –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ...")
        elif update.callback_query:
            await update.callback_query.edit_message_text("üîç –ü—Ä–æ–≤–µ—Ä—è—é –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ...")
        
        has_permissions = await check_bot_permissions(context.application)
        
        if has_permissions:
            response = (
                "‚úÖ **–ü—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –ø–æ—Ä—è–¥–∫–µ!**\n\n"
                "–ë–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞ –∏ –º–æ–∂–µ—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç—ã."
            )
        else:
            response = (
                "‚ùå **–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø—Ä–∞–≤–∞–º–∏ –±–æ—Ç–∞!**\n\n"
                "–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n"
                "1. –ó–∞–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞\n"
                "2. –í—ã–±–µ—Ä–∏—Ç–µ '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã'\n" 
                "3. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ @MamaAIBot\n"
                "4. –î–∞–π—Ç–µ –ø—Ä–∞–≤–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π\n\n"
                "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /check_permissions —Å–Ω–æ–≤–∞."
            )
        
        if update.message:
            await update.message.reply_text(response, parse_mode='Markdown')
        elif update.callback_query:
            await update.callback_query.edit_message_text(response, parse_mode='Markdown')
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤: {e}")
        error_text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤"
        if update.message:
            await update.message.reply_text(error_text)
        elif update.callback_query:
            await update.callback_query.edit_message_text(error_text)

async def force_check_scheduled_posts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤"""
    try:
        await update.message.reply_text("üîç –ü—Ä–æ–≤–µ—Ä—è—é –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã...")
        await context.application.context_data['post_scheduler']._check_scheduled_posts()
        await update.message.reply_text("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ")

async def force_auto_post(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –∞–≤—Ç–æ-–ø–æ—Å—Ç–∞"""
    try:
        post_type = context.args[0] if context.args else "morning"
        
        if post_type not in ["morning", "evening"]:
            await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /force_auto_post morning –∏–ª–∏ /force_auto_post evening")
            return
        
        auto_post_scheduler = context.application.context_data['auto_post_scheduler']
        await auto_post_scheduler._publish_post(post_type)
        await update.message.reply_text(f"‚úÖ {post_type} –ø–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞")

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò CALLBACK ===
async def handle_all_callbacks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user = query.from_user
    data = query.data
    
    logger.info(f"üîî Callback: {data} –æ—Ç {user.id}")
    
    if data in ["stats", "status", "auto_posts", "create_post", "content_plan", "help", "scheduled_posts", "check_permissions", "main_menu"]:
        await handle_main_menu_callback(update, context)
    elif any(data.startswith(prefix) for prefix in ["tone_", "length_", "emojis_", "publish_now", "schedule_later"]):
        await handle_post_creation_callback(update, context)
    else:
        await handle_content_plan_callback(update, context)

async def handle_main_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data
    
    try:
        if data == "stats":
            await stats_command(update, context)
        elif data == "status":
            await status_command(update, context)
        elif data == "auto_posts":
            await query.edit_message_text("ü§ñ –ê–≤—Ç–æ-–ø–æ—Å—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é! ‚úÖ", parse_mode='Markdown')
        elif data == "create_post":
            await create_post_command(update, context)
        elif data == "content_plan":
            await content_plan_command(update, context)
        elif data == "scheduled_posts":
            await scheduled_posts_command(update, context)
        elif data == "check_permissions":
            await check_permissions_command(update, context)
        elif data == "help":
            await help_command(update, context)
        elif data == "main_menu":
            await start_command(update, context)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –º–µ–Ω—é: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

async def handle_post_creation_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data
    
    if data.startswith('tone_'):
        tone = data.split('_')[1]
        context.user_data['post_tone'] = tone
        context.user_data['post_stage'] = 'main_idea'
        
        await query.edit_message_text(
            "üí° **–®–∞–≥ 3 –∏–∑ 5:** –í–≤–µ–¥–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—É—é –º—ã—Å–ª—å –ø–æ—Å—Ç–∞:",
            parse_mode='Markdown'
        )
    
    elif data.startswith('length_'):
        length = data.split('_')[1]
        context.user_data['post_length'] = length
        context.user_data['post_stage'] = 'emojis'
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –°–æ —Å–º–∞–π–ª–∏–∫–∞–º–∏", callback_data="emojis_yes")],
            [InlineKeyboardButton("‚ùå –ë–µ–∑ —Å–º–∞–π–ª–∏–∫–æ–≤", callback_data="emojis_no")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üòä **–®–∞–≥ 5 –∏–∑ 5:** –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–º–∞–π–ª–∏–∫–∏ –≤ –ø–æ—Å—Ç–µ?",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    elif data.startswith('emojis_'):
        use_emojis = data.split('_')[1] == 'yes'
        context.user_data['post_emojis'] = use_emojis
        
        await query.edit_message_text("ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–æ—Å—Ç... ‚è≥")
        
        try:
            generated_post = await context.application.context_data['response_generator'].generate_post(
                topic=context.user_data['post_topic'],
                tone=context.user_data['post_tone'],
                main_idea=context.user_data['post_main_idea'],
                use_emojis=use_emojis,
                length=context.user_data['post_length']
            )
            
            context.user_data['generated_post'] = generated_post
            context.user_data['post_stage'] = 'schedule'
            
            keyboard = [
                [InlineKeyboardButton("‚è∞ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å", callback_data="publish_now")],
                [InlineKeyboardButton("üìÖ –û—Ç–ª–æ–∂–∏—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é", callback_data="schedule_later")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                f"üìù **–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç:**\n\n{generated_post}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞")
    
    elif data == 'publish_now':
        try:
            success = await send_message_with_fallback(context.application, CHANNEL_ID, context.user_data['generated_post'])
            
            if success:
                cursor = context.application.context_data['db'].execute_with_datetime('''
                    INSERT INTO scheduled_posts 
                    (user_id, post_text, scheduled_time, channel_id, tone, topic, length, main_idea, status)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
                ''', (
                    query.from_user.id,
                    context.user_data['generated_post'],
                    datetime.now(),
                    CHANNEL_ID,
                    context.user_data['post_tone'],
                    context.user_data['post_topic'],
                    context.user_data['post_length'],
                    context.user_data['post_main_idea'],
                    'published'
                ))
                context.application.context_data['db'].conn.commit()
                
                context.user_data.clear()
                await query.edit_message_text("‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!", parse_mode='Markdown')
            else:
                await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç")
            
        except Forbidden as e:
            if "bot is not a member" in str(e):
                await query.edit_message_text(
                    "‚ùå –ë–æ—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª!\n\n"
                    "–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n"
                    "1. –ó–∞–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞\n"
                    "2. –í—ã–±–µ—Ä–∏—Ç–µ '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã'\n"
                    "3. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ @MamaAIBot\n"
                    "4. –î–∞–π—Ç–µ –ø—Ä–∞–≤–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π\n\n"
                    "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                )
            else:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞")
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞")
    
    elif data == 'schedule_later':
        context.user_data['post_stage'] = 'schedule_time'
        await query.edit_message_text(
            "‚è∞ **–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏**\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:\n\n"
            "‚Ä¢ **–°–µ–π—á–∞—Å** - –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ\n"
            "‚Ä¢ **–ß–µ—Ä–µ–∑ 2 —á–∞—Å–∞** - —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è\n"
            "‚Ä¢ **–ó–∞–≤—Ç—Ä–∞ 15:30** - –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è",
            parse_mode='Markdown'
        )

async def handle_content_plan_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data
    
    if data == "content_plan_weekly":
        await context.application.context_data['content_plan_manager'].create_content_plan(update, context, "weekly")
    elif data == "content_plan_monthly":
        await context.application.context_data['content_plan_manager'].create_content_plan(update, context, "monthly")
    elif data.startswith('plan_tone_'):
        tone = data.split('_')[2]
        context.user_data['content_plan_tone'] = tone
        context.user_data['content_plan_stage'] = 'posts_count'
        
        await query.edit_message_text(
            "ÔøΩÔøΩ **–®–∞–≥ 3 –∏–∑ 3:** –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ (1-50):",
            parse_mode='Markdown'
        )

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–®–ò–ë–û–ö ===
async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"‚ùå –û—à–∏–±–∫–∞: {context.error}", exc_info=context.error)
    
    try:
        if update and update.callback_query:
            await update.callback_query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
        elif update and update.message:
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –æ—à–∏–±–æ–∫: {e}")

# === –ù–ê–°–¢–†–û–ô–ö–ê –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í ===
def setup_handlers(app: Application):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    app.add_error_handler(error_handler)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(CommandHandler("stats", stats_command))
    app.add_handler(CommandHandler("status", status_command))
    app.add_handler(CommandHandler("test_post", test_post_command))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("create_post", create_post_command))
    app.add_handler(CommandHandler("content_plan", content_plan_command))
    app.add_handler(CommandHandler("scheduled_posts", scheduled_posts_command))
    app.add_handler(CommandHandler("check_permissions", check_permissions_command))
    app.add_handler(CommandHandler("force_check", force_check_scheduled_posts))
    
    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback
    app.add_handler(CallbackQueryHandler(handle_all_callbacks))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    app.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND & (
            filters.ChatType.PRIVATE | 
            filters.ChatType.GROUPS | 
            filters.ChatType.SUPERGROUP
        ), 
        handle_all_messages
    ))
