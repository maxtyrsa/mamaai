import re
import json
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters
from telegram.error import Forbidden, NetworkError, TimedOut, BadRequest

from config import CHANNEL_ID, Config
from utils import send_message_with_fallback, check_bot_permissions
from keyboards import (
    get_main_menu_keyboard,
    get_tone_keyboard,
    get_length_keyboard,
    get_content_plan_type_keyboard
)

logger = logging.getLogger(__name__)

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
async def is_admin_user(bot, user_id: int, chat_id: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞"""
    try:
        administrators = await bot.get_chat_administrators(chat_id)
        admin_ids = [admin.user.id for admin in administrators if admin.user]
        return user_id in admin_ids
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
        return False

async def is_channel_post(message) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–º –∫–∞–Ω–∞–ª–∞"""
    if not message:
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Ç –∏–º–µ–Ω–∏ –∫–∞–Ω–∞–ª–∞
    if hasattr(message, 'sender_chat') and message.sender_chat:
        return message.sender_chat.id == int(CHANNEL_ID)
    
    return False

def is_auto_post_message(text: str) -> bool:
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–≤—Ç–æ-–ø–æ—Å—Ç—ã –±–æ—Ç–∞"""
    if not text:
        return False
    
    text_lower = text.lower().strip()
    
    # –¢–æ–ª—å–∫–æ —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å –Ω–∞—á–∞–ª–æ–º –∞–≤—Ç–æ-–ø–æ—Å—Ç–æ–≤
    auto_post_starts = [
        "–ø—Ä–æ—Å—ã–ø–∞–π—Ç–µ—Å—å —Å —É–ª—ã–±–∫–æ–π",
        "–Ω–æ–≤—ã–π –¥–µ–Ω—å - –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏",
        "–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ",
        "–≤–µ—á–µ—Ä –Ω–∞–∫—Ä—ã–≤–∞–µ—Ç –≥–æ—Ä–æ–¥",
        "—Å–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏", 
        "üß™ —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç",
        "‚òÄÔ∏è –Ω–æ–≤–æ–µ —É—Ç—Ä–æ ‚Äî –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏",
        "üåô –≤–µ—á–µ—Ä –Ω–∞—Å—Ç—É–ø–∞–µ—Ç",
        "‚ú® –¥–µ–Ω—å –ø–æ–¥—Ö–æ–¥–∏—Ç –∫ –∫–æ–Ω—Ü—É",
        "üåÖ —É—Ç—Ä–æ ‚Äî –≤—Ä–µ–º—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å"
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
    for phrase in auto_post_starts:
        if text_lower.startswith(phrase.lower()):
            logger.info(f"‚è© –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –∞–≤—Ç–æ-–ø–æ—Å—Ç–æ–º: {phrase}")
            return True
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–º–∏ —É—Å–ª–æ–≤–∏—è–º–∏
    morning_indicators = ['—É—Ç—Ä–æ', '—É—Ç—Ä–µ–Ω', '–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ', '–ø—Ä–æ—Å—ã–ø–∞–π', '–Ω–æ–≤—ã–π –¥–µ–Ω—å', '—Å–æ–ª–Ω—Ü', '—Ä–∞—Å—Å–≤–µ—Ç']
    evening_indicators = ['–≤–µ—á–µ—Ä', '–Ω–æ—á—å', '—Å–æ–Ω', '–æ—Ç–¥—ã—Ö', '—Å–ø–æ–∫–æ–π–Ω–æ–π', '–∑–∞–∫–∞—Ç', '–ª—É–Ω–∞', '–∑–≤–µ–∑–¥', '—Ä–∞—Å—Å–ª–∞–±', '–≤–æ—Å—Å—Ç–∞–Ω–æ–≤']
    
    # –°—á–∏—Ç–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–≤—Ç–æ-–ø–æ—Å—Ç–æ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –ò —Ç–µ–∫—Å—Ç –ø–æ—Ö–æ–∂ –Ω–∞ –∞–≤—Ç–æ-–ø–æ—Å—Ç
    morning_count = sum(1 for indicator in morning_indicators if indicator in text_lower)
    evening_count = sum(1 for indicator in evening_indicators if indicator in text_lower)
    
    # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –ò —Ç–µ–∫—Å—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω—ã–π (–∫–∞–∫ –∞–≤—Ç–æ-–ø–æ—Å—Ç)
    if (morning_count >= 2 or evening_count >= 2) and len(text) > 100:
        logger.info(f"‚è© –û–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ –∞–≤—Ç–æ-–ø–æ—Å—Ç –ø–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º: —É—Ç—Ä–æ={morning_count}, –≤–µ—á–µ—Ä={evening_count}")
        return True
    
    return False

async def should_process_message(message) -> bool:
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    if not message or not message.text:
        logger.info("‚è© –ü—Ä–æ–ø—É—â–µ–Ω–æ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return False
    
    text = message.text.strip()
    if not text:
        logger.info("‚è© –ü—Ä–æ–ø—É—â–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—É—Å—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–º")
        return False
    
    user_info = f"{message.from_user.first_name or '–ê–Ω–æ–Ω–∏–º'} ({message.from_user.id})"
    
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ—Å—Ç—ã –∫–∞–Ω–∞–ª–∞
    if await is_channel_post(message):
        logger.info(f"‚è© –ü—Ä–æ–ø—É—â–µ–Ω –ø–æ—Å—Ç –∫–∞–Ω–∞–ª–∞ –æ—Ç {user_info}: {text[:50]}...")
        return False
    
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ—Å—Ç—ã –±–æ—Ç–∞ (–±–æ–ª–µ–µ —Ç–æ—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
    if is_auto_post_message(text):
        logger.info(f"‚è© –ü—Ä–æ–ø—É—â–µ–Ω –∞–≤—Ç–æ-–ø–æ—Å—Ç –æ—Ç {user_info}: {text[:50]}...")
        return False
    
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–≤–æ–∑–º–æ–∂–Ω–æ, –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã)
    if len(text) < 2:
        logger.info(f"‚è© –ü—Ä–æ–ø—É—â–µ–Ω–æ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_info}: '{text}'")
        return False
    
    logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –æ—Ç {user_info}: {text[:50]}...")
    return True

class NotificationSystem:
    def __init__(self, app, db):
        self.app = app
        self.db = db
    
    async def notify_admins(self, message: str, include_buttons: bool = False):
        admins = await self.get_channel_admins()
        
        for admin_id in admins:
            try:
                if include_buttons:
                    keyboard = [
                        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
                        [InlineKeyboardButton("üõë –°—Ç–æ–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="mute_notifications")]
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    await self.app.bot.send_message(
                        admin_id, message, reply_markup=reply_markup
                    )
                else:
                    await self.app.bot.send_message(admin_id, message)
            except Exception as e:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
    
    async def get_channel_admins(self) -> list:
        try:
            administrators = await self.app.bot.get_chat_administrators(CHANNEL_ID)
            return [
                admin.user.id for admin in administrators 
                if admin.user and not admin.user.is_bot
            ]
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {e}")
            return []

class PostCreator:
    def __init__(self, response_generator, db):
        self.response_generator = response_generator
        self.db = db
    
    async def handle_post_creation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not context.user_data.get('creating_post'):
            return
        
        user = update.effective_user
        message = update.effective_message
        
        stage = context.user_data.get('post_stage')
        logger.info(f"üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞, —Å—Ç–∞–¥–∏—è: {stage}")
        
        if stage == 'topic':
            context.user_data['post_topic'] = message.text
            context.user_data['post_stage'] = 'tone'
            
            reply_markup = get_tone_keyboard()
            
            await message.reply_text(
                "üé≠ **–®–∞–≥ 2 –∏–∑ 5:** –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–Ω –ø–æ—Å—Ç–∞:",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        
        elif stage == 'main_idea':
            context.user_data['post_main_idea'] = message.text
            context.user_data['post_stage'] = 'length'
            
            reply_markup = get_length_keyboard()
            
            await message.reply_text(
                "üìè **–®–∞–≥ 4 –∏–∑ 5:** –í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏–Ω—É –ø–æ—Å—Ç–∞:",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        
        elif stage == 'schedule_time':
            try:
                schedule_time = self.parse_schedule_time(message.text)
                if schedule_time:
                    logger.info(f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –≤—Ä–µ–º—è: {schedule_time}")
                    await self.schedule_post(update, context, schedule_time)
                else:
                    await message.reply_text(
                        "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤—Ä–µ–º—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: '—Å–µ–π—á–∞—Å', '—á–µ—Ä–µ–∑ 2 —á–∞—Å–∞', '–∑–∞–≤—Ç—Ä–∞ 09:00'",
                        parse_mode='Markdown'
                    )
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞: {e}")
                await message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞")

    def parse_schedule_time(self, text: str):
        text = text.lower().strip()
        now = datetime.now()
        
        if text in ['—Å–µ–π—á–∞—Å', '–Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ', 'now', '—Å—Ä–∞–∑—É']:
            return now
        
        match = re.search(r'—á–µ—Ä–µ–∑\s*(\d+)\s*(—á–∞—Å|—á–∞—Å–∞|—á–∞—Å–æ–≤|–º–∏–Ω—É—Ç|–º–∏–Ω—É—Ç—ã|–º–∏–Ω—É—Ç—É)', text)
        if match:
            amount = int(match.group(1))
            unit = match.group(2)
            
            if unit in ['—á–∞—Å', '—á–∞—Å–∞', '—á–∞—Å–æ–≤']:
                return now + timedelta(hours=amount)
            elif unit in ['–º–∏–Ω—É—Ç', '–º–∏–Ω—É—Ç—ã', '–º–∏–Ω—É—Ç—É']:
                return now + timedelta(minutes=amount)
        
        match = re.search(r'–∑–∞–≤—Ç—Ä–∞\s*–≤\s*(\d{1,2})[:\s]?(\d{2})?', text)
        if match:
            hour = int(match.group(1))
            minute = int(match.group(2) or 0)
            tomorrow = now + timedelta(days=1)
            try:
                return tomorrow.replace(hour=hour, minute=minute, second=0, microsecond=0)
            except ValueError:
                return None
        
        return None

    async def schedule_post(self, update: Update, context: ContextTypes.DEFAULT_TYPE, schedule_time: datetime):
        user = update.effective_user
        post_data = context.user_data
        
        required_data = ['generated_post', 'post_tone', 'post_topic', 'post_length', 'post_main_idea']
        missing_data = [key for key in required_data if key not in post_data or not post_data[key]]
        
        if missing_data:
            logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ: {missing_data}")
            await update.effective_message.reply_text("‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞")
            context.user_data.clear()
            return
        
        topic = post_data['post_topic']
        tone = post_data['post_tone']
        main_idea = post_data['post_main_idea']
        length = post_data['post_length']
        generated_post = post_data['generated_post']
        
        try:
            cursor = self.db.execute_with_datetime('''
                INSERT INTO scheduled_posts 
                (user_id, post_text, scheduled_time, channel_id, tone, topic, length, main_idea, status)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                user.id,
                generated_post,
                schedule_time,
                CHANNEL_ID,
                tone,
                topic,
                length,
                main_idea,
                'scheduled'
            ))
            self.db.conn.commit()
            
            post_id = cursor.lastrowid
            logger.info(f"‚úÖ –ü–æ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ID={post_id}, —Ç–µ–º–∞='{topic}', –≤—Ä–µ–º—è='{schedule_time}'")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å—Ç–∞: {e}")
            await update.effective_message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞")
            return
        
        context.user_data.clear()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
        time_diff = (schedule_time - datetime.now()).total_seconds()
        
        if time_diff <= 60:  # –ï—Å–ª–∏ –º–µ–Ω–µ–µ 60 —Å–µ–∫—É–Ω–¥ –¥–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            try:
                success = await send_message_with_fallback(context.application, CHANNEL_ID, generated_post)
                
                if success:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ
                    cursor = self.db.execute_with_datetime('''
                        UPDATE scheduled_posts 
                        SET status = 'published'
                        WHERE id = ?
                    ''', (post_id,))
                    self.db.conn.commit()
                    
                    status = "‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!"
                    logger.info(f"‚úÖ –ü–æ—Å—Ç {post_id} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ")
                else:
                    status = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞"
                    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç {post_id}")
                
            except Forbidden as e:
                if "bot is not a member" in str(e):
                    status = "‚ùå –ë–æ—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
                    logger.error(f"‚ùå {status}")
                else:
                    status = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞"
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
                status = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞"
        else:
            status = f"‚úÖ –ü–æ—Å—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {schedule_time.strftime('%d.%m.%Y %H:%M')}"
            logger.info(f"‚úÖ –ü–æ—Å—Ç {post_id} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {schedule_time}")
        
        await update.effective_message.reply_text(
            f"{status}\n\n"
            f"üìù –¢–µ–º–∞: {topic}\n"
            f"üé≠ –¢–æ–Ω: {tone}\n"
            f"üí° –ò–¥–µ—è: {main_idea}\n"
            f"üÜî ID –ø–æ—Å—Ç–∞: {post_id}",
            parse_mode='Markdown'
        )

    async def generate_post_from_plan(self, update: Update, context: ContextTypes.DEFAULT_TYPE, plan_id: int, post_index: int = 0):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞ –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞"""
        user = update.effective_user
        query = update.callback_query
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω –∏–∑ –±–∞–∑—ã
            cursor = self.db.conn.cursor()
            cursor.execute('''
                SELECT plan_data FROM content_plans 
                WHERE id = ? AND user_id = ?
            ''', (plan_id, user.id))
            
            result = cursor.fetchone()
            if not result:
                await query.edit_message_text("‚ùå –ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            plan_data = json.loads(result[0]) if result[0] else {}
            posts = plan_data.get('plan', [])
            
            if not posts:
                await query.edit_message_text("‚ùå –í –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–µ –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤")
                return
            
            if post_index >= len(posts):
                await query.edit_message_text("‚ùå –£–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–ª–∞–Ω–µ")
                return
            
            post_data = posts[post_index]
            
            await query.edit_message_text("ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–æ—Å—Ç –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞... ‚è≥")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞
            generated_post = await self.response_generator.generate_post_from_plan_data(post_data)
            
            if not generated_post:
                await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç")
                return
            
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ—Å—Ç–æ–º
            keyboard = [
                [InlineKeyboardButton("‚è∞ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å", callback_data=f"publish_plan_post_{plan_id}_{post_index}")],
                [InlineKeyboardButton("üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"schedule_plan_post_{plan_id}_{post_index}")],
                [InlineKeyboardButton("üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π", callback_data=f"regenerate_plan_post_{plan_id}_{post_index}")],
                [InlineKeyboardButton("üìã –ö –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω—É", callback_data=f"plan_nav_{post_index}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            post_info = f"**–¢–µ–º–∞:** {post_data.get('topic', '–ë–µ–∑ —Ç–µ–º—ã')}\n"
            post_info += f"**–¢–∏–ø:** {post_data.get('post_type', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            post_info += f"**–¢–æ–Ω:** {post_data.get('tone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
            
            await query.edit_message_text(
                f"üìù **–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞:**\n\n"
                f"{post_info}"
                f"{generated_post}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞")

    async def publish_plan_post(self, update: Update, context: ContextTypes.DEFAULT_TYPE, plan_id: int, post_index: int):
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞ –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞"""
        user = update.effective_user
        query = update.callback_query
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞
            cursor = self.db.conn.cursor()
            cursor.execute('''
                SELECT plan_data, plan_name FROM content_plans 
                WHERE id = ? AND user_id = ?
            ''', (plan_id, user.id))
            
            result = cursor.fetchone()
            if not result:
                await query.edit_message_text("‚ùå –ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            plan_data_json, plan_name = result
            plan_data = json.loads(plan_data_json) if plan_data_json else {}
            posts = plan_data.get('plan', [])
            
            if post_index >= len(posts):
                await query.edit_message_text("‚ùå –£–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–ª–∞–Ω–µ")
                return
            
            post_data = posts[post_index]
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ—Å—Ç
            generated_post = await self.response_generator.generate_post_from_plan_data(post_data)
            
            if not generated_post:
                await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç")
                return
            
            # –ü—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç
            success = await send_message_with_fallback(context.application, CHANNEL_ID, generated_post)
            
            if success:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –∫–∞–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç
                cursor = self.db.execute_with_datetime('''
                    INSERT INTO scheduled_posts 
                    (user_id, post_text, scheduled_time, channel_id, tone, topic, length, main_idea, status)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
                ''', (
                    user.id,
                    generated_post,
                    datetime.now(),
                    CHANNEL_ID,
                    post_data.get('tone', 'friendly'),
                    post_data.get('topic', '–ë–µ–∑ —Ç–µ–º—ã'),
                    'medium',
                    post_data.get('main_idea', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'),
                    'published'
                ))
                self.db.conn.commit()
                
                post_id = cursor.lastrowid
                
                await query.edit_message_text(
                    f"‚úÖ **–ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!**\n\n"
                    f"üìù –¢–µ–º–∞: {post_data.get('topic', '–ë–µ–∑ —Ç–µ–º—ã')}\n"
                    f"üìÖ –ò–∑ –ø–ª–∞–Ω–∞: {plan_name}\n"
                    f"üÜî ID –ø–æ—Å—Ç–∞: {post_id}\n\n"
                    f"–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ! üéâ",
                    parse_mode='Markdown'
                )
                logger.info(f"‚úÖ –ü–æ—Å—Ç {post_id} –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞ {plan_id} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω")
            else:
                await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç")
                
        except Forbidden as e:
            if "bot is not a member" in str(e):
                await query.edit_message_text(
                    "‚ùå –ë–æ—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª!\n\n"
                    "–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
                )
            else:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞")
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞: {e}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞")

    async def schedule_plan_post(self, update: Update, context: ContextTypes.DEFAULT_TYPE, plan_id: int, post_index: int):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞"""
        user = update.effective_user
        query = update.callback_query
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
        context.user_data['scheduling_plan_post'] = True
        context.user_data['plan_id'] = plan_id
        context.user_data['post_index'] = post_index
        
        await query.edit_message_text(
            "‚è∞ **–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞**\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:\n\n"
            "‚Ä¢ **–°–µ–π—á–∞—Å** - –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ\n"
            "‚Ä¢ **–ß–µ—Ä–µ–∑ 2 —á–∞—Å–∞** - —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è\n"
            "‚Ä¢ **–ó–∞–≤—Ç—Ä–∞ 15:30** - –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è\n"
            "‚Ä¢ **01.01.2024 10:00** - –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è",
            parse_mode='Markdown'
        )

    async def handle_plan_post_scheduling(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞ –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞"""
        if not context.user_data.get('scheduling_plan_post'):
            return
        
        user = update.effective_user
        message = update.effective_message
        plan_id = context.user_data.get('plan_id')
        post_index = context.user_data.get('post_index')
        
        try:
            schedule_time = self.parse_schedule_time(message.text)
            if not schedule_time:
                await message.reply_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤—Ä–µ–º—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: '—Å–µ–π—á–∞—Å', '—á–µ—Ä–µ–∑ 2 —á–∞—Å–∞', '–∑–∞–≤—Ç—Ä–∞ 09:00'",
                    parse_mode='Markdown'
                )
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç–∞
            cursor = self.db.conn.cursor()
            cursor.execute('''
                SELECT plan_data, plan_name FROM content_plans 
                WHERE id = ? AND user_id = ?
            ''', (plan_id, user.id))
            
            result = cursor.fetchone()
            if not result:
                await message.reply_text("‚ùå –ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
                context.user_data.clear()
                return
            
            plan_data_json, plan_name = result
            plan_data = json.loads(plan_data_json) if plan_data_json else {}
            posts = plan_data.get('plan', [])
            
            if post_index >= len(posts):
                await message.reply_text("‚ùå –£–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–ª–∞–Ω–µ")
                context.user_data.clear()
                return
            
            post_data = posts[post_index]
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ—Å—Ç
            generated_post = await self.response_generator.generate_post_from_plan_data(post_data)
            
            if not generated_post:
                await message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç")
                context.user_data.clear()
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç
            cursor = self.db.execute_with_datetime('''
                INSERT INTO scheduled_posts 
                (user_id, post_text, scheduled_time, channel_id, tone, topic, length, main_idea, status)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                user.id,
                generated_post,
                schedule_time,
                CHANNEL_ID,
                post_data.get('tone', 'friendly'),
                post_data.get('topic', '–ë–µ–∑ —Ç–µ–º—ã'),
                'medium',
                post_data.get('main_idea', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'),
                'scheduled'
            ))
            self.db.conn.commit()
            
            post_id = cursor.lastrowid
            
            context.user_data.clear()
            
            await message.reply_text(
                f"‚úÖ **–ü–æ—Å—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω!**\n\n"
                f"üìù –¢–µ–º–∞: {post_data.get('topic', '–ë–µ–∑ —Ç–µ–º—ã')}\n"
                f"üìÖ –ò–∑ –ø–ª–∞–Ω–∞: {plan_name}\n"
                f"‚è∞ –í—Ä–µ–º—è: {schedule_time.strftime('%d.%m.%Y %H:%M')}\n"
                f"üÜî ID –ø–æ—Å—Ç–∞: {post_id}\n\n"
                f"–ü–æ—Å—Ç –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è! üéâ",
                parse_mode='Markdown'
            )
            logger.info(f"‚úÖ –ü–æ—Å—Ç {post_id} –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞ {plan_id} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {schedule_time}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞ –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞: {e}")
            await message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞")
            context.user_data.clear()

class ContentPlanManager:
    def __init__(self, response_generator, db):
        self.response_generator = response_generator
        self.db = db
    
    async def create_content_plan(self, update: Update, context: ContextTypes.DEFAULT_TYPE, plan_type: str):
        user = update.effective_user
        
        context.user_data['content_plan_type'] = plan_type
        context.user_data['content_plan_stage'] = 'niche'
        
        await update.callback_query.edit_message_text(
            f"üìÖ **–°–æ–∑–¥–∞–Ω–∏–µ {plan_type} –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞**\n\n"
            "üéØ **–®–∞–≥ 1 –∏–∑ 4:** –í–≤–µ–¥–∏—Ç–µ –Ω–∏—à—É –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞:",
            parse_mode='Markdown'
        )
    
    async def handle_content_plan_creation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        message = update.effective_message
        
        if not context.user_data.get('content_plan_stage'):
            return
        
        stage = context.user_data.get('content_plan_stage')
        logger.info(f"üìÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞, —Å—Ç–∞–¥–∏—è: {stage}")
        
        if stage == 'niche':
            context.user_data['content_plan_niche'] = message.text
            context.user_data['content_plan_stage'] = 'audience'
            
            await message.reply_text(
                "üë• **–®–∞–≥ 2 –∏–∑ 4:** –û–ø–∏—à–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é –∫–∞–Ω–∞–ª–∞:\n\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: '–º–æ–ª–æ–¥—ã–µ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª–∏', 'IT-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã', '—Å—Ç—É–¥–µ–Ω—Ç—ã' –∏ —Ç.–¥.",
                parse_mode='Markdown'
            )
        
        elif stage == 'audience':
            context.user_data['content_plan_audience'] = message.text
            context.user_data['content_plan_stage'] = 'tone'
            
            reply_markup = get_tone_keyboard("plan_tone")
            
            await message.reply_text(
                "üé≠ **–®–∞–≥ 3 –∏–∑ 4:** –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–Ω –∫–æ–Ω—Ç–µ–Ω—Ç–∞:",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
        
        elif stage == 'posts_count':
            try:
                posts_count = int(message.text)
                if posts_count < 1 or posts_count > 50:
                    await message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 50")
                    return
                
                context.user_data['content_plan_posts_count'] = posts_count
                await self.generate_content_plan(update, context)
                
            except ValueError:
                await message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")

    async def generate_content_plan(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        plan_data = context.user_data
        
        await update.effective_message.reply_text("ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω... ‚è≥")
        
        try:
            content_plan = await self.response_generator.generate_content_plan(
                plan_type=plan_data['content_plan_type'],
                niche=plan_data['content_plan_niche'],
                tone=plan_data['content_plan_tone'],
                posts_per_week=plan_data.get('content_plan_posts_count', 7),
                audience=plan_data.get('content_plan_audience', '–ø–æ–¥–ø–∏—Å—á–∏–∫–∏ Telegram-–∫–∞–Ω–∞–ª–∞'),
                goals=plan_data.get('content_plan_goals', '–≤–æ–≤–ª–µ—á–µ–Ω–∏–µ –∏ —Ä–æ—Å—Ç –∞—É–¥–∏—Ç–æ—Ä–∏–∏')
            )
            
            plan_name = f"{plan_data['content_plan_type']} –ø–ª–∞–Ω - {plan_data['content_plan_niche']}"
            
            cursor = self.db.execute_with_datetime('''
                INSERT INTO content_plans 
                (user_id, plan_name, plan_type, start_date, end_date, plan_data)
                VALUES (?, ?, ?, ?, ?, ?)
            ''', (
                user.id,
                plan_name,
                plan_data['content_plan_type'],
                datetime.now().date().isoformat(),
                (datetime.now() + timedelta(days=30 if plan_data['content_plan_type'] == 'monthly' else 7)).date().isoformat(),
                json.dumps(content_plan, ensure_ascii=False)
            ))
            self.db.conn.commit()
            
            await self.show_content_plan(update, context, content_plan, plan_name)
            context.user_data.clear()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞: {e}")
            await update.effective_message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞")

    async def show_content_plan(self, update: Update, context: ContextTypes.DEFAULT_TYPE, content_plan: dict, plan_name: str):
        plan_text = f"üìÖ **{plan_name}**\n\n"
        
        for i, post in enumerate(content_plan.get('plan', [])[:5]):
            if 'day' in post:
                plan_text += f"**{post['day']}**\n"
            elif 'date' in post:
                plan_text += f"**{post['date']}**\n"
            
            plan_text += f"üéØ –¢–µ–º–∞: {post.get('topic', '–ë–µ–∑ —Ç–µ–º—ã')}\n"
            plan_text += f"üìù –¢–∏–ø: {post.get('post_type', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            plan_text += f"üí° –ò–¥–µ—è: {post.get('main_idea', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')}\n"
            plan_text += f"üé≠ –¢–æ–Ω: {post.get('tone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            plan_text += f"üîó –í–æ–≤–ª–µ—á–µ–Ω–∏–µ: {post.get('engagement_elements', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            plan_text += f"üè∑Ô∏è –•–µ—à—Ç–µ–≥–∏: {post.get('hashtags', '–ù–µ —É–∫–∞–∑–∞–Ω—ã')}\n\n"
        
        plan_text += "‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω!"
        
        keyboard = [
            [InlineKeyboardButton("üìã –ú–æ–∏ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω—ã", callback_data="my_content_plans")],
            [InlineKeyboardButton("‚Ü©Ô∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.effective_message.reply_text(
            plan_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    async def get_user_content_plans(self, user_id: int) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        cursor = self.db.conn.cursor()
        cursor.execute('''
            SELECT id, plan_name, plan_type, start_date, end_date, plan_data, created_at
            FROM content_plans 
            WHERE user_id = ? AND status = 'active'
            ORDER BY created_at DESC
        ''', (user_id,))
        
        plans = []
        for row in cursor.fetchall():
            plan_id, plan_name, plan_type, start_date, end_date, plan_data, created_at = row
            try:
                plan_json = json.loads(plan_data) if plan_data else {}
                plans.append({
                    'id': plan_id,
                    'name': plan_name,
                    'type': plan_type,
                    'start_date': start_date,
                    'end_date': end_date,
                    'plan_data': plan_json,
                    'created_at': created_at
                })
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞ {plan_id}: {e}")
        
        return plans

# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===
async def get_user_display_name(user, message) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω–æ–µ –∏–º—è
        if user.first_name and user.first_name.lower() != "telegram":
            if user.last_name:
                return f"{user.first_name} {user.last_name}"
            return user.first_name
        
        # –ü—Ä–æ–±—É–µ–º username
        if user.username:
            return f"@{user.username}"
        
        # –î–ª—è –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∫–∞–Ω–∞–ª–∞—Ö
        if hasattr(message, 'sender_chat') and message.sender_chat:
            return message.sender_chat.title or "—É—á–∞—Å—Ç–Ω–∏–∫ –∫–∞–Ω–∞–ª–∞"
            
        return "–¥—Ä—É–≥"
    except Exception:
        return "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
       
async def check_messages_status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ë–î"""
    try:
        db = context.bot_data['db']
        cursor = db.conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º —Å–æ–æ–±—â–µ–Ω–∏–π
        cursor.execute('''
            SELECT 
                COUNT(*) as total,
                SUM(CASE WHEN is_spam IS NULL AND response_text IS NULL THEN 1 ELSE 0 END) as unprocessed,
                SUM(CASE WHEN is_spam = 1 THEN 1 ELSE 0 END) as spam,
                SUM(CASE WHEN is_spam = 0 THEN 1 ELSE 0 END) as legitimate,
                SUM(CASE WHEN is_spam IS NOT NULL AND response_text IS NULL THEN 1 ELSE 0 END) as processed_no_response,
                SUM(CASE WHEN is_spam IS NULL AND response_text IS NOT NULL THEN 1 ELSE 0 END) as response_no_spam_flag
            FROM message_history 
            WHERE timestamp >= datetime('now', '-24 hours')
        ''')
        
        stats = cursor.fetchone()
        
        response = "üìä **–°—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞:**\n\n"
        response += f"‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats[0] or 0}\n"
        response += f"‚Ä¢ –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö: {stats[1] or 0}\n"
        response += f"‚Ä¢ –°–ø–∞–º: {stats[2] or 0}\n"
        response += f"‚Ä¢ –õ–µ–≥–∏—Ç–∏–º–Ω—ã—Ö: {stats[3] or 0}\n"
        response += f"‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –±–µ–∑ –æ—Ç–≤–µ—Ç–∞: {stats[4] or 0}\n"
        response += f"‚Ä¢ –û—Ç–≤–µ—Ç –±–µ–∑ —Ñ–ª–∞–≥–∞ —Å–ø–∞–º–∞: {stats[5] or 0}\n\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
        cursor.execute('''
            SELECT id, user_id, message_text, is_spam, response_text
            FROM message_history 
            WHERE timestamp >= datetime('now', '-24 hours')
            ORDER BY timestamp DESC
            LIMIT 10
        ''')
        
        recent_messages = cursor.fetchall()
        
        response += "**–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π:**\n"
        for msg in recent_messages:
            status = "‚ùì –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ"
            if msg[3] == 1:
                status = "üö´ –°–ø–∞–º"
            elif msg[3] == 0:
                status = "‚úÖ –õ–µ–≥–∏—Ç–∏–º–Ω–æ–µ"
            
            response += f"‚Ä¢ ID:{msg[0]} - {status}\n"
            response += f"  –¢–µ–∫—Å—Ç: {msg[2][:30]}...\n"
            if msg[4]:
                response += f"  –û—Ç–≤–µ—Ç: {msg[4][:30]}...\n"
        
        await update.message.reply_text(response, parse_mode='Markdown')
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {e}")

async def safe_reply_to_message(message, reply_text: str, username: str):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        if message and message.message_id:
            await message.reply_text(reply_text)
            logger.info(f"üí¨ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω {username}: {reply_text[:50]}...")
        else:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ç–æ—Ç –∂–µ —á–∞—Ç
            await message.chat.send_message(reply_text)
            logger.info(f"üí¨ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç –¥–ª—è {username}: {reply_text[:50]}...")
            
    except Exception as e:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –¥–ª—è {username}: {e}")
        # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ reply
        try:
            await message.chat.send_message(reply_text)
            logger.info(f"üí¨ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –±–µ–∑ reply –¥–ª—è {username}")
        except Exception as e2:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è {username}: {e2}")

async def save_user_activity(db, user, username: str):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        db_username = user.username or user.first_name or "anonymous"
        cursor = db.execute_with_datetime('''
            INSERT OR REPLACE INTO user_activity 
            (user_id, username, first_seen, last_activity, messages_count)
            VALUES (?, ?, COALESCE((SELECT first_seen FROM user_activity WHERE user_id = ?), ?), ?, 
            COALESCE((SELECT messages_count FROM user_activity WHERE user_id = ?), 0) + 1)
        ''', (user.id, db_username, user.id, datetime.now().date().isoformat(), 
              datetime.now().date().isoformat(), user.id))
        db.conn.commit()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}")

async def handle_message_error(message, user, error):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    error_msg = str(error).lower()
    
    if "message to be replied not found" in error_msg:
        logger.warning(f"‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
        return
    
    if "bot was blocked" in error_msg:
        logger.warning(f"‚ö†Ô∏è –ë–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user.id}")
        return
        
    # –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    try:
        if user.first_name and user.first_name.lower() != "telegram":
            await message.reply_text(f"–°–ø–∞—Å–∏–±–æ, {user.first_name}! üòä")
        else:
            await message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π! üåü")
    except Exception:
        pass

def clean_message_text(text: str) -> str:
    """–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤"""
    if not text:
        return ""
    
    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
    text = text.strip()
    
    # –£–¥–∞–ª—è–µ–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã —Ç–∏–ø–∞ ___ –≤ –Ω–∞—á–∞–ª–µ
    text = re.sub(r'^_+\s*', '', text)
    
    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –∫–∞–≤—ã—á–∫–∏
    text = re.sub(r'^["\']+|\s*["\']+$', '', text)
    
    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    text = re.sub(r'\s+', ' ', text)
    
    return text.strip()

async def save_unprocessed_message(context, message):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ–ø—Ä–æ—Ü–µ—Å—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–∫–∞—Ö"""
    try:
        if message and message.text and message.from_user:
            cursor = context.bot_data['db'].execute_with_datetime('''
                INSERT INTO message_history 
                (user_id, message_text, timestamp, is_spam, response_text)
                VALUES (?, ?, ?, NULL, NULL)
            ''', (message.from_user.id, message.text, datetime.now()))
            context.bot_data['db'].conn.commit()
            logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –Ω–µ–ø—Ä–æ—Ü–µ—Å—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.id}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ–ø—Ä–æ—Ü–µ—Å—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–û–ë–©–ï–ù–ò–ô ===
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.effective_message
    if not message or not message.text:
        return

    user = message.from_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not await should_process_message(message):
        return

    text = clean_message_text(message.text)
    
    logger.info(f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.first_name or user.id}: {text[:50]}...")

    if str(message.chat.id) == CHANNEL_ID:
        await handle_channel_comment(update, context)
        return

    if not await context.bot_data['rate_limiter'].check_limit(user.id):
        try:
            await message.reply_text("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.")
            return
        except:
            pass
        return

    await context.bot_data['rate_limiter'].record_message(user.id, text)

    is_spam, spam_score = await context.bot_data['moderation'].advanced_spam_check(text, user.id)
    
    if is_spam:
        await handle_spam(message, user, spam_score, context)
    else:
        await handle_legitimate_message(message, user, text, context)

async def handle_channel_comment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.effective_message
    user = message.from_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not await should_process_message(message):
        return
    
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ—Å—Ç—ã –∫–∞–Ω–∞–ª–∞
    if await is_channel_post(message):
        logger.info("‚è© –ü—Ä–æ–ø—É—â–µ–Ω –ø–æ—Å—Ç –∫–∞–Ω–∞–ª–∞")
        return
        
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    if user and await is_admin_user(context.bot, user.id, CHANNEL_ID):
        logger.info(f"‚è© –ü—Ä–æ–ø—É—â–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {user.first_name}")
        return
        
    text = clean_message_text(message.text)
    
    if not user or not text:
        return
    
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–≤–µ—Ç—ã –Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ—Å—Ç—ã –±–æ—Ç–∞ (—É—Ç—Ä–µ–Ω–Ω–∏–µ –∏ –≤–µ—á–µ—Ä–Ω–∏–µ)
    if is_auto_post_message(text):
        logger.info(f"‚è© –ü—Ä–æ–ø—É—â–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∞–≤—Ç–æ-–ø–æ—Å—Ç—É –æ—Ç {user.first_name}")
        return
        
    logger.info(f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –∫–∞–Ω–∞–ª–µ –æ—Ç {user.first_name or '–∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'}: {text[:50]}...")

    is_spam, spam_score = await context.bot_data['moderation'].advanced_spam_check(text, user.id)
    
    if is_spam:
        await handle_spam(message, user, spam_score, context)
        return

    if not await context.bot_data['rate_limiter'].check_limit(user.id):
        logger.info(f"‚è∞ Rate limit –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –æ—Ç {user.first_name or '–∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'}")
        return

    await context.bot_data['rate_limiter'].record_message(user.id, text)

    try:
        username = await get_user_display_name(user, message)
        
        logger.info(f"ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç {username}")
        
        reply_text = await context.bot_data['response_generator'].generate_context_aware_reply(
            text, user.id, username
        )
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
        await safe_reply_to_message(message, reply_text, username)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        await save_user_activity(context.bot_data['db'], user, username)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        cursor = context.bot_data['db'].execute_with_datetime('''
            INSERT INTO message_history 
            (user_id, message_text, timestamp, is_spam, response_text)
            VALUES (?, ?, ?, ?, ?)
        ''', (
            user.id, 
            text, 
            datetime.now(), 
            False, 
            reply_text[:500]  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
        ))
        context.bot_data['db'].conn.commit()
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {e}")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –Ω–µ–ø—Ä–æ—Ü–µ—Å—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        await save_unprocessed_message(context, message)

async def handle_spam(message, user, spam_score, context):
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î –ö–ê–ö –°–ü–ê–ú –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
        try:
            cursor = context.bot_data['db'].execute_with_datetime('''
                INSERT INTO message_history 
                (user_id, message_text, timestamp, is_spam, response_text)
                VALUES (?, ?, ?, ?, ?)
            ''', (
                user.id, 
                message.text if message.text else "–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞", 
                datetime.now(), 
                True, 
                f"–£–¥–∞–ª–µ–Ω–æ –∫–∞–∫ —Å–ø–∞–º (score: {spam_score:.1f})"
            ))
            context.bot_data['db'].conn.commit()
            logger.info(f"üíæ –°–ø–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
        except Exception as db_error:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ø–∞–º–∞ –≤ –ë–î: {db_error}")

        # –¢–µ–ø–µ—Ä—å —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.delete()
        logger.warning(f"üõ°Ô∏è –£–¥–∞–ª–µ–Ω —Å–ø–∞–º –æ—Ç {user.first_name or user.id} (score: {spam_score:.1f})")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        moderation = context.bot_data['moderation']
        user_stats = moderation.get_user_stats(user.id)
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        if Config.NOTIFY_ON_SPAM:
            notification_system = context.bot_data.get('notification_system')
            if notification_system:
                notification = (
                    f"üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–ø–∞–º (score: {spam_score:.1f})\n"
                    f"üë§ –û—Ç: {user.first_name or user.id}\n"
                    f"üìä –£—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∏—è: {user_stats['trust_level']}\n"
                    f"üìù –¢–µ–∫—Å—Ç: {message.text[:100]}...\n"
                    f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ"
                )
                await notification_system.notify_admins(notification)
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±–∞–Ω –ø—Ä–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö
        if user_stats['warning_count'] >= 2:
            try:
                await context.bot.ban_chat_member(
                    chat_id=CHANNEL_ID,
                    user_id=user.id,
                    until_date=datetime.now() + timedelta(days=1)
                )
                logger.warning(f"üî® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∑–∞–±–∞–Ω–µ–Ω –Ω–∞ 1 –¥–µ–Ω—å")
                
                if notification_system:
                    ban_notification = (
                        f"üî® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω –∑–∞ —Å–ø–∞–º\n"
                        f"üë§ ID: {user.id}\n"
                        f"üìõ –ò–º—è: {user.first_name or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
                        f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {user_stats['warning_count']}\n"
                        f"üìä –£—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∏—è: {user_stats['trust_level']}"
                    )
                    await notification_system.notify_admins(ban_notification)
                    
            except Exception as ban_error:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {ban_error}")
            
    except Forbidden as e:
        logger.error(f"‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {user.id}: {e}")
    except Exception as e:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–ø–∞–º: {e}")

async def handle_legitimate_message(message, user, text, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–µ–≥–∏—Ç–∏–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        username = await get_user_display_name(user, message)
        
        logger.info(f"ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –¥–ª—è {username} –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text[:50]}...")
        
        reply_text = await context.bot_data['response_generator'].generate_context_aware_reply(
            text, user.id, username
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î –∫–∞–∫ –ù–ï —Å–ø–∞–º
        try:
            cursor = context.bot_data['db'].execute_with_datetime('''
                INSERT INTO message_history 
                (user_id, message_text, timestamp, is_spam, response_text)
                VALUES (?, ?, ?, ?, ?)
            ''', (
                user.id, 
                text, 
                datetime.now(), 
                False, 
                reply_text[:500]  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
            ))
            context.bot_data['db'].conn.commit()
        except Exception as db_error:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ë–î: {db_error}")
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
        await safe_reply_to_message(message, reply_text, username)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        await save_user_activity(context.bot_data['db'], user, username)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {user.id}: {e}")
        await handle_message_error(message, user, e)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –Ω–µ–ø—Ä–æ—Ü–µ—Å—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        await save_unprocessed_message(context, message)
        
async def update_stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    try:
        await update.message.reply_text("üîÑ –û–±–Ω–æ–≤–ª—è—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
        
        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        db = context.bot_data['db']
        cursor = db.conn.cursor()
        
        cursor.execute('SELECT COUNT(*) FROM message_history WHERE is_spam = TRUE')
        spam_count = cursor.fetchone()[0]
        
        cursor.execute('SELECT COUNT(*) FROM message_history')
        total_count = cursor.fetchone()[0]
        
        cursor.execute('SELECT COUNT(*) FROM message_history WHERE is_spam IS NULL AND response_text IS NULL')
        unprocessed_count = cursor.fetchone()[0]
        
        await update.message.reply_text(
            f"üìä **–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
            f"‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ë–î: {total_count}\n"
            f"‚Ä¢ –°–ø–∞–º —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ë–î: {spam_count}\n"
            f"‚Ä¢ –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {unprocessed_count}\n"
            f"‚Ä¢ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {spam_count/max(1, total_count)*100:.1f}%",
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö –í–°–ï–• –°–û–û–ë–©–ï–ù–ò–ô ===
async def handle_all_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–æ–≤
        if context.user_data.get('content_plan_stage'):
            stage = context.user_data.get('content_plan_stage')
            if stage in ['niche', 'audience', 'posts_count']:
                await context.bot_data['content_plan_manager'].handle_content_plan_creation(update, context)
                return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤
        if context.user_data.get('creating_post'):
            stage = context.user_data.get('post_stage')
            if stage in ['topic', 'main_idea', 'schedule_time']:
                await context.bot_data['post_creator'].handle_post_creation(update, context)
                return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤ –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞
        if context.user_data.get('scheduling_plan_post'):
            await context.bot_data['post_creator'].handle_plan_post_scheduling(update, context)
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        await handle_message(update, context)
        
    except NetworkError as e:
        logger.error(f"üåê –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: {e}")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –Ω–µ–ø—Ä–æ—Ü–µ—Å—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ
        await save_unprocessed_message(context, update.effective_message)
        
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –Ω–µ–ø—Ä–æ—Ü–µ—Å—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ
        await save_unprocessed_message(context, update.effective_message)

# === –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê ===
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_text = """üöÄ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MamaAI –ë–æ—Ç–∞!**

ü§ñ –Ø –ø–æ–º–æ–≥–∞—é –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ—Ä–∞—Ü–∏—é –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –≤ Telegram-–∫–∞–Ω–∞–ª–∞—Ö.

**–ß—Ç–æ —è —É–º–µ—é:**
üõ°Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Ö–æ–¥–∏—Ç—å –∏ —É–¥–∞–ª—è—Ç—å —Å–ø–∞–º
üí¨ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
üì¢ –ü—É–±–ª–∏–∫–æ–≤–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –ø–æ—Å—Ç—ã
üìä –°–æ–±–∏—Ä–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç—ã —Å –ø–æ–º–æ—â—å—é –ò–ò
üìÖ –°–æ–∑–¥–∞–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω—ã

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"""
    
    reply_markup = get_main_menu_keyboard()
    
    if update.message:
        await update.message.reply_text(welcome_text, reply_markup=reply_markup, parse_mode='Markdown')
    elif update.callback_query:
        await update.callback_query.edit_message_text(welcome_text, reply_markup=reply_markup, parse_mode='Markdown')

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        db = context.bot_data['db']
        cache = context.bot_data['cache']
        
        cursor = db.conn.cursor()
        
        cursor.execute('SELECT COUNT(*) FROM message_history')
        total_messages = cursor.fetchone()[0]
        
        cursor.execute('SELECT COUNT(*) FROM message_history WHERE is_spam = TRUE')
        spam_blocked = cursor.fetchone()[0]
        
        cursor.execute('SELECT COUNT(DISTINCT user_id) FROM user_activity')
        unique_users = cursor.fetchone()[0]
        
        cursor.execute('SELECT COUNT(*) FROM scheduled_posts WHERE status = "scheduled"')
        scheduled_posts = cursor.fetchone()[0]
        
        cursor.execute('SELECT COUNT(*) FROM content_plans')
        content_plans = cursor.fetchone()[0]
        
        cursor.execute('SELECT COUNT(*) FROM message_history WHERE is_spam IS NULL AND response_text IS NULL')
        unprocessed_messages = cursor.fetchone()[0]
        
        cache_stats = cache.get_stats()
        
        stats_text = f"""üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞**

‚Ä¢ üí¨ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}
‚Ä¢ üõ°Ô∏è –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ —Å–ø–∞–º–∞: {spam_blocked}
‚Ä¢ üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {unique_users}
‚Ä¢ üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –ø–æ—Å—Ç–æ–≤: {scheduled_posts}
‚Ä¢ üìã –ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–æ–≤: {content_plans}
‚Ä¢ ‚è≥ –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {unprocessed_messages}
‚Ä¢ üíæ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫—ç—à–∞: {cache_stats['hit_rate']:.1%}
‚Ä¢ ‚è∞ –ê–≤—Ç–æ-–ø–æ—Å—Ç—ã: –∞–∫—Ç–∏–≤–Ω—ã

–í—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ! ‚úÖ"""
        
        if update.message:
            await update.message.reply_text(stats_text, parse_mode='Markdown')
        elif update.callback_query:
            await update.callback_query.edit_message_text(stats_text, parse_mode='Markdown')
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        error_text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
        if update.message:
            await update.message.reply_text(error_text)
        elif update.callback_query:
            await update.callback_query.edit_message_text(error_text)

async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    from config import MORNING_POST_TIME, EVENING_POST_TIME
    
    status_text = f"""üñ• **–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã**

‚Ä¢ ü§ñ –ú–æ–¥–µ–ª—å –ò–ò: –ó–∞–≥—Ä—É–∂–µ–Ω–∞
‚Ä¢ üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –ê–∫—Ç–∏–≤–Ω–∞
‚Ä¢ üì¢ –ê–≤—Ç–æ-–ø–æ—Å—Ç—ã: –†–∞–±–æ—Ç–∞—é—Ç
‚Ä¢ üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ü–∏—è: –í–∫–ª—é—á–µ–Ω–∞
‚Ä¢ üåê –°–µ—Ç—å: –°—Ç–∞–±–∏–ª—å–Ω–∞—è

‚è∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å—Ç–æ–≤:
‚Ä¢ –£—Ç—Ä–µ–Ω–Ω–∏–µ: {MORNING_POST_TIME.strftime('%H:%M')}
‚Ä¢ –í–µ—á–µ—Ä–Ω–∏–µ: {EVENING_POST_TIME.strftime('%H:%M')}

üïê –í—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞: {datetime.now().strftime('%H:%M:%S')}"""
    
    if update.message:
        await update.message.reply_text(status_text, parse_mode='Markdown')
    elif update.callback_query:
        await update.callback_query.edit_message_text(status_text, parse_mode='Markdown')

async def test_post_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        post_text = f"üß™ **–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç**\n\n–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ {datetime.now().strftime('%H:%M:%S')}\n\n–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ! ‚úÖ"
        
        success = await send_message_with_fallback(context.application, CHANNEL_ID, post_text)
        
        if success:
            await update.message.reply_text("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª–µ!")
            logger.info("üì¢ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        else:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç")
            logger.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞")
            
    except Forbidden as e:
        if "bot is not a member" in str(e):
            await update.message.reply_text(
                "‚ùå –ë–æ—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª!\n\n"
                "–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n"
                "1. –ó–∞–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞\n"
                "2. –í—ã–±–µ—Ä–∏—Ç–µ '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã'\n"
                "3. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ @MamaAIBot\n"
                "4. –î–∞–π—Ç–µ –ø—Ä–∞–≤–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π"
            )
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞")
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞: {e}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    from config import MORNING_POST_TIME, EVENING_POST_TIME
    
    help_text = f"""ü§ñ –ü–æ–º–æ—â—å –ø–æ MamaAI –ë–æ—Ç—É

–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞
/status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
/test_post - —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç
/create_post - —Å–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç —Å –ò–ò
/content_plan - —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω
/scheduled_posts - –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã
/check_permissions - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –±–æ—Ç–∞
/moderation_stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
/my_trust - –º–æ–π —É—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∏—è
/my_content_plans - –º–æ–∏ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω—ã
/force_recovery - –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
/update_stats - –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:
‚Ä¢ –ú–æ–¥–µ—Ä–∞—Ü–∏—è —Å–ø–∞–º–∞ (AI –ø—Ä–æ–≤–µ—Ä–∫–∞)
‚Ä¢ –û—Ç–≤–µ—Ç—ã –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ (AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—è)
‚Ä¢ –£—Ç—Ä–µ–Ω–Ω–∏–µ –ø–æ—Å—Ç—ã: {MORNING_POST_TIME.strftime('%H:%M')}
‚Ä¢ –í–µ—á–µ—Ä–Ω–∏–µ –ø–æ—Å—Ç—ã: {EVENING_POST_TIME.strftime('%H:%M')}
‚Ä¢ –°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏! üéØ"""
    
    if update.message:
        await update.message.reply_text(help_text)
    elif update.callback_query:
        await update.callback_query.edit_message_text(help_text)

async def create_post_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['creating_post'] = True
    context.user_data['post_stage'] = 'topic'
    
    if update.message:
        await update.message.reply_text(
            "ü§ñ **–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é –ò–ò**\n\n"
            "üìù **–®–∞–≥ 1 –∏–∑ 5:** –í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –ø–æ—Å—Ç–∞:",
            parse_mode='Markdown'
        )
    elif update.callback_query:
        await update.callback_query.edit_message_text(
            "ü§ñ **–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é –ò–ò**\n\n"
            "üìù **–®–∞–≥ 1 –∏–∑ 5:** –í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –ø–æ—Å—Ç–∞:",
            parse_mode='Markdown'
        )

async def content_plan_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reply_markup = get_content_plan_type_keyboard()
    
    if update.message:
        await update.message.reply_text(
            "üìÖ **–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    elif update.callback_query:
        await update.callback_query.edit_message_text(
            "üìÖ **–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

async def scheduled_posts_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        stats = await context.bot_data['post_scheduler'].get_scheduled_posts_stats()
        
        response = "üìÖ **–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã**\n\n"
        
        if stats['upcoming_posts']:
            response += "‚è∞ **–ë–ª–∏–∂–∞–π—à–∏–µ –ø–æ—Å—Ç—ã:**\n"
            for post in stats['upcoming_posts']:
                response += f"‚Ä¢ {post['time']}: {post['topic']}\n"
            response += "\n"
        else:
            response += "üì≠ –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤\n\n"
        
        response += "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
        for status, count in stats['stats'].items():
            status_emoji = {
                'scheduled': '‚è∞',
                'published': '‚úÖ', 
                'error': '‚ùå'
            }.get(status, 'üìù')
            response += f"‚Ä¢ {status_emoji} {status}: {count}\n"
        
        if update.message:
            await update.message.reply_text(response, parse_mode='Markdown')
        elif update.callback_query:
            await update.callback_query.edit_message_text(response, parse_mode='Markdown')
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤: {e}")
        error_text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤"
        if update.message:
            await update.message.reply_text(error_text)
        elif update.callback_query:
            await update.callback_query.edit_message_text(error_text)

async def check_permissions_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ"""
    try:
        if update.message:
            await update.message.reply_text("üîç –ü—Ä–æ–≤–µ—Ä—è—é –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ...")
        elif update.callback_query:
            await update.callback_query.edit_message_text("üîç –ü—Ä–æ–≤–µ—Ä—è—é –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ...")
        
        has_permissions = await check_bot_permissions(context.application.bot, CHANNEL_ID)
        
        if has_permissions:
            response = (
                "‚úÖ **–ü—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –ø–æ—Ä—è–¥–∫–µ!**\n\n"
                "–ë–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞ –∏ –º–æ–∂–µ—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç—ã."
            )
        else:
            response = (
                "‚ùå **–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø—Ä–∞–≤–∞–º–∏ –±–æ—Ç–∞!**\n\n"
                "–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n"
                "1. –ó–∞–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞\n"
                "2. –í—ã–±–µ—Ä–∏—Ç–µ '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã'\n" 
                "3. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ @MamaAIBot\n"
                "4. –î–∞–π—Ç–µ –ø—Ä–∞–≤–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π\n\n"
                "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /check_permissions —Å–Ω–æ–≤–∞."
            )
        
        if update.message:
            await update.message.reply_text(response, parse_mode='Markdown')
        elif update.callback_query:
            await update.callback_query.edit_message_text(response, parse_mode='Markdown')
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤: {e}")
        error_text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤"
        if update.message:
            await update.message.reply_text(error_text)
        elif update.callback_query:
            await update.callback_query.edit_message_text(error_text)

async def force_check_scheduled_posts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤"""
    try:
        await update.message.reply_text("üîç –ü—Ä–æ–≤–µ—Ä—è—é –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã...")
        await context.bot_data['post_scheduler']._check_scheduled_posts()
        await update.message.reply_text("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ")

async def force_auto_post(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –∞–≤—Ç–æ-–ø–æ—Å—Ç–∞"""
    try:
        post_type = context.args[0] if context.args else "morning"
        
        if post_type not in ["morning", "evening"]:
            await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /force_auto_post morning –∏–ª–∏ /force_auto_post evening")
            return
        
        auto_post_scheduler = context.bot_data['auto_post_scheduler']
        await auto_post_scheduler._publish_post(post_type)
        await update.message.reply_text(f"‚úÖ {post_type} –ø–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞")

async def moderation_stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
    try:
        moderation = context.bot_data['moderation']
        stats = moderation.get_moderation_stats()
        
        stats_text = f"""üõ°Ô∏è **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏**

‚Ä¢ üìä –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {stats['total_checked']}
‚Ä¢ üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å–ø–∞–º–∞: {stats['spam_detected']}
‚Ä¢ ü§ñ AI –ø—Ä–æ–≤–µ—Ä–æ–∫: {stats['ai_checks']}
‚Ä¢ ‚ö†Ô∏è –õ–æ–∂–Ω—ã—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π: {stats['false_positives']}

**–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:** {stats['spam_detected']/max(1, stats['total_checked'])*100:.1f}%"""
        
        if update.message:
            await update.message.reply_text(stats_text, parse_mode='Markdown')
        elif update.callback_query:
            await update.callback_query.edit_message_text(stats_text, parse_mode='Markdown')
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {e}")

async def user_trust_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–≤–µ—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user = update.effective_user
        moderation = context.bot_data['moderation']
        user_stats = moderation.get_user_stats(user.id)
        
        trust_emoji = {
            'trusted': 'üü¢',
            'neutral': 'üü°', 
            'suspicious': 'üü†',
            'banned': 'üî¥'
        }
        
        trust_text = f"""üë§ **–í–∞—à —É—Ä–æ–≤–µ–Ω—å –¥–æ–≤–µ—Ä–∏—è**

{trust_emoji[user_stats['trust_level']]} **–£—Ä–æ–≤–µ–Ω—å:** {user_stats['trust_level'].upper()}
üìä **–û—á–∫–æ–≤ –¥–æ–≤–µ—Ä–∏—è:** {user_stats['trust_score']}/100
üí¨ **–°–æ–æ–±—â–µ–Ω–∏–π:** {user_stats['message_count']}
‚ö†Ô∏è **–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π:** {user_stats['warning_count']}
üö® **–°–ø–∞–º-—Å–æ–æ–±—â–µ–Ω–∏–π:** {user_stats['spam_count']}

**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
‚Ä¢ –ù–µ —Å–ø–∞–º—å—Ç–µ —Å—Å—ã–ª–∫–∞–º–∏"""
        
        if update.message:
            await update.message.reply_text(trust_text, parse_mode='Markdown')
        elif update.callback_query:
            await update.callback_query.edit_message_text(trust_text, parse_mode='Markdown')
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–≤–µ—Ä–∏—è: {e}")

async def my_content_plans_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = update.effective_user
    
    try:
        content_plan_manager = context.bot_data['content_plan_manager']
        plans = await content_plan_manager.get_user_content_plans(user.id)
        
        if not plans:
            if update.message:
                await update.message.reply_text(
                    "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–æ–≤.\n\n"
                    "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω —á–µ—Ä–µ–∑ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥–æ–π /content_plan",
                    parse_mode='Markdown'
                )
            elif update.callback_query:
                await update.callback_query.edit_message_text(
                    "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–æ–≤.\n\n"
                    "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω —á–µ—Ä–µ–∑ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥–æ–π /content_plan",
                    parse_mode='Markdown'
                )
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –ø–ª–∞–Ω, –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏
        await show_content_plan_details(update, context, plans[0], 0, len(plans))
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–æ–≤: {e}")
        error_text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–æ–≤"
        if update.message:
            await update.message.reply_text(error_text)
        elif update.callback_query:
            await update.callback_query.edit_message_text(error_text)

async def show_content_plan_details(update: Update, context: ContextTypes.DEFAULT_TYPE, plan: Dict, current_index: int, total_plans: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞"""
    plan_text = f"üìÖ **{plan['name']}**\n\n"
    plan_text += f"üìä **–¢–∏–ø:** {plan['type']}\n"
    plan_text += f"üìÖ **–ü–µ—Ä–∏–æ–¥:** {plan['start_date']} - {plan['end_date']}\n\n"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –ø–æ—Å—Ç–æ–≤ –∏–∑ –ø–ª–∞–Ω–∞
    plan_data = plan.get('plan_data', {})
    posts = plan_data.get('plan', [])
    
    if posts:
        plan_text += "**–ü–æ—Å—Ç—ã –≤ –ø–ª–∞–Ω–µ:**\n\n"
        for i, post in enumerate(posts[:5]):
            day_info = post.get('day', '') or post.get('date', '')
            plan_text += f"**{i+1}. {day_info}**\n"
            plan_text += f"üéØ –¢–µ–º–∞: {post.get('topic', '–ë–µ–∑ —Ç–µ–º—ã')}\n"
            plan_text += f"üìù –¢–∏–ø: {post.get('post_type', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            plan_text += f"üí° –ò–¥–µ—è: {post.get('main_idea', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')[:50]}...\n\n"
    else:
        plan_text += "üì≠ –í –ø–ª–∞–Ω–µ –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤\n\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard = []
    if total_plans > 1:
        nav_buttons = []
        if current_index > 0:
            nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"plan_nav_{current_index-1}"))
        nav_buttons.append(InlineKeyboardButton(f"{current_index+1}/{total_plans}", callback_data="plan_info"))
        if current_index < total_plans - 1:
            nav_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"plan_nav_{current_index+1}"))
        keyboard.append(nav_buttons)
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ—Å—Ç–∞–º–∏
    if posts:
        keyboard.append([InlineKeyboardButton("üéØ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç –∏–∑ —ç—Ç–æ–≥–æ –ø–ª–∞–Ω–∞", callback_data=f"select_plan_post_{plan['id']}")])
    
    keyboard.extend([
        [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–ª–∞–Ω", callback_data=f"delete_plan_{plan['id']}")],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="my_content_plans")]
    ])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.message:
        await update.message.reply_text(plan_text, reply_markup=reply_markup, parse_mode='Markdown')
    elif update.callback_query:
        await update.callback_query.edit_message_text(plan_text, reply_markup=reply_markup, parse_mode='Markdown')

async def select_plan_post(update: Update, context: ContextTypes.DEFAULT_TYPE, plan_id: int):
    """–í—ã–±–æ—Ä –ø–æ—Å—Ç–∞ –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    user = update.effective_user
    query = update.callback_query
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω
        cursor = context.bot_data['db'].conn.cursor()
        cursor.execute('''
            SELECT plan_data, plan_name FROM content_plans 
            WHERE id = ? AND user_id = ?
        ''', (plan_id, user.id))
        
        result = cursor.fetchone()
        if not result:
            await query.edit_message_text("‚ùå –ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        plan_data_json, plan_name = result
        plan_data = json.loads(plan_data_json) if plan_data_json else {}
        posts = plan_data.get('plan', [])
        
        if not posts:
            await query.edit_message_text("‚ùå –í –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–µ –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ—Å—Ç–∞–º–∏
        keyboard = []
        for i, post in enumerate(posts):
            day_info = post.get('day', '') or post.get('date', '')
            post_title = f"{i+1}. {day_info} - {post.get('topic', '–ë–µ–∑ —Ç–µ–º—ã')[:30]}..."
            keyboard.append([InlineKeyboardButton(post_title, callback_data=f"generate_plan_post_{plan_id}_{i}")])
        
        keyboard.append([InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –ø–ª–∞–Ω—É", callback_data=f"plan_nav_0")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"üìù **–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑ –ø–ª–∞–Ω–∞:**\n**{plan_name}**\n\n"
            f"–í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤ –≤ –ø–ª–∞–Ω–µ: {len(posts)}",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ—Å—Ç–∞ –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ—Å—Ç–∞")

async def force_recovery_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        await update.message.reply_text("üîÑ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...")
        
        recovery_system = context.bot_data.get('recovery_system')
        if recovery_system:
            # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä —á–∞—Å–æ–≤ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
            hours_back = 24
            if context.args and context.args[0].isdigit():
                hours_back = min(int(context.args[0]), 168)  # –ú–∞–∫—Å–∏–º—É–º 7 –¥–Ω–µ–π
            
            result = await recovery_system.force_recovery(hours_back)
            
            if result["success"]:
                stats = result.get("stats", {})
                response = (
                    f"‚úÖ **–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!**\n\n"
                    f"üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:**\n"
                    f"‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats.get('total_messages', 0)}\n"
                    f"‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats.get('processed', 0)}\n"
                    f"‚Ä¢ –°–ø–∞–º–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ: {stats.get('spam_detected', 0)}\n"
                    f"‚Ä¢ –û—à–∏–±–æ–∫: {stats.get('errors', 0)}\n"
                    f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {stats.get('success_rate', 0):.1f}%\n\n"
                    f"‚è∞ –ü–µ—Ä–∏–æ–¥: –ø–æ—Å–ª–µ–¥–Ω–∏–µ {hours_back} —á–∞—Å–æ–≤"
                )
            else:
                response = f"‚ùå **–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:** {result['message']}"
            
            await update.message.reply_text(response, parse_mode='Markdown')
        else:
            await update.message.reply_text("‚ùå –°–∏—Å—Ç–µ–º–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏")

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò CALLBACK ===
async def handle_all_callbacks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user = query.from_user
    data = query.data
    
    logger.info(f"üîî Callback: {data} –æ—Ç {user.id}")
    
    if data in ["stats", "status", "auto_posts", "create_post", "content_plan", "help", "scheduled_posts", "check_permissions", "main_menu", "my_content_plans"]:
        await handle_main_menu_callback(update, context)
    elif any(data.startswith(prefix) for prefix in ["tone_", "length_", "emojis_", "publish_now", "schedule_later"]):
        await handle_post_creation_callback(update, context)
    elif data.startswith('plan_nav_'):
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞–º
        plan_index = int(data.split('_')[2])
        user = query.from_user
        content_plan_manager = context.bot_data['content_plan_manager']
        plans = await content_plan_manager.get_user_content_plans(user.id)
        
        if 0 <= plan_index < len(plans):
            await show_content_plan_details(update, context, plans[plan_index], plan_index, len(plans))
    elif data.startswith('select_plan_post_'):
        # –í—ã–±–æ—Ä –ø–æ—Å—Ç–∞ –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞
        plan_id = int(data.split('_')[3])
        await select_plan_post(update, context, plan_id)
    elif data.startswith('generate_plan_post_'):
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞ –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞
        parts = data.split('_')
        plan_id = int(parts[3])
        post_index = int(parts[4])
        await context.bot_data['post_creator'].generate_post_from_plan(update, context, plan_id, post_index)
    elif data.startswith('publish_plan_post_'):
        # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞ –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞
        parts = data.split('_')
        plan_id = int(parts[3])
        post_index = int(parts[4])
        await context.bot_data['post_creator'].publish_plan_post(update, context, plan_id, post_index)
    elif data.startswith('schedule_plan_post_'):
        # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞
        parts = data.split('_')
        plan_id = int(parts[3])
        post_index = int(parts[4])
        await context.bot_data['post_creator'].schedule_plan_post(update, context, plan_id, post_index)
    elif data.startswith('regenerate_plan_post_'):
        # –†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞ –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞
        parts = data.split('_')
        plan_id = int(parts[3])
        post_index = int(parts[4])
        await context.bot_data['post_creator'].generate_post_from_plan(update, context, plan_id, post_index)
    else:
        await handle_content_plan_callback(update, context)

async def handle_main_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data
    
    try:
        if data == "stats":
            await stats_command(update, context)
        elif data == "status":
            await status_command(update, context)
        elif data == "auto_posts":
            await query.edit_message_text("ü§ñ –ê–≤—Ç–æ-–ø–æ—Å—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é! ‚úÖ", parse_mode='Markdown')
        elif data == "create_post":
            await create_post_command(update, context)
        elif data == "content_plan":
            await content_plan_command(update, context)
        elif data == "my_content_plans":
            await my_content_plans_command(update, context)
        elif data == "scheduled_posts":
            await scheduled_posts_command(update, context)
        elif data == "check_permissions":
            await check_permissions_command(update, context)
        elif data == "help":
            await help_command(update, context)
        elif data == "main_menu":
            await start_command(update, context)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –º–µ–Ω—é: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

async def handle_post_creation_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data
    
    if data.startswith('tone_'):
        tone = data.split('_')[1]
        context.user_data['post_tone'] = tone
        context.user_data['post_stage'] = 'main_idea'
        
        await query.edit_message_text(
            "üí° **–®–∞–≥ 3 –∏–∑ 5:** –í–≤–µ–¥–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—É—é –º—ã—Å–ª—å –ø–æ—Å—Ç–∞:",
            parse_mode='Markdown'
        )
    
    elif data.startswith('length_'):
        length = data.split('_')[1]
        context.user_data['post_length'] = length
        context.user_data['post_stage'] = 'emojis'
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –°–æ —Å–º–∞–π–ª–∏–∫–∞–º–∏", callback_data="emojis_yes")],
            [InlineKeyboardButton("‚ùå –ë–µ–∑ —Å–º–∞–π–ª–∏–∫–æ–≤", callback_data="emojis_no")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üòä **–®–∞–≥ 5 –∏–∑ 5:** –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–º–∞–π–ª–∏–∫–∏ –≤ –ø–æ—Å—Ç–µ?",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    elif data.startswith('emojis_'):
        use_emojis = data.split('_')[1] == 'yes'
        context.user_data['post_emojis'] = use_emojis
        
        await query.edit_message_text("ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–æ—Å—Ç... ‚è≥")
        
        try:
            generated_post = await context.bot_data['response_generator'].generate_post(
                topic=context.user_data['post_topic'],
                tone=context.user_data['post_tone'],
                main_idea=context.user_data['post_main_idea'],
                use_emojis=use_emojis,
                length=context.user_data['post_length']
            )
            
            context.user_data['generated_post'] = generated_post
            context.user_data['post_stage'] = 'schedule'
            
            keyboard = [
                [InlineKeyboardButton("‚è∞ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å", callback_data="publish_now")],
                [InlineKeyboardButton("üìÖ –û—Ç–ª–æ–∂–∏—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é", callback_data="schedule_later")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                f"üìù **–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç:**\n\n{generated_post}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞")
    
    elif data == 'publish_now':
        try:
            success = await send_message_with_fallback(context.application, CHANNEL_ID, context.user_data['generated_post'])
            
            if success:
                cursor = context.bot_data['db'].execute_with_datetime('''
                    INSERT INTO scheduled_posts 
                    (user_id, post_text, scheduled_time, channel_id, tone, topic, length, main_idea, status)
                    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
                ''', (
                    query.from_user.id,
                    context.user_data['generated_post'],
                    datetime.now(),
                    CHANNEL_ID,
                    context.user_data['post_tone'],
                    context.user_data['post_topic'],
                    context.user_data['post_length'],
                    context.user_data['post_main_idea'],
                    'published'
                ))
                context.bot_data['db'].conn.commit()
                
                context.user_data.clear()
                await query.edit_message_text("‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!", parse_mode='Markdown')
            else:
                await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç")
            
        except Forbidden as e:
            if "bot is not a member" in str(e):
                await query.edit_message_text(
                    "‚ùå –ë–æ—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª!\n\n"
                    "–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n"
                    "1. –ó–∞–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞\n"
                    "2. –í—ã–±–µ—Ä–∏—Ç–µ '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã'\n"
                    "3. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ @MamaAIBot\n"
                    "4. –î–∞–π—Ç–µ –ø—Ä–∞–≤–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π\n\n"
                    "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                )
            else:
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞")
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞")
    
    elif data == 'schedule_later':
        context.user_data['post_stage'] = 'schedule_time'
        await query.edit_message_text(
            "‚è∞ **–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏**\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:\n\n"
            "‚Ä¢ **–°–µ–π—á–∞—Å** - –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ\n"
            "‚Ä¢ **–ß–µ—Ä–µ–∑ 2 —á–∞—Å–∞** - —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è\n"
            "‚Ä¢ **–ó–∞–≤—Ç—Ä–∞ 15:30** - –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è",
            parse_mode='Markdown'
        )

async def handle_content_plan_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data
    
    if data == "content_plan_weekly":
        await context.bot_data['content_plan_manager'].create_content_plan(update, context, "weekly")
    elif data == "content_plan_monthly":
        await context.bot_data['content_plan_manager'].create_content_plan(update, context, "monthly")
    elif data.startswith('plan_tone_'):
        tone = data.split('_')[2]
        context.user_data['content_plan_tone'] = tone
        context.user_data['content_plan_stage'] = 'posts_count'
        
        await query.edit_message_text(
            "üìä **–®–∞–≥ 4 –∏–∑ 4:** –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –≤ –Ω–µ–¥–µ–ª—é (1-50):",
            parse_mode='Markdown'
        )

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö –û–®–ò–ë–û–ö ===
async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"‚ùå –û—à–∏–±–∫–∞: {context.error}", exc_info=context.error)
    
    try:
        if update and update.callback_query:
            await update.callback_query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
        elif update and update.message:
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –æ—à–∏–±–æ–∫: {e}")

# === –ù–ê–°–¢–†–û–ô–ö–ê –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í ===
def setup_handlers(app: Application):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    app.add_error_handler(error_handler)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(CommandHandler("stats", stats_command))
    app.add_handler(CommandHandler("status", status_command))
    app.add_handler(CommandHandler("test_post", test_post_command))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("create_post", create_post_command))
    app.add_handler(CommandHandler("content_plan", content_plan_command))
    app.add_handler(CommandHandler("scheduled_posts", scheduled_posts_command))
    app.add_handler(CommandHandler("check_permissions", check_permissions_command))
    app.add_handler(CommandHandler("force_check", force_check_scheduled_posts))
    app.add_handler(CommandHandler("force_auto_post", force_auto_post))
    app.add_handler(CommandHandler("moderation_stats", moderation_stats_command))
    app.add_handler(CommandHandler("my_trust", user_trust_command))
    app.add_handler(CommandHandler("my_content_plans", my_content_plans_command))
    app.add_handler(CommandHandler("update_stats", update_stats_command))
    app.add_handler(CommandHandler("force_recovery", force_recovery_command))
    app.add_handler(CommandHandler("check_messages", check_messages_status_command))
    
    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback
    app.add_handler(CallbackQueryHandler(handle_all_callbacks))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    app.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND & (
            filters.ChatType.PRIVATE | 
            filters.ChatType.GROUPS | 
            filters.ChatType.SUPERGROUP
        ), 
        handle_all_messages
    ))